[{"content":" 练习一：飞机票 需求:\n​\t机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。\n​\t按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 package com.itheima.test; import java.util.Scanner; public class Test1 { public static void main(String[] args) { /* 机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。 按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。*/ //分析： //1.键盘录入机票原价、月份、头等舱或经济舱 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入机票的原价\u0026#34;); int ticket = sc.nextInt(); System.out.println(\u0026#34;请输入当前的月份\u0026#34;); int month = sc.nextInt(); System.out.println(\u0026#34;请输入当前购买的舱位 0 头等舱 1 经济舱\u0026#34;); int seat = sc.nextInt(); //2.先判断月份是旺季还是淡季 //ctrl + alt + M 自动抽取方法 if (month \u0026gt;= 5 \u0026amp;\u0026amp; month \u0026lt;= 10) { //旺季 //3.继续判断当前机票是经济舱还是头等舱 //ticket = getPrice(ticket, seat, 0.9, 0.85); ticket = getTicket(ticket, seat, 0.9, 0.85); } else if ((month \u0026gt;= 1 \u0026amp;\u0026amp; month \u0026lt;= 4) || (month \u0026gt;= 11 \u0026amp;\u0026amp; month \u0026lt;= 12)) { //淡季 //ticket = getPrice(ticket, seat, 0.7, 0.65); ticket = getTicket(ticket, seat, 0.7, 0.65); } else { //表示键盘录入的月份是一个非法数据 System.out.println(\u0026#34;键盘录入的月份不合法\u0026#34;); } System.out.println(ticket); } public static int getTicket(int ticket, int seat, double v, double v2) { if (seat == 0) { //头等舱 ticket = (int) (ticket * v); } else if (seat == 1) { //经济舱 ticket = (int) (ticket * v2); } else { System.out.println(\u0026#34;没有这个舱位\u0026#34;); } return ticket; } //1.我要干嘛？根据舱位和折扣来计算最终的票价 //2.我干这件事，需要什么才能完成？原价 舱位 头等舱的折扣 经济舱的折扣 //3.方法的调用处是否需要继续使用这个结果 需要 /* public static int getPrice(int ticket, int seat, double v0, double v1) { if (seat == 0) { //头等舱 ticket = (int) (ticket * v0); } else if (seat == 1) { //经济舱 ticket = (int) (ticket * v1); } else { System.out.println(\u0026#34;没有这个舱位\u0026#34;); } return ticket; }*/ } 练习二：打印素数 ​\t判断101~200之间有多少个素数，并输出所有素数。\n备注：素数就是质数\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package com.itheima.test; public class Test2 { public static void main(String[] args) { //判断 101 ~ 200 之间有多少个素数，并打印所有素数 //思路一： 2 ~ 99 //定义变量i ，赋值100 //判断i是否为质数 //定义一个变量用来统计有多少个质数 int count = 0; //外循环：遍历101~200这个范围，依次得到这个范围之内的每一个数字 for (int i = 101; i \u0026lt;= 200; i++) { //i 依次表示循环中的每一个数字 //继续判断i是否为一个质数 boolean flag = true; //内循环:判断当前数字是否为一个质数。 for (int j = 2; j \u0026lt; i; j++) { //j 表示2~99之间的每一个数字 if(i % j == 0){ flag = false; //跳出单层循环，内循环 break; } } if(flag){ System.out.println(\u0026#34;当前数字\u0026#34;+i+\u0026#34;是质数\u0026#34;); count++; } } System.out.println(\u0026#34;一共有\u0026#34; + count + \u0026#34;个质数\u0026#34;); /* int i = 7; boolean flag = true; for (int j = 2; j \u0026lt; i; j++) { //j 表示2~99之间的每一个数字 if(i % j == 0){ flag = false; break; } } if(flag){ System.out.println(\u0026#34;当前数字是质数\u0026#34;); }else{ System.out.println(\u0026#34;当前数字不是一个质数\u0026#34;); }*/ } } 练习三：验证码 需求：\n​\t定义方法实现随机产生一个5位的验证码\n验证码格式：\n​\t长度为5\n​\t前四位是大写字母或者小写字母\n​\t最后一位是数字\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 package com.itheima.test; import java.util.Random; public class Test3 { public static void main(String[] args) { /* 需求： 定义方法实现随机产生一个5位的验证码 验证码格式： 长度为5 前四位是大写字母或者小写字母 最后一位是数字 */ //方法： //在以后如果我们要在一堆没有什么规律的数据中随机抽取 //可以先把这些数据放到数组当中 //再随机抽取一个索引 //分析： //1.大写字母和小写字母都放到数组当中 char[] chs = new char[52]; for (int i = 0; i \u0026lt; chs.length; i++) { //ASCII码表 if(i \u0026lt;= 25){ //添加小写字母 chs[i] = (char)(97 + i); }else{//27 //添加大写字母 // A --- 65 chs[i] = (char)(65 + i - 26); } } //定义一个字符串类型的变量，用来记录最终的结果 String result = \u0026#34;\u0026#34;; //2.随机抽取4次 //随机抽取数组中的索引 Random r = new Random(); for (int i = 0; i \u0026lt; 4; i++) { int randomIndex = r.nextInt(chs.length); //利用随机索引，获取对应的元素 //System.out.println(chs[randomIndex]); result = result + chs[randomIndex]; } //System.out.println(result); //3.随机抽取一个数字0~9 int number = r.nextInt(10); //生成最终的结果 result = result + number; //打印最终结果 System.out.println(result); } } 练习四：复制数组 需求：\n​\t把一个数组中的元素复制到另一个新数组中去。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.itheima.test; public class Test4 { public static void main(String[] args) { /* 需求： 把一个数组中的元素复制到另一个新数组中去。*/ //分析： //1.定义一个老数组并存储一些元素 int[] arr = {1,2,3,4,5}; //2.定义一个新数组的长度跟老数组一致 int[] newArr = new int[arr.length]; //3.遍历老数组，得到老数组中的每一个元素，依次存入到新数组当中 for (int i = 0; i \u0026lt; arr.length; i++) { //i 表示老数组中的索引。新数组中的每一个索引 //arr[i] 表示老数组中的元素 newArr[i] = arr[i]; } //4.新数组中已经存满元素了 for (int i = 0; i \u0026lt; newArr.length; i++) { System.out.println(newArr[i]); } } } 练习五：评委打分 需求 :\n​\t在唱歌比赛中，有6名评委给选手打分，分数范围是[0 - 100]之间的整数。选手的最后得分为：去掉最高分、最低分后的4个评委的平均分，请完成上述过程并计算出选手的得分。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 package com.itheima.test; import java.util.Scanner; public class Test5 { public static void main(String[] args) { //在唱歌比赛中，有6名评委给选手打分，分数范围是[0 - 100]之间的整数。 // 选手的最后得分为：去掉最高分、最低分后的4个评委的平均分，请完成上述过程并计算出选手的得分。 //分析： //1.定义一个数组，用来存储6名评委的打分（0~100） int[] scoreArr = getScores(); for (int i = 0; i \u0026lt; scoreArr.length; i++) { System.out.println(scoreArr[i]); } //2.求出数组中的最大值 int max = getMax(scoreArr); //3.求出数组中的最小值 int min = getMin(scoreArr); //4.求出数组中6个分数的总和 int sum = getSum(scoreArr); //5.（总和 - 最大值 - 最小值 ）/4 int avg = (sum - max - min)/(scoreArr.length - 2); //6.打印结果 System.out.println(\u0026#34;选手的最终得分为：\u0026#34; + avg); } public static int getSum(int[] scoreArr){ int sum = 0; for (int i = 0; i \u0026lt; scoreArr.length; i++) { sum = sum + scoreArr[i]; } return sum; } //求数组的最大值 public static int getMax(int[] scoreArr){ int max = scoreArr[0]; for (int i = 1; i \u0026lt; scoreArr.length; i++) { if(scoreArr[i] \u0026gt; max){ max = scoreArr[i]; } } return max; } //求数组的最小值 public static int getMin(int[] scoreArr){ int min = scoreArr[0]; for (int i = 1; i \u0026lt; scoreArr.length; i++) { if(scoreArr[i] \u0026lt; min){ min = scoreArr[i]; } } return min; } //1.我要干嘛？定义一个数组，用来存储6名评委的打分（0~100） //2.我需要什么？都不需要 //3.干完了这件事情，是否需要返回？必须返回 public static int[] getScores(){ //定义数组 int[] scores = new int[6]; //使用键盘录入的形式，输入分数：0~100 Scanner sc = new Scanner(System.in); for (int i = 0; i \u0026lt; scores.length; ) { System.out.println(\u0026#34;请输入评委的打分\u0026#34;); int score = sc.nextInt();//100 if(score \u0026gt;=0 \u0026amp;\u0026amp; score\u0026lt;= 100){ scores[i] = score; i++; }else{ System.out.println(\u0026#34;成绩超出了范围,继续录入，当前的i为：\u0026#34; + i); } } return scores; } } 练习六：数字加密 需求：\n​\t某系统的数字密码（大于0），比如1983，采用加密方式进行传输。\n规则如下：\n​\t先得到每位数，然后每位数都加上5 , 再对10求余，最后将所有数字反转，得到一串新数。\n举例：\n1 2 3 4 5 1\t9\t8\t3 +5\t6 14 13 8 %10\t6 4 3 8 反转\t8 3 4 6 加密后的结果就是：8346 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package com.itheima.test; public class Test6 { public static void main(String[] args) { /* 某系统的数字密码（大于0）。比如1983，采用加密方式进行传输， 规则如下： 每位数加上5 再对10求余， 最后将所有数字反转， 得到一串新数。 */ //分析： //1.把整数里面的每一位放到数组当中 int[] arr = {1, 9, 8, 3}; //2.加密 //每位数加上5 for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = arr[i] + 5; } //再对10求余， for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = arr[i] % 10; } //将所有数字反转 for (int i = 0, j = arr.length - 1; i \u0026lt; j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //8 3 4 6 --\u0026gt; 8346 //3.把数组里面的每一个数字进行拼接，变成加密之后的结果 int number = 0; for (int i = 0; i \u0026lt; arr.length; i++) { number = number * 10 + arr[i]; } System.out.println(number); } } 练习六扩展： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package com.itheima.test; public class Test7 { public static void main(String[] args) { //需求： //把整数上的每一位都添加到数组当中 //反向推导 //1.计算出数组的长度 int number = 12345; //定义一个变量临时记录number的值，就是为了第三步的时候再次使用 int temp = number; //定义一个变量进行统计 int count = 0; while(number != 0){ //每一次循环就去掉右边的一个数字 number = number / 10; //去掉一位计数器就自增一次。 count++; } //2.定义数组 //动态初始化 int[] arr = new int[count]; //3.把整数上的每一位都添加到数组当中 int index = arr.length -1; while(temp != 0){//12345 //获取temp里面的每一位数组 int ge = temp % 10; //再去掉右边的那位数字 temp = temp / 10; //把当前获取到的个位添加到数组当中 arr[index] = ge; index--; } //验证结果 1 2 3 4 5 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } } } 练习七：数字解密 把上一题加密之后的数据进行解密\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package com.itheima.test; public class Test8 { public static void main(String[] args) { /*某系统的数字密码（大于0）。比如1983，采用加密方式进行传输， 规则如下： 每位数加上5 再对10求余， 最后将所有数字反转， 得到一串新数。 按照以上规则进行解密： 比如1983加密之后变成8346，解密之后变成1983 */ //1.定义数组记录解密之后的结果 int[] arr = {8, 3, 4, 6}; //2.反转 for (int i = 0, j = arr.length - 1; i \u0026lt; j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //3.由于加密是通过对10取余的方式进行获取的 //所以在解密的时候就需要判断，0~4之间+10 5~9数字不变 for (int i = 0; i \u0026lt; arr.length; i++) { if (arr[i] \u0026gt;= 0 \u0026amp;\u0026amp; arr[i] \u0026lt;= 4) { arr[i] = arr[i] + 10; } } //4.每一位减5 for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = arr[i] - 5; } //5.获取数组里面的每一位数字拼接成最终的结果 int number = 0; for (int i = 0; i \u0026lt; arr.length; i++) { number = number * 10 + arr[i]; } System.out.println(number); } } 练习八：抽奖 需求：\n​\t一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。打印效果如下：（随机顺序，不一定是下面的顺序）\n1 2 3 4 5 888元的奖金被抽出 588元的奖金被抽出 10000元的奖金被抽出 1000元的奖金被抽出 2元的奖金被抽出 解法一: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 package com.itheima.test; import java.util.Random; public class Test9 { public static void main(String[] args) { /* 需求： 一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。 请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。 打印效果如下：（随机顺序，不一定是下面的顺序） 888元的奖金被抽出 588元的奖金被抽出 10000元的奖金被抽出 1000元的奖金被抽出 2元的奖金被抽出 */ //分析： //1.定义数组表示奖池 int[] arr = {2, 588, 888, 1000, 10000}; //2.定义新数组用于存储抽奖的结果 int[] newArr = new int[arr.length]; //3.抽奖 Random r = new Random(); //因为有5个奖项，所以这里要循环5次 for (int i = 0; i \u0026lt; 5; ) { //获取随机索引 int randomIndex = r.nextInt(arr.length); //获取奖项 int prize = arr[randomIndex]; //判断当前的奖项是否存在，如果存在则重新抽取，如果不存在，就表示是有效奖项 boolean flag = contains(newArr, prize); if(!flag){ //把当前抽取到的奖项添加到newArr当中 newArr[i] = prize; //添加完毕之后，移动索引 i++; } } //4.遍历newArr for (int i = 0; i \u0026lt; newArr.length; i++) { System.out.println(newArr[i]); } } //判断prize在数组当中是否存在 //存在：true //不存在：false public static boolean contains(int[] arr,int prize){ for (int i = 0; i \u0026lt; arr.length; i++) { if(arr[i] == prize){ return true; } } return false; } } 解法二： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package com.itheima.test; import java.util.Random; public class Test10 { public static void main(String[] args) { /* 需求： 一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。 请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。 打印效果如下：（随机顺序，不一定是下面的顺序） 888元的奖金被抽出 588元的奖金被抽出 10000元的奖金被抽出 1000元的奖金被抽出 2元的奖金被抽出 */ //1.把奖池里面的所有奖项打乱顺序 int[] arr = {2, 588, 888, 1000, 10000}; Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { //获取随机索引 int randomIndex = r.nextInt(arr.length); //拿着i跟随机索引randomIndex上的值进行交换 int temp = arr[i]; arr[i] = arr[randomIndex]; arr[randomIndex] = temp; } //2.遍历奖池,从0索引开始获取每一个奖项 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.println(arr[i]); } } } 练习九：双色球 代码示例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 package com.itheima.test; import java.util.Random; import java.util.Scanner; public class Test11 { public static void main(String[] args) { //1.生成中奖号码 int[] arr = createNumber(); // 123456 7 System.out.println(\u0026#34;=======================\u0026#34;); for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } System.out.println(\u0026#34;=======================\u0026#34;); //2.用户输入彩票号码（红球 + 蓝球）//654321 int[] userInputArr = userInputNumber(); //3.判断用户的中奖情况 //红球 蓝球 int redCount = 0; int blueCount = 0; //判断红球 for (int i = 0; i \u0026lt; userInputArr.length - 1; i++) { int redNumber = userInputArr[i]; for (int j = 0; j \u0026lt; arr.length - 1; j++) { if(redNumber == arr[j]){ redCount++; //如果找到了，那么后面的数字就没有必要继续比较了 //跳出内循环，继续判断下一个红球号码是否中奖 break; } } } //判断蓝球 int blueNumber = userInputArr[userInputArr.length-1]; if(blueNumber == arr[arr.length - 1]){ blueCount++; } //根据红球的个数以及蓝球的个数来判断中奖情况 if(redCount == 6 \u0026amp;\u0026amp; blueCount == 1){ System.out.println(\u0026#34;恭喜你，中奖1000万\u0026#34;); }else if(redCount == 6 \u0026amp;\u0026amp; blueCount == 0){ System.out.println(\u0026#34;恭喜你，中奖500万\u0026#34;); }else if(redCount == 5 \u0026amp;\u0026amp; blueCount == 1){ System.out.println(\u0026#34;恭喜你，中奖3000\u0026#34;); }else if((redCount == 5 \u0026amp;\u0026amp; blueCount == 0) || (redCount == 4 \u0026amp;\u0026amp; blueCount == 1)){ System.out.println(\u0026#34;恭喜你，中奖200\u0026#34;); }else if((redCount == 4 \u0026amp;\u0026amp; blueCount == 0) || (redCount == 3 \u0026amp;\u0026amp; blueCount == 1)){ System.out.println(\u0026#34;恭喜你，中奖10\u0026#34;); }else if((redCount == 2 \u0026amp;\u0026amp; blueCount == 1) || (redCount == 1 \u0026amp;\u0026amp; blueCount == 1)|| (redCount == 0 \u0026amp;\u0026amp; blueCount == 1)){ System.out.println(\u0026#34;恭喜你，中奖5\u0026#34;); }else{ System.out.println(\u0026#34;谢谢参与，谢谢惠顾\u0026#34;); } } public static int[] userInputNumber() { //1.创建数组用于添加用户购买的彩票号码 //6个红球 1个蓝球 数组长度：7 int[] arr = new int[7]; //2.利用键盘录入让用输入 Scanner sc = new Scanner(System.in); //让用户输入红球号码 for (int i = 0; i \u0026lt; 6; ) { System.out.println(\u0026#34;请输入第\u0026#34; + (i + 1) + \u0026#34;个红球号码\u0026#34;); int redNumber = sc.nextInt(); //redNumber 在1~33 唯一不重复 if (redNumber \u0026gt;= 1 \u0026amp;\u0026amp; redNumber \u0026lt;= 33) { boolean flag = contains(arr, redNumber); if (!flag) { //不存在 //有效的，可以添加到数组当中 arr[i] = redNumber; i++; } else { //存在 System.out.println(\u0026#34;当前红球号码已经存在，请重新输入\u0026#34;); } } else { System.out.println(\u0026#34;当前红球号码超出范围\u0026#34;); } } //让用户输入篮球号码 System.out.println(\u0026#34;请输入篮球号码\u0026#34;); //1~16 while (true) { int blueNumber = sc.nextInt(); if (blueNumber \u0026gt;= 1 \u0026amp;\u0026amp; blueNumber \u0026lt;= 16) { arr[arr.length - 1] = blueNumber; break; } else { System.out.println(\u0026#34;当前篮球号码超出范围\u0026#34;); } } return arr; } public static int[] createNumber() { //1.创建数组用于添加中奖号码 //6个红球 1个蓝球 数组长度：7 int[] arr = new int[7]; //2.随机生成号码并添加到数组当中 //红球：不能重复的 1 2 3 4 5 6 //蓝球：可以跟红球号码重复 5 //生成红球号码并添加到数组当中 Random r = new Random(); for (int i = 0; i \u0026lt; 6; ) { //获取红球号码 int redNumber = r.nextInt(33) + 1; boolean flag = contains(arr, redNumber); if (!flag) { //把红球号码添加到数组当中 arr[i] = redNumber; i++; } } //生成蓝球号码并添加到数组当中 int blueNumber = r.nextInt(16) + 1; arr[arr.length - 1] = blueNumber; return arr; } //用于判断数组在数组中是否存在 public static boolean contains(int[] arr, int number) { for (int i = 0; i \u0026lt; arr.length; i++) { if (arr[i] == number) { return true; } } return false; } } ","date":"2024-10-12T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/p/day07-%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day07-%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/","title":"day07-综合练习"},{"content":" 1. 方法概述 1.1 方法的概念 ​\t方法（method）是程序中最小的执行单元\n注意： 方法必须先创建才可以使用，该过程成为方法定义 方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用 2. 方法的定义和调用 2.1 无参数方法定义和调用 定义格式：\n1 2 3 public static void 方法名 ( ) { // 方法体; } 范例：\n1 2 3 public static void method ( ) { // 方法体; } 调用格式：\n1 方法名(); 范例：\n1 method(); 注意：\n​\t方法必须先定义，后调用，否则程序将报错\n2.3 无参数方法的练习 需求：设计一个方法用于打印两个数中的较大数 思路： ①定义一个方法，用于打印两个数字中的较大数，例如getMax() ②方法中定义两个变量，用于保存两个数字 ③使用分支语句分两种情况对两个数字的大小关系进行处理 ④在main()方法中调用定义好的方法 代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法 getMax(); } //定义一个方法，用于打印两个数字中的较大数，例如getMax() public static void getMax() { //方法中定义两个变量，用于保存两个数字 int a = 10; int b = 20; //使用分支语句分两种情况对两个数字的大小关系进行处理 if(a \u0026gt; b) { System.out.println(a); } else { System.out.println(b); } } } 3. 带参数方法定义和调用 3.1 带参数方法定义和调用 定义格式：\n参数：由数据类型和变量名组成 - 数据类型 变量名\n参数范例：int a\n1 2 3 4 5 6 7 public static void 方法名 (参数1) { 方法体; } public static void 方法名 (参数1, 参数2, 参数3...) { 方法体; } 范例：\n1 2 3 4 5 6 public static void isEvenNumber(int number){ ... } public static void getMax(int num1, int num2){ ... } 注意：\n方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错 方法定义时，多个参数之间使用逗号( ，)分隔 调用格式：\n1 2 3 方法名(参数)； 方法名(参数1,参数2); 范例：\n1 2 3 isEvenNumber(10); getMax(10,20); 方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错 3.2 形参和实参 形参：方法定义中的参数 ​ 等同于变量定义格式，例如：int number\n实参：方法调用中的参数 ​ 等同于使用变量或常量，例如： 10 number\n3.3 带参数方法练习 需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数 } 思路： ①定义一个方法，用于打印两个数字中的较大数，例如getMax() ②为方法定义两个参数，用于接收两个数字 ③使用分支语句分两种情况对两个数字的大小关系进行处理 ④在main()方法中调用定义好的方法（使用常量） ⑤在main()方法中调用定义好的方法（使用变量） 代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法（使用常量） getMax(10,20); //调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的 //getMax(30); //getMax(10.0,20.0); //在main()方法中调用定义好的方法（使用变量） int a = 10; int b = 20; getMax(a, b); } //定义一个方法，用于打印两个数字中的较大数，例如getMax() //为方法定义两个参数，用于接收两个数字 public static void getMax(int a, int b) { //使用分支语句分两种情况对两个数字的大小关系进行处理 if(a \u0026gt; b) { System.out.println(a); } else { System.out.println(b); } } } 4. 带返回值方法的定义和调用 4.1 带返回值方法定义和调用 定义格式\n1 2 3 public static 数据类型 方法名 ( 参数 ) { return 数据 ; } 范例\n1 2 3 4 5 6 public static boolean isEvenNumber( int number ) { return true ; } public static int getMax( int a, int b ) { return 100 ; } 注意： 方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错 调用格式\n1 2 方法名 ( 参数 ) ; 数据类型 变量名 = 方法名 ( 参数 ) ; 范例\n1 2 isEvenNumber ( 5 ) ; boolean flag = isEvenNumber ( 5 ); 注意： 方法的返回值通常会使用变量接收，否则该返回值将无意义 4.2 带返回值方法练习1 需求：设计一个方法可以获取两个数的较大值，数据来自于参数\n思路：\n①定义一个方法，用于获取两个数字中的较大数 ②使用分支语句分两种情况对两个数字的大小关系进行处理 ③根据题设分别设置两种情况下对应的返回结果 ④在main()方法中调用定义好的方法并使用变量保存 ⑤在main()方法中调用定义好的方法并直接打印结果 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法并使用变量保存 int result = getMax(10,20); System.out.println(result); //在main()方法中调用定义好的方法并直接打印结果 System.out.println(getMax(10,20)); } //定义一个方法，用于获取两个数字中的较大数 public static int getMax(int a, int b) { //使用分支语句分两种情况对两个数字的大小关系进行处理 //根据题设分别设置两种情况下对应的返回结果 if(a \u0026gt; b) { return a; } else { return b; } } } 4.3 带返回值方法练习2 需求：\n​\t定义一个方法，求一家商场每个季度的营业额。根据方法结果再计算出全年营业额。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.itheima.demo; public class MethodDemo9 { public static void main(String[] args) { /*需求：定义一个方法，求一家商场每个季度的营业额。 根据方法结果再计算出全年营业额。*/ int sum1 = getSum(10, 20, 30); int sum2 = getSum(10, 20, 30); int sum3 = getSum(10, 20, 30); int sum4 = getSum(10, 20, 30); int sum = sum1 + sum2 + sum3 + sum4; System.out.println(sum); } //心得： //1.我要干嘛？ 决定了方法体 每个季度的营业额 //2.我干这件事情，需要什么才能完成？ 决定了形参 需要三个月的营业额 a b c //3.我干完这件事情，看调用处是否需要使用方法的结果。 决定了返回值 //如果需要使用，那么必须返回 //如果不需要使用，可以返回也可以不返回 public static int getSum(int month1,int month2,int month3){ int sum = month1 + month2 + month3; //因为方法的调用处，需要继续使用这个结果 //所以我们必须要把sum返回 return sum; } } 4.4 带返回值方法练习3 需求：\n​\t键盘录入两个圆的半径（整数），比较两个圆的面积。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import java.util.Scanner; public class MethodDemo10 { public static void main(String[] args) { //需求：键盘录入两个圆的半径（整数），比较两个圆的面积。 //键盘录入圆的半径 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入圆的半径\u0026#34;); int radii1 = sc.nextInt(); System.out.println(\u0026#34;请输入第二个圆的半径\u0026#34;); int radii2 = sc.nextInt(); double area1 = getArea(radii1); double area2 = getArea(radii2); if(area1 \u0026gt; area2){ System.out.println(\u0026#34;第一个圆更大\u0026#34;); }else{ System.out.println(\u0026#34;第二个圆更大\u0026#34;); } } //心得： //1.我要干嘛？ 求圆的面积 //2.我干这件事情，需要什么才能完成？ 半径 //3.方法的调用处，是否需要继续使用方法的结果 要比较 public static double getArea(int radii) { double area = 3.14 * radii * radii; return area; } } 5. 方法的注意事项 5.1 方法的注意事项 方法不能嵌套定义\n示例代码：\n1 2 3 4 5 6 7 8 9 10 11 public class MethodDemo { public static void main(String[] args) { } public static void methodOne() { public static void methodTwo() { // 这里会引发编译错误!!! } } } void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据\n示例代码：\n1 2 3 4 5 6 7 8 9 10 public class MethodDemo { public static void main(String[] args) { } public static void methodTwo() { //return 100; 编译错误，因为没有具体返回值类型 return;\t//System.out.println(100); return语句后面不能跟数据或代码 } } 5.2 方法的通用格式 格式：\n1 2 3 4 public static 返回值类型 方法名(参数) { 方法体; return 数据 ; } 解释：\npublic static 修饰符，目前先记住这个格式\n返回值类型\t方法操作完毕之后返回的数据的数据类型\n​\t如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return\n方法名\t调用方法时候使用的标识\n参数\t由数据类型和变量名组成，多个参数之间用逗号隔开\n方法体\t完成功能的代码块\nreturn\t如果方法操作完毕，有数据返回，用于把数据返回给调用者\n定义方法时，要做到两个明确\n明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型 明确参数：主要是明确参数的类型和数量 调用方法时的注意：\nvoid类型的方法，直接调用即可 非void类型的方法，推荐用变量接收调用 6. 方法重载 6.1 方法重载 方法重载概念\n方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载\n多个方法在同一个类中 多个方法具有相同的方法名 多个方法的参数不相同，类型不同或者数量不同 注意：\n重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式 重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载 正确范例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class MethodDemo { public static void fn(int a) { //方法体 } public static int fn(double a) { //方法体 } } public class MethodDemo { public static float fn(int a) { //方法体 } public static int fn(int a , int b) { //方法体 } } 错误范例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class MethodDemo { public static void fn(int a) { //方法体 } public static int fn(int a) { /*错误原因：重载与返回值无关*/ //方法体 } } public class MethodDemo01 { public static void fn(int a) { //方法体 } } public class MethodDemo02 { public static int fn(double a) { /*错误原因：这是两个类的两个fn方法*/ //方法体 } } 6.2 方法重载练习 需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long）\n思路：\n①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数 ②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数 ③定义所有的重载方法，两个byte类型与两个short类型参数 ④完成方法的调用，测试运行结果 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class MethodTest { public static void main(String[] args) { //调用方法 System.out.println(compare(10, 20)); System.out.println(compare((byte) 10, (byte) 20)); System.out.println(compare((short) 10, (short) 20)); System.out.println(compare(10L, 20L)); } //int public static boolean compare(int a, int b) { System.out.println(\u0026#34;int\u0026#34;); return a == b; } //byte public static boolean compare(byte a, byte b) { System.out.println(\u0026#34;byte\u0026#34;); return a == b; } //short public static boolean compare(short a, short b) { System.out.println(\u0026#34;short\u0026#34;); return a == b; } //long public static boolean compare(long a, long b) { System.out.println(\u0026#34;long\u0026#34;); return a == b; } } 7.3 数组遍历 需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]\n思路：\n①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);\nSystem.out.println(“内容”); 输出内容并换行\nSystem.out.print(“内容”); 输出内容不换行\nSystem.out.println(); 起到换行的作用\n②定义一个数组，用静态初始化完成数组元素初始化\n③定义一个方法，用数组遍历通用格式对数组进行遍历\n④用新的输出语句修改遍历操作\n⑤调用遍历方法\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Test1 { public static void main(String[] args) { /* //先打印数据，再进行换行 System.out.println(\u0026#34;aaa\u0026#34;); //只打印不换行 System.out.print(\u0026#34;bbb\u0026#34;); System.out.print(\u0026#34;ddd\u0026#34;); //不打印任何内容，只换行 System.out.println(); System.out.print(\u0026#34;cc\u0026#34;);*/ //设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] int[] arr = {1,2,3,4,5}; printArr(arr); } //1.我要遍历数组 //2.需要什么？ 数组 //3.调用处是否需要使用方法的结果。 public static void printArr(int[] arr){ System.out.print(\u0026#34;[\u0026#34;); for (int i = 0; i \u0026lt; arr.length; i++) { if(i == arr.length - 1){ System.out.println(arr[i] + \u0026#34;]\u0026#34;); }else{ System.out.print(arr[i] + \u0026#34;, \u0026#34;); } } } } 7.4 数组最大值 需求：设计一个方法用于获取数组中元素的最大值\n思路：\n①定义一个数组，用静态初始化完成数组元素初始化 ②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了 ③调用获取最大值方法，用变量接收返回结果 ④把结果输出在控制台 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class MethodTest02 { public static void main(String[] args) { //定义一个数组，用静态初始化完成数组元素初始化 int[] arr = {12, 45, 98, 73, 60}; //调用获取最大值方法，用变量接收返回结果 int number = getMax(arr); //把结果输出在控制台 System.out.println(\u0026#34;number:\u0026#34; + number); } //定义一个方法，用来获取数组中的最大值 /* 两个明确： 返回值类型：int 参数：int[] arr */ public static int getMax(int[] arr) { int max = arr[0]; for(int x=1; x\u0026lt;arr.length; x++) { if(arr[x] \u0026gt; max) { max = arr[x]; } } return max; } } 7.6 获取索引 需求：\n​\t定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处，如果有重复的，只要获取第一个即可。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package com.itheima.demo; public class Test4 { public static void main(String[] args) { //定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处 //如果有重复的，只要获取第一个即可 int[] arr = {1,2,3,4,5}; int index = contains(arr, 3); System.out.println(index); } //1. 我要干嘛？判断数组中的某一个数是否存在 //2. 需要什么？数组 数字 //3. 调用处是否需要继续使用？返回 //获取number在arr中的位置 public static int contains(int[] arr, int number) { //遍历arr得到每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //拿着每一个元素跟number比较 if(arr[i] == number){ //如果相等，表示找到了 return i; } } //当循环结束之后，如果还不能返回索引，表示数组中不存在该数据 //可以返回-1 return -1; } } ","date":"2024-10-11T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/p/day06-%E6%96%B9%E6%B3%95/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day06-%E6%96%B9%E6%B3%95/","title":"day06-方法"},{"content":" 1.数组 概念： ​\t指的是一种容器，可以同来存储同种数据类型的多个值。\n​\t但是数组容器在存储数据的时候，需要结合隐式转换考虑。\n比如：\n​\t定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，\n​\t但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。\n建议：\n​\t容器的类，和存储的数据类型保持一致。\n举例：\n​\t整数1 2 3 4 56 就可以使用int类型的数组来存储。\n​\t小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。\n​\t字符串\u0026quot;aaa\u0026quot; \u0026ldquo;bbb\u0026rdquo; \u0026ldquo;ccc\u0026rdquo; 就可以使用String类型的数组来存储。\n2.数组的定义 格式一： ​\t数据类型 [] 数组名\n比如：int [] array\n格式二： ​\t数据类型 数组名 []\n比如： int array []\n详解： 数据类型：限定了数组以后能存什么类型的数据。\n方括号：表示现在定义的是一个数组。\n数组名：就是一个名字而已，方便以后使用。\n注意点： ​\t方法括号跟数组名，谁写在前面，谁写在后面都是一样的。\n​\t平时习惯性使用第一种方式。\n3.数组的静态初始化 完整格式： ​\t数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4\u0026hellip;};\n比如：\n​\tint[] arr = new int[]{11,22,33};\n​\tdouble[] arr = new double[]{1.1,1.2,1.3};\n格式详解： ​\t数据类型：限定了数组以后能存什么类型的数据。\n​\t方括号：表示现在定义的是一个数组。\n​\t数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。\n​\tarr namesArr\n​\tnew：就是给数组在内存中开辟了一个空间。\n​\t数据类型：限定了数组以后能存什么类型的数据。\n​\t前面和后面的数据类型一定要保持一致。\n​\tint[] arr = new double[]{11,22,33};//错误写法\n​\t方括号：表示现在定义的是一个数组。\n​\t大括号：表示数组里面的元素。元素也就是存入到数组中的数据。\n​\t多个元素之间，一定要用逗号隔开。\n注意点： 等号前后的数据类型必须保持一致。 数组一旦创建之后，长度不能发生变化。 简化格式: ​\t数据类型[] 数组名 = {元素1，元素2，元素3，元素4\u0026hellip;};\n比如：\n​\tint[] array = {1,2,3,4,5};\n​\tdouble[] array = {1.1,1.2,1.3};\n练习1： 定义数组存储5个学生的年龄。\n1 2 3 4 1.给数组限定什么类型？ int 2.利用静态初始化完成创建并添加元素 int[] agesArr = new int[]{18,19,20,21,22}; int[] agesArr = {18,19,20,21,22}; 练习2： 定义数组存储3个学生的姓名。\n1 2 3 4 1.给数组限定什么类型？ String 2.利用静态初始化完成创建并添加元素 String[] namesArr = new String[]{\u0026#34;zhangsan\u0026#34;,\u0026#34;lisi\u0026#34;,\u0026#34;wangwu\u0026#34;}; String[] namesArr = {\u0026#34;zhangsan\u0026#34;,\u0026#34;lisi\u0026#34;,\u0026#34;wangwu\u0026#34;}; 练习3： 定义数组存储4个学生的身高。\n1 2 3 4 1.给数组限定什么类型？ double 2.利用静态初始化完成创建并添加元素 double[] heightsArr = new double[]{1.85,1.82,1.78,1.65}; double[] heightsArr = {1.85,1.82,1.78,1.65}; 4.地址值 1 2 3 4 5 int[] arr = {1,2,3,4,5}; System.out.println(arr);//[I@6d03e736 double[] arr2 = {1.1,2.2,3.3}; System.out.println(arr2);//[D@568db2f2 打印数组的时候，实际出现的是数组的地址值。\n数组的地址值：就表示数组在内存中的位置。\n以[I@6d03e736为例：\n[ ：表示现在打印的是一个数组。\nI：表示现在打印的数组是int类型的。\n@：仅仅是一个间隔符号而已。\n6d03e736：就是数组在内存中真正的地址值。（十六进制的）\n但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。\n地址值对于我们来京，作用不大，简单了解。\n5.数组元素访问 格式： ​\t数组名[索引];\n作用： 获取数组中对应索引上的值\n修改数组中对应索引上的值\n一旦修改之后，原来的值就会被覆盖了。\n代码示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class ArrDemo2 { /* 数组中元素访问的格式： 数组名[索引]; 作用： 1.获取指定索引上对应的元素 2.修改指定索引上对应的元素 */ public static void main(String[] args) { int[] arr = {1,2,3,4,5}; //需求1：获取arr数组中，3索引上的值 int number = arr[3]; System.out.println(number); System.out.println(arr[3]); //需求2：将arr数组中，3索引上的值修改为10 arr[3] = 10; System.out.println(\u0026#34;修改之后为:\u0026#34; + arr[3]); } } 6.索引 ​\t也叫角标、下标\n​\t就是数组容器中每一个小格子对应的编号。\n索引的特点： 索引一定是从0开始的。 连续不间断。 逐个+1增长。 7.数组的遍历 遍历：就是把数组里面所有的内容一个一个全部取出来。\n数组的长度：数组名.length;\n通用代码：\n1 2 3 4 for(int i = 0; i \u0026lt; arr.length; i++){ //在循环的过程中，i依次表示数组中的每一个索引 sout(arr[i]);//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。 } 8.数组的动态初始化 格式： ​\t数据类型[] 数组名 = new 数据类型[数组的长度];\n举例： 1 2 3 4 5 6 //1.定义一个数组，存3个人的年龄，年龄未知 int[] agesArr = new int[3]; //2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。 int[] scoresArr = new int[10]; 数组的默认初始化值： 整数类型：0\n小数类型：0.0\n布尔类型：false\n字符类型：\u0026rsquo;\\u0000'\n引用类型：null\n9.数组两种初始化方式的区别 静态初始化：int[] arr = {1,2,3,4,5};\n动态初始化：int[] arr = new int[3];\n静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。\n动态初始化：手动指定数组长度，由系统给出默认初始化值。\n使用场景： 只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。\n已经明确了要操作的所有数据，推荐使用静态初始化。\n举例： 使用数组来存储键盘录入的5个整数。\nint[] arr = new int[5];\n将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100\nint[] arr = new int[5];\narr[0] = 66;\narr[1] = 77;\n\u0026hellip; 虽然可以实现，但是太麻烦了。\n建议使用静态初始化：int[] arr = {66,77,88,99,100};\n10.数组常见问题 当访问了数组中不存在的索引，就会引发索引越界异常。\n避免：\n​\t针对于任意一个数组，索引的范围： 最小索引：0 最大索引：数组的长度 - 1 ​ 数组名.length - 1\n1 2 3 4 5 6 7 8 9 public class ArrDemo6 { public static void main(String[] args) { int[] arr = {1,2,3,4,5,5,5,5,5}; //用索引来访问数组中的元素 System.out.println(arr[1]); System.out.println(arr[10]);//ArrayIndexOutOfBoundsException } } 11.数组的练习 练习1：求和 需求：定义一个数组，存储1,2,3,4,5\n遍历数组得到每一个元素，求数组里面所有的数据和\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /*定义一个数组，存储1,2,3,4,5 遍历数组得到每一个元素，求数组里面所有的数据和*/ //分析： //1.定义一个数组，并添加数据1,2,3,4,5 int[] arr = {1,2,3,4,5}; //求和变量 int sum = 0; //2.遍历数组得到每一个数据，累加求和 for (int i = 0; i \u0026lt; arr.length; i++) { //i 依次表示数组里面的每一个索引 //arr[i] 依次表示数组里面的每一个元素 sum = sum + arr[i]; } //当循环结束之后，sum的值就是累加之后的结果 System.out.println(sum); 练习2：统计个数 需求：定义一个数组，存储1,2,3,4,5,6,7,8,9,10\n遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //分析： //1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10 int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //定义一个变量，用来统计次数 int count = 0; //2.遍历数组得到每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //i 表示数组里面的每一个索引 //arr[i] 表示数组里面的每一个元素 //3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。 if(arr[i] % 3 == 0){ // System.out.println(arr[i]); count++; } } //当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可 System.out.println(\u0026#34;数组中能被3整除的数字有\u0026#34; + count + \u0026#34;个\u0026#34;); 练习3：变化数据 需求：\n定义一个数组，存储1,2,3,4,5,6,7,8,9,10\n遍历数组得到每一个元素。\n要求：\n1，如果是奇数，则将当前数字扩大两倍\n2，如果是偶数，则将当前数字变成二分之一\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //分析： //1.定义一个数组，存1,2,3,4,5,6,7,8,9,10 int[] arr = {1,2,3,4,5,6,7,8,9,10}; //2.遍历数组得到每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //i 依次表示数组里面的每一个索引 //arr[i] 依次表示数组里面的每一个元素 //3.对每一个元素进行判断 if(arr[i] % 2 == 0){ //偶数 变成二分之一 arr[i] = arr[i] / 2; }else{ //奇数 扩大两倍 arr[i] = arr[i] * 2; } } //遍历数组 //一个循环尽量只做一件事情。 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.println(arr[i]); } 练习4：求最值 需求：求数组中的最大值\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //定义数组求最大值：33,5,22,44,55 //扩展问题： //1.根据求最大值的思路，自己改写一下求最小智 //2.为什么max要记录为arr[0],默认值不能为0吗？ //不能写0 //max的初始化值一定要是数组中的值。 //3.循环中开始条件一定是0吗？ //循环的开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低 //为了提高效率，减少一次循环的次数，循环开始条件可以写1. //1.定义数组用来存储5个值 int[] arr = {33,5,22,44,55}; //2.定义一个变量max用来存储最大值 //临时认为0索引的数据是最大的 int max = arr[0]; //3.循环获取数组中的每一个元素 //拿着每一个元素跟max进行比较 for (int i = 1; i \u0026lt; arr.length; i++) { //i 索引 arr[i] 元素 if(arr[i] \u0026gt; max){ max = arr[i]; } } //4.当循环结束之后，max记录的就是数组中的最大值 System.out.println(max);//55 练习5：统计个数 需求：生成10个1~100之间的随机数存入数组。\n1）求出所有数据的和\n2）求所有数据的平均数\n3）统计有多少个数据比平均值小\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 //分析： //1.定义数组 int[] arr = new int[10]; //2.把随机数存入到数组当中 Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { //每循环一次，就会生成一个新的随机数 int number = r.nextInt(100) + 1; //把生成的随机数添加的数组当中 //数组名[索引] = 数据; arr[i] = number; } // 1）求出所有数据的和 //定义求和变量 int sum = 0; for (int i = 0; i \u0026lt; arr.length; i++) { //循环得到每一个元素 //并把元素累加到sum当中 sum = sum + arr[i]; } System.out.println(\u0026#34;数组中所有数据的和为：\u0026#34; + sum); //2）求所有数据的平均数 int avg = sum / arr.length; System.out.println(\u0026#34;数组中平均数为：\u0026#34; + avg); //3）统计有多少个数据比平均值小 int count = 0; for (int i = 0; i \u0026lt; arr.length; i++) { if(arr[i] \u0026lt; avg){ count++; } } //当循环结束之后，就表示我已经找到了所有的比平均数小的数据 System.out.println(\u0026#34;在数组中，一共有\u0026#34; + count + \u0026#34;个数据，比平均数小\u0026#34;); //遍历数组，验证答案 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } 练习6：交换数据 需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。\n交换前：1,2,3,4,5\n交换后：5,2,3,4,1\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 //1.定义数组存储数据 int[] arr = {1,2,3,4,5}; //2.利用循环去交换数据 for(int i = 0,j = arr.length - 1; i \u0026lt; j; i++,j--){ //交换变量i和变量j指向的元素 int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //当循环结束之后，那么数组中的数据就实现了头尾交换 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } 练习7：打乱数据 需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //1.定义数组存储1~5 int[] arr = {1, 2, 3, 4, 5}; //2.循环遍历数组，从0索引开始打乱数据的顺序 Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { //生成一个随机索引 int randomIndex = r.nextInt(arr.length); //拿着随机索引指向的元素 跟 i 指向的元素进行交换 int temp = arr[i]; arr[i] = arr[randomIndex]; arr[randomIndex] = temp; } //当循环结束之后，那么数组中所有的数据已经打乱顺序了 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } 循环高级 1.无限循环 概念： ​\t又叫死循环。循环一直停不下来。\nfor格式： 1 2 3 for(;;){ System.out.println(\u0026#34;循环执行一直在打印内容\u0026#34;); } 解释：\n初始化语句可以空着不写，表示循环之前不定义任何的控制变量。\n条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。\n条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。\nwhile格式： 1 2 3 while(true){ System.out.println(\u0026#34;循环执行一直在打印内容\u0026#34;); } 解释：\n​\t小括号里面就不能省略了，true一定要写出来，否则代码会报错。\ndo\u0026hellip;while格式： 1 2 3 do{ System.out.println(\u0026#34;循环执行一直在打印内容\u0026#34;); }while(true); 解释：\n​\t小括号里面就不能省略了，true一定要写出来，否则代码会报错。\n无限循环的注意事项： 最为常用的格式：while 无限循环下面不能再写其他代码了，因为永远执行不到。 2.条件控制语句 break continue break: ​\t不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。\n代码示例：\n1 2 3 4 5 6 7 8 //1.吃1~5号包子 for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(\u0026#34;在吃第\u0026#34; + i + \u0026#34;个包子\u0026#34;); //2.吃完第三个的时候就不吃了 if(i == 3){ break;//结束整个循环。 } } continue: ​\t不能单独存在的。只能存在于循环当中。\n​\t表示：跳过本次循环，继续执行下次循环。\n代码示例：\n1 2 3 4 5 6 7 8 9 //1.吃1~5号包子 for (int i = 1; i \u0026lt;= 5; i++) { //2.第3个包子有虫子就跳过，继续吃下面的包子 if(i == 3){ //跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。 continue; } System.out.println(\u0026#34;在吃第\u0026#34; + i + \u0026#34;个包子\u0026#34;); } 3. Random Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。\n使用步骤： 导包 1 2 import java.util.Random; 导包的动作必须出现在类定义的上边。 创建对象 1 2 Random r = new Random (); 上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。 生成随机数 1 2 3 int number = r.nextInt(随机数的范围); 上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。 随机数范围的特点：从0开始，不包含指定值。比如：参数为10，生成的范围[0,10) 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 //1.导包 import java.util.Random; public class RandomDemo1 { public static void main(String[] args) { //2.创建对象 Random r = new Random(); //3.生成随机数 int number = r.nextInt(100);//包左不包右，包头不包尾 //0 ~ 99 System.out.println(number); } } 4. 逢七过 需求：\n​\t朋友聚会的时候可能会玩一个游戏：逢7过\n​\t游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过\n​\t使用程序在控制台打印出1-100之间的满足逢七必过规则的数据\n举例：\n​\t1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 \u0026hellip;\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /*朋友聚会的时候可能会玩一个游戏：逢7过 游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过 需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/ //分析： //个位7 十位7 7倍数 //1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过.... //69 过 过 过 过 过 过... 80 //1.得到1~100之间的每一个数字 //开始：1 //结束：100 for (int i = 1; i \u0026lt;= 100; i++) { //2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字 if(i % 10 == 7 || i / 10 % 10 == 7 || i % 7 == 0){ System.out.println(\u0026#34;过\u0026#34;); continue; } System.out.println(i); } 5. 平方根 需求：\n​\t键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去 。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /*需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。 结果只保留整数部分 ，小数部分将被舍去 。*/ //分析： //平方根 16的平方根4 // 4的平方根2 // 10 // 1 * 1 = 1 \u0026lt; 10 // 2 * 2 = 4 \u0026lt; 10 // 3 * 3 = 9 \u0026lt; 10 // 4 * 4 = 16 \u0026gt; 10 //推断：10的平方根是在3~4之间。 // 20 // 1 * 1 = 1 \u0026lt; 20 // 2 * 2 = 4 \u0026lt; 20 // 3 * 3 = 9 \u0026lt; 20 // 4 * 4 = 16 \u0026lt; 20 // 5 * 5 = 25 \u0026gt; 20 //推断：20的平方根是在4~5之间。 //在代码当中 //从1开始循环，拿着数字的平方跟原来的数字进行比较 //如果小于的，那么继续往后判断 //如果相等，那么当前数字就是平方根 //如果大于的，那么前一个数字就是平方跟的整数部分 //1.键盘录入一个整数 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个整数\u0026#34;); int number = sc.nextInt(); //2.从1开始循环判断 //开始：1 结束: number for (int i = 1; i \u0026lt;= number; i++) { //用i * i 再跟number进行比较 if(i * i == number){ System.out.println(i + \u0026#34;就是\u0026#34; + number + \u0026#34;的平方根\u0026#34;); //一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。 break; }else if(i * i \u0026gt; number){ System.out.println((i - 1) + \u0026#34;就是\u0026#34; + number + \u0026#34;平方根的整数部分\u0026#34;); break; } } 6.判断是否为质数 需求：\n​\t键盘录入一个正整数 x ，判断该整数是否为一个质数。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 //需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。 //质数： //如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数 //7 = 1 * 7 质数 //8 = 1 * 8 2 * 4 合数 //分析： //1.键盘录入一个正整数 //number Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个正整数\u0026#34;); int number = sc.nextInt();//9 //定义一个变量，表示标记 //标记着number是否为一个质数 //true： 是一个质数 //false : 不是一个质数 //表示最初就认为number是一个质数 boolean flag = true; //2.判断 //写一个循环，从2开始判断，一直判断到number-1为止 //看这个范围之内，有没有数字可以被number整除 for (int i = 2; i \u0026lt; number; i++) { //i 依次表示这个范围之内的每一个数字 //看number是否能被i整除就可以了 if(number % i == 0){// 9 % 2 = 1 flag = false; //System.out.println(number + \u0026#34;不是一个质数\u0026#34;); break; }/*else{ System.out.println(number + \u0026#34;是一个质数\u0026#34;); }*/ } //只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了 //此时才能断定number是一个质数 if(flag){ System.out.println(number + \u0026#34;是一个质数\u0026#34;); }else{ System.out.println(number + \u0026#34;不是一个质数\u0026#34;); } 7. 猜数字小游戏 需求：\n​\t程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？\n要求：\n​\t使用循环猜，一直猜中为止。\n思路分析：\n生成一个1-100之间的随机数 使用键盘录入去猜出这个数字是多少 把反复猜的代码写在循环中 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //1.生成一个1-100之间的随机数 Random r = new Random(); int number = r.nextInt(100) + 1;// 0 ~ 99 + 1 --- 1 ~ 100 System.out.println(number); //2.使用键盘录入去猜出这个数字是多少？ Scanner sc = new Scanner(System.in); while(true){ System.out.println(\u0026#34;请输入一个整数\u0026#34;); int guessNumber = sc.nextInt(); //3.比较 if(guessNumber \u0026gt; number){ System.out.println(\u0026#34;您猜的数字大了\u0026#34;); }else if(guessNumber \u0026lt; number){ System.out.println(\u0026#34;您猜的数字小了\u0026#34;); }else{ System.out.println(\u0026#34;恭喜你，猜中了\u0026#34;); break; } } ","date":"2024-10-10T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/p/day05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/","title":"day05-循环高级和数组"},{"content":" 第一章 流程控制语句 在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。\n1.1 流程控制语句分类 ​\t顺序结构\n​\t判断和选择结构(if, switch)\n​\t循环结构(for, while, do…while)\n1.2 顺序结构 顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。\n顺序结构执行流程图：\n第二章 判断语句：if语句 2.1 if语句格式1 1 2 3 4 格式： if (关系表达式) { 语句体;\t} 执行流程：\n①首先计算关系表达式的值\n②如果关系表达式的值为true就执行语句体\n③如果关系表达式的值为false就不执行语句体\n④继续执行后面的语句内容\n示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class IfDemo { public static void main(String[] args) { System.out.println(\u0026#34;开始\u0026#34;);\t//定义两个变量 int a = 10; int b = 20;\t//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b if(a == b) { System.out.println(\u0026#34;a等于b\u0026#34;); }\t//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c int c = 10; if(a == c) { System.out.println(\u0026#34;a等于c\u0026#34;); }\tSystem.out.println(\u0026#34;结束\u0026#34;); } } 练习1：老丈人选女婿 需求：\n​\t键盘录入女婿的酒量，如果大于2斤，老丈人给出回应，否则没有任何回应\n代码示例：\n1 2 3 4 5 6 7 8 9 //分析： //1.键盘录入女婿的酒量 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入女婿的酒量\u0026#34;); int wine = sc.nextInt();//5 //2.对酒量进行一个判断即可 if(wine \u0026gt; 2) { System.out.println(\u0026#34;不错哟，小伙子！\u0026#34;); } 练习2：考试奖励 需求：\n​\t键盘录入一个整数，表示小明的考试名次，如果名次为1，小红可以当小明的女朋有了。\n代码示例：\n1 2 3 4 5 6 7 8 9 //分析： //1.键盘录入一个整数，表示小明的考试名次 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入小明的名次\u0026#34;); int rank = sc.nextInt(); //2.对小明的考试成绩进行判断即可 if(rank == 1){ System.out.println(\u0026#34;小红成为了小明的女朋友\u0026#34;); } 第一种格式的细节： 如果我们要对一个布尔类型的变量进行判断，不要写==，直接把变量写在小括号中即可。\n如果大括号中的语句体只有一条，那么大括号可以省略不写\n如果大括号省略了，那么if只能控制距离他最近的那一条语句。\n**建议：**自己不要去写，如果别人这么写了，你要能看懂即可。\n2.2 if语句格式2 1 2 3 4 5 6 格式： if (关系表达式) { 语句体1;\t} else { 语句体2;\t} 执行流程：\n①首先计算关系表达式的值\n②如果关系表达式的值为true就执行语句体1\n③如果关系表达式的值为false就执行语句体2\n④继续执行后面的语句内容\n示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class IfDemo02 { public static void main(String[] args) { System.out.println(\u0026#34;开始\u0026#34;);\t//定义两个变量 int a = 10; int b = 20; //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b if(a \u0026gt; b) { System.out.println(\u0026#34;a的值大于b\u0026#34;); } else { System.out.println(\u0026#34;a的值不大于b\u0026#34;); }\tSystem.out.println(\u0026#34;结束\u0026#34;); } } 练习1：吃饭 需求：\n​\t键盘录入一个整数，表示身上的钱。\n​ 如果大于等于100块，就是网红餐厅。\n​ 否则，就吃经济实惠的沙县小吃。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 //分析： //1.键盘录入一个整数。表示身上的钱。 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个整数表示身上的钱\u0026#34;); int money = sc.nextInt(); //2.对钱进行判断 if(money \u0026gt;= 100){ System.out.println(\u0026#34;吃网红餐厅\u0026#34;); }else{ System.out.println(\u0026#34;福建大酒店\u0026#34;); } 练习2：影院选座 需求：\n​\t在实际开发中，电影院选座也会使用到if判断。\n​\t假设某影院售卖了100张票，票的序号为1~100。\n​\t其中奇数票号坐左侧，偶数票号坐右侧。\n​\t键盘录入一个整数表示电影票的票号。\n​\t根据不同情况，给出不同的提示：\n​\t如果票号为奇数，那么打印坐左边。\n​\t如果票号为偶数，那么打印坐右边。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //分析： //1.键盘录入票号 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入票号\u0026#34;); int ticket = sc.nextInt(); if(ticket \u0026gt;= 1 \u0026amp;\u0026amp; ticket \u0026lt;= 100){ //合法 //2.对票号进行判断 if (ticket % 2 == 0) { //偶数 System.out.println(\u0026#34;坐右边\u0026#34;); } else { //奇数 System.out.println(\u0026#34;坐左边\u0026#34;); } }else{ //票号不合法 System.out.println(\u0026#34;票号不合法\u0026#34;); } 2.3 if语句格式3 1 2 3 4 5 6 7 8 9 10 格式： if (关系表达式1) { 语句体1;\t} else if (关系表达式2) { 语句体2;\t} … else { 语句体n+1; } 执行流程：\n①首先计算关系表达式1的值\n②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值\n③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值\n④…\n⑤如果没有任何关系表达式为true，就执行语句体n+1。\n练习1：考试奖励 需求：\n​\t小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，\n假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。\n分析：\n​\t①小明的考试成绩未知，可以使用键盘录入的方式获取值\n​\t②由于奖励种类较多，属于多种判断，采用if\u0026hellip;else\u0026hellip;if格式实现\n​\t③为每种判断设置对应的条件\n​\t④为每种判断设置对应的奖励\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //95~100 自行车一辆 //90~94 游乐场玩一天 //80 ~ 89 变形金刚一个 //80 以下 胖揍一顿 //1.键盘录入一个值表示小明的分数 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入小明的成绩\u0026#34;); int score = sc.nextInt(); //2.对分数的有效性进行判断 if(score \u0026gt;= 0 \u0026amp;\u0026amp; score \u0026lt;= 100){ //有效的分数 //3.对小明的分数进行判断，不同情况执行不同的代码 if(score \u0026gt;= 95 \u0026amp;\u0026amp; score \u0026lt;= 100){ System.out.println(\u0026#34;送自行车一辆\u0026#34;); }else if(score \u0026gt;= 90 \u0026amp;\u0026amp; score \u0026lt;= 94){ System.out.println(\u0026#34;游乐场玩一天\u0026#34;); }else if(score \u0026gt;= 80 \u0026amp;\u0026amp; score \u0026lt;= 89){ System.out.println(\u0026#34;变形金刚一个\u0026#34;); }else{ System.out.println(\u0026#34;胖揍一顿\u0026#34;); } }else{ //无效的分数 System.out.println(\u0026#34;分数不合法\u0026#34;); } 第三章 switch语句 3.1 格式 1 2 3 4 5 6 7 8 9 10 11 12 switch (表达式) { case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break; } 3.2 执行流程： 首先计算出表达式的值 其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 练习：运动计划 需求：键盘录入星期数，显示今天的减肥活动。\n周一：跑步\n周二：游泳\n周三：慢走\n周四：动感单车\n周五：拳击\n周六：爬山\n周日：好好吃一顿\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package a01switch选择语句; import java.util.Scanner; public class SwitchDemo2 { public static void main(String[] args) { //1.键盘录入一个整数表示星期 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个整数表示星期\u0026#34;); int week = sc.nextInt(); //2.书写一个switch语句去跟week进行匹配 switch (week){ case 1: System.out.println(\u0026#34;跑步\u0026#34;); break; case 2: System.out.println(\u0026#34;游泳\u0026#34;); break; case 3: System.out.println(\u0026#34;慢走\u0026#34;); break; case 4: System.out.println(\u0026#34;动感单车\u0026#34;); break; case 5: System.out.println(\u0026#34;拳击\u0026#34;); break; case 6: System.out.println(\u0026#34;爬山\u0026#34;); break; case 7: System.out.println(\u0026#34;好好吃一顿\u0026#34;); break; default: System.out.println(\u0026#34;输入错误，没有这个星期\u0026#34;); break; } } } 3.3 switch的扩展知识： default的位置和省略情况\ndefault可以放在任意位置，也可以省略\ncase穿透\n不写break会引发case穿透现象\nswitch在JDK12的新特性\n1 2 3 4 5 6 7 int number = 10; switch (number) { case 1 -\u0026gt; System.out.println(\u0026#34;一\u0026#34;); case 2 -\u0026gt; System.out.println(\u0026#34;二\u0026#34;); case 3 -\u0026gt; System.out.println(\u0026#34;三\u0026#34;); default -\u0026gt; System.out.println(\u0026#34;其他\u0026#34;); } switch和if第三种格式各自的使用场景 当我们需要对一个范围进行判断的时候，用if的第三种格式\n当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句\n比如：\n​\t小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。\n​\t如果是星期，月份，客服电话中0~9的功能选择就可以用switch\n练习：休息日和工作日 需求：键盘录入星期数，输出工作日、休息日。\n(1-5) 工作日，(6-7)休息日。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 //分析： //1.键盘录入星期数 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入星期\u0026#34;); int week = sc.nextInt();//3 //2.利用switch进行匹配 ---------------------------------------------------- 利用case穿透简化代码 switch (week){ case 1: case 2: case 3: case 4: case 5: System.out.println(\u0026#34;工作日\u0026#34;); break; case 6: case 7: System.out.println(\u0026#34;休息日\u0026#34;); break; default: System.out.println(\u0026#34;没有这个星期\u0026#34;); break; } ---------------------------------------------------- 利用JDK12简化代码书写 switch (week) { case 1, 2, 3, 4, 5 -\u0026gt; System.out.println(\u0026#34;工作日\u0026#34;); case 6, 7 -\u0026gt; System.out.println(\u0026#34;休息日\u0026#34;); default -\u0026gt; System.out.println(\u0026#34;没有这个星期\u0026#34;); } 第四章 循环结构 4.1 for循环结构（掌握） ​\t循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。\n4.1.1 for循环格式： 1 2 3 for (初始化语句;条件判断语句;条件控制语句) { 循环体语句; } 格式解释：\n初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去 循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去 执行流程：\n①执行初始化语句\n②执行条件判断语句，看其结果是true还是false\n​ 如果是false，循环结束\n​ 如果是true，继续执行\n③执行循环体语句\n④执行条件控制语句\n⑤回到②继续\nfor循环书写技巧：\n确定循环的开始条件 确定循环的结束条件 确定循环要重复执行的代码 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 //1.确定循环的开始条件 //2.确定循环的结束条件 //3.确定要重复执行的代码 //需求：打印5次HelloWorld //开始条件：1 //结束条件：5 //重复代码：打印语句 for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(\u0026#34;HelloWorld\u0026#34;); } for循环练习-输出数据 需求：在控制台输出1-5和5-1的数据 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 public class ForTest01 { public static void main(String[] args) { //需求：输出数据1-5 for(int i=1; i\u0026lt;=5; i++) { System.out.println(i); } System.out.println(\u0026#34;--------\u0026#34;); //需求：输出数据5-1 for(int i=5; i\u0026gt;=1; i--) { System.out.println(i); } } } for循环练习-求和 需求：求1-5之间的数据和，并把求和结果在控制台输出 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class ForTest02 { public static void main(String[] args) { //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i\u0026lt;=5; i++) { //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum = sum + i; /* sum += i;\tsum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ } //当循环执行完毕时，将最终数据打印出来 System.out.println(\u0026#34;1-5之间的数据和是：\u0026#34; + sum); } } 本题要点： 今后遇到的需求中，如果带有求和二字，请立即联想到求和变量 求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 for循环练习-求偶数和 需求：求1-100之间的偶数和，并把求和结果在控制台输出 } 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class ForTest03 { public static void main(String[] args) { //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i\u0026lt;=100; i++) { //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) { //sum += i； sum = sum + i; } } //当循环执行完毕时，将最终数据打印出来 System.out.println(\u0026#34;1-100之间的偶数和是：\u0026#34; + sum); } } for循环练习-统计次数 需求：\n​\t键盘录入两个数字，表示一个范围。\n​ 统计这个范围中。\n​ 既能被3整除，又能被5整除数字有多少个？\n代码示例：\n4.2 while循环 4.2.1 格式： 1 2 3 4 5 初始化语句; while(条件判断语句){ 循环体; 条件控制语句; } 练习1：打印5次HelloWorld 1 2 3 4 5 6 int i = 1; while(i \u0026lt;= 5){ System.out.println(\u0026#34;HelloWorld\u0026#34;); i++; } System.out.println(i); 练习2：珠穆朗玛峰 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //1.定义一个变量表示珠穆朗玛峰的高度 int height = 8844430; //2.定义一个变量表示纸张的厚度 double paper = 0.1; //定义一个计数器（变量），用来统计折叠的次数 int count = 0; //3.循环折叠纸张 //只有纸张的厚度 \u0026lt; 穆朗玛峰的高度 循环才继续，否则循环就停止 //坑：只有判断为真，循环才会继续 while(paper \u0026lt; height){ //折叠纸张 paper = paper * 2; count++; } //4.打印一下纸张的厚度 System.out.println(count);//27 4.3 do\u0026hellip;while循环 本知识点了解即可\n格式：\n1 2 3 4 5 初始化语句; do{ 循环体; 条件控制语句; }while(条件判断语句); 特点：\n​\t先执行，再判断。\n4.4 三种格式的区别： ​\tfor和while循环，是先判断，再执行。\n​\tdo\u0026hellip;while是先执行，再判断。\n​\t当知道循环次数或者循环范围的时候，用for循环。\n​\t当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。\n","date":"2024-10-09T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/p/day04-%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day04-%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/","title":"day04-判断和循环"},{"content":" 1.运算符和表达式 运算符： ​\t就是对常量或者变量进行操作的符号。\n​\t比如： + - * /\n表达式： ​\t用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。\n​\t比如：a + b 这个整体就是表达式。\n​\t而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。\n2.算术运算符 分类：\n1 + - * / % 运算特点：\n1 + - * :跟小学数学中一模一样没有任何区别. 1 2 3 4 5 6 /： 1.整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。 2.小数直接参与运算，得到的结果有可能是不精确的。 案例： System.out.println( 10 / 3);//3 System.out.println(10.0 / 3);//3.3333333333333335 1 2 3 4 5 6 7 8 %：取模、取余。 他做的也是除法运算，只不过获取的是余数而已。 案例： System.out.println(10 % 2);//0 System.out.println(10 % 3);//1 应用场景： //可以利用取模来判断一个数是奇数还是偶数 System.out.println(15 % 2);//1 奇数 练习：数值拆分 需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //1.键盘录入一个三位数 //导包 --- 创建对象 --- 接收数据 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个三位数\u0026#34;); int number = sc.nextInt();//123 //2.获取这个三位数的个位、十位、百位并打印出来 //公式： //针对于任意的一个数而言 //个位： 数字 % 10 int ones = number % 10; //十位： 数字 / 10 % 10 int tens = number / 10 % 10; //百位： 数字 / 100 % 10 int hundreds = number / 100 % 10; //输出结果 System.out.println(ones); System.out.println(tens); System.out.println(hundreds); 公式：\n​\t获取任意一个数上每一位数。\n个位：数字 % 10\n十位：数字 / 10 % 10\n百位：数字 / 100 % 10\n千位：数字 / 1000 % 10\n。。。以此类推。。。\n3.隐式转换 概念： ​\t也叫自动类型提升。\n​\t就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。\n简单记忆： ​\t就是小的给大的，可以直接给。\n两种提升规则： 取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。 byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。 取值范围从小到大的关系： ​\tbyte short int long float double\n4.隐式转换的练习 请看下面案例是否有误，如果有问题，请说出原因，如果没有问题，请说出运算过程和运算结果\n案例一： 1 2 double d = 10; System.out.println(d);//10.0 解释：\n​\t10是整数，整数默认是int类型的。\n​\t而在取值范围的顺序中：byte short int long float double\n​\t在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。\n案例二： 1 2 byte b = 100; int i = b;//可以成功赋值 解释：\n​\t因为byte的取值范围是小的，int的取值范围是大的，在底层进行了隐式转换，不需要我们额外写代码单独实现，是可以直接赋值。\n案例三： 1 2 3 4 int i = 10; long n = 20L; ??? result = i + n; 问变量result是什么类型的？ 解释：\n​\t变量i是int类型的，变量n是long类型的。\n​\t而在取值范围的顺序中：byte short int long float double\n​\t变量i里面的值会自动提升为long类型的，最终的结果其实就是两个long相加，那么最终的result是long类型的。\n案例四： 1 2 3 4 5 int i = 10; long n = 100L; double d = 20.0; ??? result = i + n + d; 问变量result是什么类型的？ 解释：\n​\t变量i是int类型，变量n是long类型，变量d是double类型。\n​\t而在取值范围的顺序中：byte short int long float double\n​\t所以变量i和变量n里面的值在参与运算的时候，都会进行类型提升，变成double。\n​\t最终其实就是三个double进行相加，那么最终的结果就是double类型的。\n案例五： 1 2 3 4 byte b1 = 10; byte b2 = 20; ??? result = b1 + b2;//int 问变量result是什么类型的？ 解释：\n​\t因为b1和b2都是byte类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。\n案例六： 1 2 3 4 5 byte b = 10; short s = 20; long n = 100L; ??? result = b + s + n; 问变量result是什么类型的？long 解释：\n​\t变量b是byte类型的，变量s是short类型的，变量n是long类型的。\n​\tbyte，short，char类型的变量在参与运算的时候，变量里面的值会直接先提升为int。\n第一步：变量b和变量s里面的值会先提升为int参与运算。\n​\tint + int + long\n第二步：而long类型的取值范围是大于int的取值范围的。\n​\t所以变量b和变量s里面的值会再次提升为long。\n​\tlong + long + long。\n所以最终结果是long类型的。\n5.强制转换 概念： ​\t如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。\n​\t如果一定要这么干，就需要加入强制转换。\n书写格式： ​\t目标数据类型 变量名 = （目标数据类型）被强转的数据；\n简单理解：\n​\t要转成什么类型的，那么就在小括号中写什么类型就可以了。\n案例：\n1 2 3 4 5 6 7 public class OperatorDemo2 { public static void main(String[] args) { double a = 12.3; int b = (int) a; System.out.println(b);//12 } } 注意点：\n​\t强制转换有可能会导致数据发生错误。（数据的精度丢失）\n6.字符串的+操作 核心技巧： 当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。 当连续进行+操作时，从左到右逐个执行的。 7.字符串相加的练习： 案例1：\n1 1 + \u0026#34;abc\u0026#34; + 1 结果：\u0026ldquo;1abc1\u0026rdquo;\n解释：\n​\t第一步： 1 + \u0026ldquo;abc\u0026rdquo;。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\u0026quot;1abc\u0026quot;\n​\t第二步： \u0026ldquo;1abc\u0026rdquo; + 1。这个过程中，有字符串参与的，所以做的也是拼接操作，产生一个新的字符串\u0026quot;1abc1\u0026quot;\n案例2：\n1 1 + 2 + \u0026#34;abc\u0026#34; + 2 + 1 结果：“3abc21”\n解释：\n​\t第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。\n​\t第二步：3 + \u0026ldquo;abc\u0026rdquo;。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\u0026quot;3abc\u0026quot;。\n​\t第三步：\u0026ldquo;3abc\u0026rdquo; + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\u0026quot;3abc2\u0026quot;。\n​\t第四步：\u0026ldquo;3abc2\u0026rdquo; + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”\n案例3：\n1 2 String name = \u0026#34;黑默丁格\u0026#34;; System.out.println(\u0026#34;我的名字是\u0026#34; + name); 结果： 我的名字是黑默丁格\n解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。\n8.字符的+操作 规则： ​\t当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。\n案例： 1 2 3 char c = \u0026#39;a\u0026#39;; int result = c + 0; System.out.println(result);//97 ASCII码表中：\n​\t\u0026lsquo;a\u0026rsquo; \u0026mdash;\u0026ndash; 97\n​\t\u0026lsquo;A\u0026rsquo; \u0026mdash;\u0026ndash; 65\n9.算术运算符的总结 分类：\n1 + - * / % 这些操作跟小学数学几乎是一模一样的。 注意点：\n/ 和 % 的区别：他们两个都是做除法运算，/取结果的商。% 取结果的余数。 整数操作只能得到整数，如果想要得到小数，必须有浮点数参与运算。 算术运算符的高级用法：\n是以+为例进行的讲解，其余减法，乘法，除法的运算规则也是一样的。\n特例：字符串只有+操作，没有其他操作。\n10.自增自减运算符 分类： 1 2 ++ 自增运算符 -- 自减运算符 ++：就是把变量里面的值+1\n\u0026ndash;：就是把变量里面的值-1\n使用方式： 放在变量的前面，我们叫做先++。 比如：++a 放在变量的后面，我们叫做后++。 比如：a++ 注意点： ​\t不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。\n案例： 1 2 3 4 5 6 //++ int a = 10; a++;//就是让变量a里面的值 + 1 System.out.println(a);//11 ++a;//就是让变量a里面的值 + 1 System.out.println(a);//12 自增自减运算符的应用场景： 某些情况下，变量需要进行加1或者减1的时候使用。\n比如：过生日多一岁，就用到了自增运算符。\n比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。\n比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。\n11.赋值运算符 最为常用的：\t=\n运算过程：就是把等号右边的结果赋值给左边的变量\n案例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class OperatorDemo6 { public static void main(String[] args) { //1.最为简单的赋值运算符用法 int a = 10;//就是把10赋值给变量a System.out.println(a); //2.如果等号右边需要进行计算。 int b = 20; int c = a + b;//先计算等号右边的，把计算的结果赋值给左边的变量 System.out.println(c); //3.特殊的用法 a = a + 10;//先计算等号右边的，把计算的结果赋值给左边的变量 System.out.println(a);//20 } } 12.扩展赋值运算符 分类： ​\t+=、-=、*=、/=、%=\n运算规则： ​\t就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。\n案例： 1 2 3 4 5 6 7 8 9 10 11 public class OperatorDemo7 { public static void main(String[] args) { //扩展赋值运算符 int a = 10; int b = 20; a += b;//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响 // 相当于 a = a + b; System.out.println(a);//30 System.out.println(b);//20 } } 注意点： ​\t扩展的赋值运算符中隐层还包含了一个强制转换。\n以+=为例。\na += b ;实际上相当于 a = (byte)(a + b);\n1 2 3 4 5 6 7 8 9 public class OperatorDemo8 { public static void main(String[] args) { byte a = 10; byte b = 20; //a += b; a = (byte)(a + b); System.out.println(a);//30 } } 13.关系运算符 又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。\n分类： 符号 解释 == 就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false != 就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false \u0026gt; 就是判断左边是否大于右边，如果成立就是true，如果不成立就是false \u0026gt;= 就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false \u0026lt; 就是判断左边是否小于右边，如果成立就是true，如果不成立就是false \u0026lt;= 就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false 注意点： 关系运算符最终的结果一定是布尔类型的。要么是true，要么是false 在写==的时候，千万不要写成= 14.逻辑运算符 \u0026amp; 和 | 的使用： \u0026amp;：逻辑与（而且）\n​\t两边都为真，结果才是真，只要有一个为假，那么结果就是假。\n|：逻辑或（或者）\n​\t两边都为假，结果才是假，只要有一个为真，那么结果就是真。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 // \u0026amp; //两边都是真，结果才是真。 System.out.println(true \u0026amp; true);//true System.out.println(false \u0026amp; false);//false System.out.println(true \u0026amp; false);//false System.out.println(false \u0026amp; true);//false System.out.println(\u0026#34;===================================\u0026#34;); // | 或 //两边都是假，结果才是假，如果有一个为真，那么结果就是真。 System.out.println(true | true);//true System.out.println(false | false);//false System.out.println(true | false);//true System.out.println(false | true);//true 使用场景： ​\t根据固定的场景，来选择使用\u0026amp;还是使用|\n用户登录。\n用户名输入正确 \u0026amp; 密码输入正确\n因为只有用户名和密码同时都正确了，那么才能成功登录，只要有一个失败了都不行。\n使用技巧：\n​\t当我们需要同时满足左边和右边两种情况时，可以使用且\n丈母娘选女婿\n丈母娘：女婿啊，你要么买个房子，要么买辆车。就可以把我的小棉袄穿走了。\n买个房子 | 买辆车\n两个条件中，只要满足其中一个，就可以穿走小棉袄了。\n使用技巧：\n​\t当两种条件只要满足其中一个的时候，可以使用或\n^（异或）的使用： ​\t在以后用的不多，了解一下即可。\n计算规则：如果两边相同，结果为false，如果两边不同，结果为true\n代码示例：\n1 2 3 4 5 //^ //左右不相同，结果才是true，左右相同结果就是false System.out.println(true ^ true);//false System.out.println(false ^ false);//false System.out.println(true ^ false);//true System.out.println(false ^ true);//true !（取反）的使用： ​\t是取反，也叫做非。\n计算规则：false取反就是true，true取反就是false\n温馨提示：取反最多只用一个。\n代码示例：\n1 2 3 4 System.out.println(!false);//true System.out.println(!true);//false System.out.println(!!false);//注意点：取反最多只用一个。 15.短路逻辑运算符 分类： \u0026amp;\u0026amp; ||\n\u0026amp;\u0026amp;： ​\t运算结果跟\u0026amp;是一模一样的，只不过具有短路效果。\n||： ​\t运算结果跟|是一模一样的。只不过具有短路效果。\n逻辑核心： ​\t当左边不能确定整个表达式的结果，右边才会执行。\n​\t当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。\n举例： 用户登录案例\n用户名正确 \u0026amp; 密码正确\n如果使用一个\u0026amp;，不管用户名是否正确都会去验证密码。\n思考：\n​\t如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。\n​\t但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。\n​\t如果使用一个\u0026amp;，那么左边和右边不管什么情况下，都会执行。\n​\t用户名正确 \u0026amp;\u0026amp; 密码正确\n​\t如果用户名输入正确了，那么才会验证密码是否输入正确。\n​\t如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。\n丈母娘选女婿\n有房 | 有车\n首先先看看有没有房，发现有，然后再去看看有没有车。\n思考：\n​\t既然都有房子，干嘛还要去看车呢？多此一举。\n​\t有房 || 有车\n​\t首先先看看有没有房，如果有，那么右边就不执行了。最终的结果直接为true。\n​\t如果没有房子，才会去看右边有没有车。\n总结： ​\t\u0026amp;\u0026amp; 和 \u0026amp; 、||和|的运行结果都是一模一样的。\n​\t但是短路逻辑运算符可以提高程序的运行效率。\n建议： ​\t最为常用： \u0026amp;\u0026amp; || ！\n16.三元运算符 又叫做：三元表达式或者问号冒号表达式。\n格式： ​\t关系表达式 ？ 表达式1 ：表达式2 ；\n计算规则： 计算关系表达式的值。 如果关系表达式的值为真，那么执行表达式1。 如果关系表达式的值为假，那么执行表达式2。 注意点： ​\t三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。\n案例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class OperatorDemo12 { public static void main(String[] args) { //需求：求两个数的较大值 int a = 10; int b = 20; //格式：关系表达式 ？ 表达式1 ： 表达式2 ； //注意点： //三元运算符的最终结果一定要被使用。 //要么赋值给一个变量，要么直接输出。 int max = a \u0026gt; b ? a : b ; System.out.println(max); System.out.println(a \u0026gt; b ? a : b); } } 17.练习1-两只老虎 需求：\n​\t动物园里有两只老虎，两只老虎的体重分别为通过键盘录入获得，\n​\t请用程序实现判断两只老虎的体重是否相同。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 //1.获取两只老虎的体重 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入第一只老虎的体重\u0026#34;); int weight1 = sc.nextInt(); System.out.println(\u0026#34;请输入第二只老虎的体重\u0026#34;); int weight2 = sc.nextInt(); //2.利用三元运算符求出最终结果 String result = weight1 == weight2 ? \u0026#34;相同\u0026#34; : \u0026#34;不相同\u0026#34;; System.out.println(result); 18.练习2-求三个数的最大值 需求：\n​\t一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm。\n​\t请用程序实现获取这三个和尚的最高身高。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 //1.定义三个变量记录和尚的身高 int height1 = 150; int height2 = 210; int height3 = 165; //2.利用三元运算符求出两个数中的较大值。 int temp = height1 \u0026gt; height2 ? height1 : height2; //3.求出最终的结果 int max = temp \u0026gt; height3 ? temp : height3; System.out.println(max); 19.运算符的优先级 在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。\n咱们只要知道其中一点：\n​\t小括号优先于所有。\n","date":"2024-10-08T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/p/day03-%E8%BF%90%E7%AE%97%E7%AC%A6/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day03-%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"day03-运算符"},{"content":"day02 - Java基础语法 1. 注释 ​\t注释是对代码的解释和说明文字。\nJava中的注释分为三种：\n单行注释： 1 // 这是单行注释文字 多行注释： 1 2 3 4 5 6 /* 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ 注意：多行注释不能嵌套使用。 文档注释（暂时用不到）： 1 2 3 4 5 /** 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ 使用的技巧 ​\t如果我们要对代码进行解释，那么就可以使用注释。\n​\t当注释的内容比较少，一行就写完了，可以用单行注释。\n​\t如果注释的内容比较多，需要写在多行，那么可以使用多行注释。\n注意点 ​\t注释的内容不会参与编译和运行的，仅仅是对代码的解释说明而已。\n​\t所以，不管在注释当中写什么内容，都不会影响代码运行的结果。\n2. 关键字 2.1 概念 ​\t被Java赋予了特定含义的英文单词。\n​\t当我们在代码中写了关键字之后，程序在运行的时候，就知道要做什么事情了。\n注意：关键字很多，不用刻意去记。\nabstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return strictfp short static super switch synchronized this throw throws transient try void volatile while 2.2 第一个关键字class ​\t表示定义一个类。创建一个类。\n类：Java项目最基本的组成单元，一个完整的Java项目有可能会有成千上万个类来组成的。\nclass后面跟随的就是这个类的名字，简称：类名。\n在类名后面会有一对大括号，表示这个类的内容。\n举例：\n1 2 3 4 public class HelloWorld{ } 解释：class表示定义类。\n​\t类名：HelloWorld\n​\tHelloWorld后面的大括号表示这个类的范围。\n3. 字面量 作用：告诉程序员，数据在程序中的书写格式。\n字面量类型 说明 程序中的写法 整数 不带小数的数字 666，-88 小数 带小数的数字 13.14，-5.21 字符 必须使用单引号，有且仅能一个字符 ‘A’，‘0’， ‘我’ 字符串 必须使用双引号，内容可有可无 “HelloWorld”，“黑马程序员” 布尔值 布尔值，表示真假，只有两个值：true，false true 、false 空值 一个特殊的值，空值 值是：null 1 2 3 4 5 6 7 8 9 public class Demo { public static void main(String[] args) { System.out.println(10); // 输出一个整数 System.out.println(5.5); // 输出一个小数 System.out.println(\u0026#39;a\u0026#39;); // 输出一个字符 System.out.println(true); // 输出boolean值true System.out.println(\u0026#34;欢迎来到黑马程序员\u0026#34;); // 输出字符串 } } 区分技巧 不带小数点的数字都是整数类型的字面量。 只要带了小数点，那么就是小数类型的字面量。 只要用双引号引起来的，不管里面的内容是什么，不管里面有没有内容，都是字符串类型的字面量。 字符类型的字面量必须用单引号引起来，不管内容是什么，但是个数有且只能有一个。 字符类型的字面量只有两个值，true、false。 空类型的字面量只有一个值，null。 4. 变量 4.1 什么是变量？ ​\t变量就在程序中临时存储数据的容器。但是这个容器中只能存一个值。\n4.2 变量的定义格式 ​\t数据类型 变量名 = 数据值；\n4.2.1 格式详解 ​\t数据类型：限定了变量当中能存储什么类型的数据。\n​\t如果要存10，那么数据类型就需要写整数类型。\n​\t如果要存10.0，那么数据类型就需要写小数类型。\n​\t变量名：其实就是这个容器的名字。\n​\t当以后想要使用变量里面的数据时，直接使用变量名就可以了。\n​\t数据值：真正存储在容器中的数据。\n​\t分号：表示语句的结束，就跟以前写作文时候的句号是一样的。\n4.2.2 常用的数据类型 ​\t整数：int\n​\t小数：（浮点数）double\n​\t其他数据类型稍后讲解\n举例：\n1 2 3 4 5 6 7 8 9 10 11 12 public class VariableDemo{ public static void main(String[] args){ //定义一个整数类型的变量 //数据类型 变量名 = 数据值; int a = 16; System.out.println(a);//16 //定义一个小数类型的变量 double b = 10.1; System.out.println(b);//10.1 } } 4.2.3 变量的注意事项 变量名不能重复 在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。 变量在使用之前必须要赋值。 案例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class VariableDemo2{ public static void main(String[] args){ //1.变量名不允许重复 //int a = 10; //int a = 20; //System.out.println(a); //2.一条语句可以定义多个变量 //了解。 //int a = 10, b = 20, c = 20,d = 20; //System.out.println(a);//? //System.out.println(b);//? //3.变量在使用之前必须要赋值 int a = 30; System.out.println(a); } } 4.3 变量的练习 ​\t需求：说出公交车到终点站之后，车上一共有多少乘客？\n​\t一开始没有乘客。\n​\t第一站：上去一位乘客，没有下来乘客。\n​\t第二站：上去两位乘客，下来一位乘客。\n​\t第三站：上去两位乘客，下来一位乘客。\n​\t第四站：没有上去乘客，下来一位乘客。\n​\t第五站：上去一位乘客，没有下来乘客。\n​\t问：到了终点站之后，车上一共多少乘客？\n​\t代码解析：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class VariableTest1{ //主入口 public static void main(String[] args){ //一开始没有乘客。 int count = 0; //第一站：上去一位乘客 //在原有的基础上 + 1 count = count + 1; //System.out.println(count); //第二站：上去两位乘客，下来一位乘客 count = count + 2 - 1; //第三站：上去两位乘客，下来一位乘客 count = count + 2 - 1; //第四站：下来一位乘客 count = count - 1; //第五站：上去一位乘客 count = count + 1; //请问：到了终点站，车上一共几位乘客。 System.out.println(count);//3 } } 5. 数据类型 5.1 Java语言数据类型的分类 基本数据类型 引用数据类型（面向对象的时候再深入学习） 5.2 基本数据类型的四类八种 数据类型 关键字 内存占用 取值范围 整数 byte 1 负的2的7次方 ~ 2的7次方-1(-128~127) short 2 负的2的15次方 ~ 2的15次方-1(-32768~32767) int 4 负的2的31次方 ~ 2的31次方-1 long 8 负的2的63次方 ~ 2的63次方-1 浮点数 float 4 1.401298e-45 ~ 3.402823e+38 double 8 4.9000000e-324 ~ 1.797693e+308 字符 char 2 0-65535 布尔 boolean 1 true，false 说明 ​\te+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。\n​\t在java中整数默认是int类型，浮点数默认是double类型。\n需要记忆以下几点 byte类型的取值范围：\n​\t-128 ~ 127\nint类型的大概取值范围：\n​\t-21亿多 ~ 21亿多\n整数类型和小数类型的取值范围大小关系：\n​\tdouble \u0026gt; float \u0026gt; long \u0026gt; int \u0026gt; short \u0026gt; byte\n最为常用的数据类型选择：\n在定义变量的时候，要根据实际的情况来选择不同类型的变量。\n比如：人的年龄，可以选择byte类型。\n比如：地球的年龄，可以选择long类型。\n如果整数类型中，不太确定范围，那么默认使用int类型。\n如果小数类型中，不太确定范围，那么默认使用double类型。\n如果要定义字符类型的变量，那么使用char\n如果要定义布尔类型的变量，那么使用boolean\n5.3 定义8种基本数据类型变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class VariableDemo3{ public static void main(String[] args){ //1.定义byte类型的变量 //数据类型 变量名 = 数据值; byte a = 10; System.out.println(a); //2.定义short类型的变量 short b = 20; System.out.println(b); //3.定义int类型的变量 int c = 30; System.out.println(c); //4.定义long类型的变量 long d = 123456789123456789L; System.out.println(d); //5.定义float类型的变量 float e = 10.1F; System.out.println(e); //6.定义double类型的变量 double f = 20.3; System.out.println(f); //7.定义char类型的变量 char g = \u0026#39;a\u0026#39;; System.out.println(g); //8.定义boolean类型的变量 boolean h = true; System.out.println(h); } } 注意点 如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。 如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。 如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。） 如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以） 5.4 练习1 需求：定义5个变量记录老师的信息并打印\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class VariableTest1{ public static void main(String[] args){ //1.定义字符串类型的变量记录老师的姓名 String name = \u0026#34;黑马谢广坤\u0026#34;; //2.定义整数类型的变量记录老师的年龄 int age = 18; //3.定义字符类型的变量记录老师的性别 char gender = \u0026#39;男\u0026#39;; //4.定义小数类型的变量记录老师的身高 double height = 180.1; //5.定义布尔类型的变量记录老师的婚姻状况 boolean flag = true; //输出5个变量的值 System.out.println(name); System.out.println(age); System.out.println(gender); System.out.println(height); System.out.println(flag); } } 5.5 练习2 需求：将（电影名称，主演，年份，评分）四个信息选择不同类型的变量，随后打印出来。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class VariableTest2{ public static void main(String[] args){ //1.定义字符串变量记录电影的名称 String movie = \u0026#34;送初恋回家\u0026#34;; //2.定义三个变量记录主演的名字 String name1 = \u0026#34;刘鑫\u0026#34;; String name2 = \u0026#34;张雨提\u0026#34;; String name3 = \u0026#34;高媛\u0026#34;; //3. 定义整数类型的变量记录年龄的年份 int year = 2020; //4.定义小数类型的变量记录电影的评分 double score = 9.0; //打印变量的信息 System.out.println(movie); System.out.println(name1); System.out.println(name2); System.out.println(name3); System.out.println(year); System.out.println(score); } } 5.6 练习3 需求：选择其中一部手机，将（手机价格，手机品牌）两个信息选择不同类型的变量，随后打印出来。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class VariableTest3{ public static void main(String[] args){ //1.定义小数类型的变量记录手机的价格 double price = 5299.0; //2.定义字符串类型的变量记录手机的品牌 String brand = \u0026#34;华为\u0026#34;; //输出变量记录的值 System.out.println(price); System.out.println(brand); } } 6. 标识符 业内大多数程序员都在遵守阿里巴巴的命名规则。\n在day02的资料文件夹中有。\n6.1 硬性要求： ​\t必须要这么做，否则代码会报错。\n必须由数字、字母、下划线_、美元符号$组成。 数字不能开头 不能是关键字 区分大小写的。 6.2 软件建议： ​\t如果不这么做，代码不会报错，但是会让代码显得比较low。\n6.2.1 小驼峰命名法 适用于变量名和方法名\n如果是一个单词，那么全部小写，比如：name\n如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge\n6.2.2 大驼峰命名法 适用于类名\n如果是一个单词，那么首字母大写。比如：Demo、Test。\n如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld\n不管起什么名字，都要做到见名知意。\n阿里巴巴命名规范细节： 尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。\n正确：alibaba、hangzhou、nanjing\n错误：jiage、dazhe\n平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。\n错误：_name\n正确：name\n7. 键盘录入 ​\t键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。\n使用步骤：\n第一步：\n​\t导包：其实就是表示先找到Scanner这个类在哪。\n第二步：\n​\t创建对象：其实就表示申明一下，我准备开始用Scanner这个类了。\n第三步：\n​\t接收数据：也是真正干活的代码。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 //导包，其实就是先找到Scanner这个类在哪 import java.util.Scanner; public class ScannerDemo1{ public static void main(String[] args){ //2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。 Scanner sc = new Scanner(System.in); //3.接收数据 //当程序运行之后，我们在键盘输入的数据就会被变量i给接收了 System.out.println(\u0026#34;请输入一个数字\u0026#34;); int i = sc.nextInt(); System.out.println(i); } } 8. IDEA 8.1 IDEA概述 ​\tIDEA全称IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。\n集成环境：\n​\t把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。\n8.2 IDEA的下载和安装 8.2.1 下载 ​\t可以到官方网站自行下载，网址为：https://www.jetbrains.com/idea\n​\t今天的资料中，对应的安装包也提高给大家了。\n8.2.2 安装 到资料文件夹中，双击安装包。 点击next，准备安装 点击Browse修改安装路径。\n修改完毕点击next\n勾选64-bit launcher。表示在桌面新建一个64位的快捷方式。\n其他的不要勾选。\n点击next。\n点击Install，准备安装。 等进度条读取完毕之后，会有最终界面提示。\n点击finish即可。\n第一次启动会询问，是否导入一些设置。\n选择第二个不导入，保持默认设置，再点击OK。\n选择背景主题\n左边是黑色背景。右边是白色背景。\n这个可以根据自己的喜好来选择。\n选择完毕点击右下角的next\n在本界面让我们购买idea。\n因为我们是学习阶段，所以可以使用免费使用30天。\n点击第一排第二个。Evaluate for free\n点击蓝色的Evaluate，就可以开始免费试用30天了。 当看到这个界面，就表示idea已经成功安装完毕\n可以点击右上角关闭。\n8.3 IDEA中层级结构介绍 8.3.1 结构分类 project（项目、工程） module（模块） package（包） class（类） 8.3.2 结构介绍 ​\t为了让大家更好的吸收，package这一层级，我们后面再学习，先学习最基础的project、module、class。\nproject（项目、工程） ​\t淘宝、京东、黑马程序员网站都属于一个个项目，IDEA中就是一个个的Project。\nmodule（模块） ​\t在一个项目中，可以存放多个模块，不同的模块可以存放项目中不同的业务功能代码。在黑马程序员的官方网站中，至少包含了以下模块：\n论坛模块 报名、咨询模块 为了更好的管理代码，我们会把代码分别放在两个模块中存放。\npackage（包） ​\t一个模块中又有很多的业务，以黑马程序员官方网站的论坛模块为例，至少包含了以下不同的业务。\n发帖 评论 为了把这些业务区分的更加清楚，就会用包来管理这些不同的业务。\nclass（类） ​\t就是真正写代码的地方。\n8.3.3 小结 层级关系\n​\tproject - module - package - class\n包含数量\n​\tproject中可以创建多个module ​\tmodule中可以创建多个package ​\tpackage中可以创建多个class\n​\t这些结构的划分，是为了方便管理类文件的。\n8.4 IDEA中的第一个代码 8.4.1 操作步骤 创建Project 项目 创建Module 模块 创建class 类 在类中编写代码 完成编译运行 8.4.2 分步图解 双击启动图标\n首先要新建一个项目\n点击creat new project\n我们要从0开始写代码，所以新建一个空的什么都没有的项目。\n点击左下方的Empty Project\n再点击右下角的next\n输入项目的名称\n输入项目的存放路径\n点击ok。idea会帮助我们在本地创建一个项目文件夹 点击Module，准备新建一个模块 点击+\n再点击New Module\n我们要编写Java代码，所以要新建一个Java模块。\n点击Java\n再点击右下角的next\n输入模块的名称\n再点击右下角的Next\n成功新建一个模块之后，中间就会出现刚刚新建的模块\n点击右下角的OK\n回到主界面\n展开刚刚新建的模块\n右键点击src，选择New，选择Java Class\n输入类名\n再按回车\n由于字体比较小\n所以，我们要设置一下字体。\n点击File，选择Setting。\n搜索一下font\n在右边可以输入Size的数值来调节代码字体的大小。\n设置完毕后点击右下角的OK\n编写代码 运行代码\n右键空白处，点击Run\n最下面会弹出控制台。\n所有输出语句中的内容，都会在控制台上展示。\n8.5 IDEA中类的相关操作 8.5.1 类的相关操作 新建类文件 删除类文件 修改类文件 8.5.2 新建类文件 所有的Java代码都会写在src文件夹当中。\n所以，右键点击src，选择new，点击Java Class\n输入类名，再按回车\n新建完毕\n8.5.3 修改类名 右键点击想要修改的文件\n点击Refactor\n再点击Rename\n输入想要修改的名字\n输入完毕点击下面的Refactor\n文件名和类名均已修改成功\n8.5.4 删除类文件 想要删除哪个文件，就右键点击该文件\n选择Delete即可\n在弹出的界面中点击OK，确定删除 小贴士：\n此时删除是不走回收站的，直接从硬盘中删掉了。\n8.6 IDEA中模块的相关操作 8.6.1 模块的相关操作 新建模块 删除模块 修改模块 导入模块 8.6.2 新建模块 点击File，选择Project Structure 选择Module 点击+\n选择New Module\n要创建一个Java模块，所以选择第一个Java\n点击右下角的Next\n输入模块的名称\n点击右下角的Finish\n成功新建完毕之后，在中间空白区域就出现了刚刚新建的模块\n点击右下角的OK\n在主界面中，也会出现刚刚新建的模块 8.6.3 删除模块 右键点击模块\n选择Remove Module\n选择Remove，表示确定删除 此时发现，在IDEA列表页面，删除的模块已经不在了。 小贴士：\n此时删除仅仅是从IDEA列表中的删除，在本地硬盘中还是存在的。\n8.6.4 修改模块 右键点击模块名\n选择Refactor\n再选择Rename\n选择第三个修改模块名和本地文件夹名\n点击OK\n输入要修改的新的模块名\n输入完毕点击Refactor\n回到主界面，就发现模块名和文件夹名都已经修改完毕 8.6.5 导入模块 点击File，选择Project Structure 选择Module\n点击+\n选择Import Module\n从本地硬盘中选择要导入的模块\n再点击OK\n不断点击Next 如果中间出现提示框，则点击Overwrite\n然后继续点击右下角的Next\n一直点到finish为止 成功导入后，在中间位置就会出现导入的模块信息 在主界面中也会出现导入的模块信息 展开模块点击模块中的Java文件，会发现代码报错。\n是因为导入模块跟JDK没有关联导致。\n可以点击右上角的Setup SDK\n再选择已经安装的JDK版本即可\n导入完毕之后，代码就恢复正常不会报错了 8.7 IDEA中项目的相关操作 8.7.1 项目的相关操作 关闭项目 打开项目 修改项目 新建项目 8.7.2 关闭项目 点击File，选择Close Project即可 刚刚操作的项目就已经关闭了\n左侧是项目列表，如果要再次打开该项目，直接点击即可。\n右侧有create new project，可以再建一个新的项目\n鼠标放在项目上，后面会出现一个叉。\n如果点击了这里的叉，会在IDEA的列表中删除。不会删除本地硬盘上的项目。\n8.7.3 打开项目 在本界面还可以打开本地已经存在的项目\n点击Open or Import\n选择要打开的项目\n点击OK\n项目就被打开了。 8.7.4 修改项目 点击File，选择Project Structure 在这个界面，默认是Module\n所以，要先点击Project\n在右侧页面中，输入新的项目名称\n修改JDK版本和编译版本都变成JDK14\n再点击OK\n此时发现，项目名称已经修改完毕 但是本地文件夹的名字还没有修改 需要先关闭当前项目 点击项目后面的叉，从列表中移除项目 到本地硬盘中手动修改文件夹的名称 点击Open or Import重新打开项目 选择修改之后的项目\n点击OK\n此时会发现，项目名称和本地硬盘文件夹的名称都已经修改完毕了 8.7.5 新建项目 点击File\n选择New\n点击Project\n同样还是创建一个什么都没有的空项目 输入项目的名称\n点击右下角的finish\nIDEA循环是否需要帮我们在本地创建一个新的文件夹\n点击OK\n询问是在本窗口打开还是在一个新的窗口打开。\n可以点击New Window，在一个新的窗口打开。\n此时就出现了两个窗口，在一个新的窗口打开了新的项目 ","date":"2024-10-07T14:37:10+08:00","image":"https://AXiao-HOLO.github.io/p/day02-java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day02-java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/","title":"day02-Java基础概念"},{"content":" 1. 人机交互 1.1 什么是cmd？ 就是在windows操作系统中，利用命令行的方式去操作计算机。\n我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。\n1.2 如何打开CMD窗口？ 按下快捷键：win + R。\n此时会出现运行窗口。\n在运行窗口中输出cmd\n输出回车。\n解惑：\n​\tcmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名）\n1.3 常用CMD命令 扩展一个小点：\n​\t在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。\n​\t而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。\n常见的CMD命令如下：\n操作 说明 盘符名称: 盘符切换。E:回车，表示切换到E盘。 dir 查看当前路径下的内容。 cd 目录 进入单级目录。cd itheima cd .. 回退到上一级目录。 cd 目录1\\目录2... 进入多级目录。cd itheima\\JavaSE cd \\ 回退到盘符目录。 cls 清屏。 exit 退出命令提示符窗口。 1.4 CMD练习 需求：\n利用cmd命令打开自己电脑上的QQ。\n完成步骤：\n1 2 3 4 1,确定自己电脑上的QQ安装在哪里 2,启动cmd 3,进入到启动程序QQ.exe所在的路径。 4,输出qq.exe加回车表示启动qq。 解惑：\n​\t在windows操作系统当中，文件名或者文件夹名是忽略大小写的。\n1.5 环境变量 作用：\n​\t如果我想要在CMD的任意目录下，都可以启动某一个软件，那么就可以把这个软件的路径配置到环境变量中的PATH里面。\n​\t在启动软件的时候，操作系统会先在当前路径下找，如果在当前录课没有再到环境变量的路径中去找。如果都找不到就提示无法启动。\n步骤：\n右键我的电脑，选择属性。 点击左侧的高级系统设置 选择高级，再点击下面的环境变量。 找系统变量里面的PATH 把软件的完整路径，配置到PATH当中就可以了。 （可做可不做）就是把自己配置的路径，移动到最上面。 图解示例如下：\n第一步：右键点击我的电脑并选择属性。\n（如果无法出现第二步界面，可以打开我的电脑之后右键点击空白处）\n第二步：点击高级系统设置。\n​\t第三步：选择高级，再点击下面的环境变量。\n第四步：找系统变量里面的PATH\n第五步：点击新建，把软件的完整路径，配置到PATH当中，再点击确定即可。\n第六步：（可做可不做）点击上移，把当前配置的路径移动到最上面。\n移动的好处：在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上面查找的速度比较快。\n2. Java概述 1.1 Java是什么？ 语言：人与人交流沟通的表达方式\n计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言\nJava是一门非常火的计算机语言。（也叫做编程语言）\n我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了\n1.2下载和安装 1.2.1 下载 通过官方网站获取JDK\nhttp://www.oracle.com\n注意1：针对不同的操作系统，需要下载对应版本的JDK。\n注意2：\n​\t如果你的电脑是windows32位的，建议重装系统，重装成64位的操作系统。\n​\t因为Java从9版本开始，就已经不提供32位版本的安装包了。\n​\t如果自己不愿意下载，到今天day01资料文件中，也有对应的安装包。\n1.2.2 安装 ​\t傻瓜式安装，下一步即可。默认的安装路径是在C:\\Program Files下。\n建议：\n安装路径不要有中文，不要有空格等一些特殊的符号。 以后跟开发相关的所有软件建议都安装在同一个文件夹中，方便管理。 1.2.3 JDK的安装目录介绍 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 1.3 HelloWorld小案例 ​\tHelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。\n2.3.1 Java程序开发运行流程 开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。\n2.3.2 HelloWorld案例的编写 新建文本文档文件，修改名称为HelloWorld.java。 注意：后缀名为java的才是java文件。\n用记事本打开HelloWorld.java文件，输写程序内容。 注意：代码要跟我编写的完全保持一致。\n1 2 3 4 5 public class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;HelloWorld\u0026#34;); } } 保存 注意：未保存的文件在左上角会有*符号标记\n编译文件。编译后会产生一个class文件。\njava文件：程序员自己编写的代码。\nclass文件：交给计算机执行的文件。\n运行代码\n注意：运行的是编译之后的class文件。\n用到两个命令：\n​\tjavac + 文件名 + 后缀名 （就是编译java文件）\n​\tjava + 文件名（运行编译之后的class文件）\n1.4 HelloWorld案例常见问题 1.4.1 BUG ​\t在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。\n1.4.2 BUG的解决 具备识别BUG的能力：多看 具备分析BUG的能力：多思考，多查资料 具备解决BUG的能力：多尝试，多总结 1.4.3 HelloWorld常见问题 1、非法字符问题。Java中的符号都是英文格式的。\n2、大小写问题。Java语言对大小写敏感（区分大小写）。\n3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。\n4、编译命令后的java文件名需要带文件后缀.java\n5、运行命令后的class文件名（类名）不带文件后缀.class\n\u0026hellip;\n常见错误代码1： 1 2 3 4 5 publicclass HelloWorld{ public static void main(String[] args){ System.out.println(\u0026#34;HelloWorld\u0026#34;); } } 问题：\n​\tpublic和class之间缺少一个空格。\n技巧：一般来讲在单词之间的空格是不能省略的。\n​\t如果是单词和符号之间的空格是可以省略的。\n常见错误代码2： 1 2 3 4 5 public class HelloWorld{ public static void main(String[] args){ system.out.println(\u0026#34;HelloWorld\u0026#34;); } } 问题：\n​\tsystem首字母必须大写。\n技巧：\n​\tJava代码中，是严格区分大小写的。\n​\t所以该大写的地方一定要大写，该小写的地方一定要小写。多多练习。\n常见错误代码3： 1 2 3 4 5 public class HelloWorld{ public static void main(String[] args){ System.out.println(HelloWorld); } } 问题：\n​\t第三行代码中的HelloWorld必须用双引号引起来，否则就会出现问题。\n常见错误代码4： 1 2 3 4 5 public class HelloWorld{ public static void main(String[] args){ System.out.println(\u0026#34;HelloWorld\u0026#34;)； } } 问题：\n​\t在以后代码当中，所有的标点符号必须是英文状态下的。\n技巧：\n​\t可以在输入法中进行对应的设置。\n1.5 环境变量 1.5.1 为什么配置环境变量 ​\t开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。\n注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。\n1.5.2配置方式 以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。\n①JAVA_HOME：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）\n②Path：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置\n1.5.3win10的bug 当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。\n步骤：\n还是要配置JAVA_HOME给以后的相关软件去使用\n我们可以把java和javac的完整路径配置到PATH当中。\nE:\\develop\\JDK\\bin\n1.6 Notepad++ 1.6.1下载 ​\t打开百度，搜索一下notepad++就可以了。\n​\tday01的资料文件夹里面也有对应的安装包。\n1.6.2 安装 傻瓜式安装，直接点击下一步就可以了。\n​\t对安装路径有两个小建议：\n路径不要有中文，不要有空格，不要有一些特殊符号 建议最好把所有的跟开发相关的软件都放在一起，方便管理。 1.6.3 设置 ​\t右键点击java文件，选择edit with notepad++。\n​\t点击设置，再点击首选项。在弹出的页面当中，左侧选择新建，中间选择Java，右侧选择ANSI。\n1.6.4 练习 ​\t利用notepad++去编写一个HelloWorld并能成功编译和运行。\n1.7 Java语言的发展 三个版本：\nJava5.0：这是Java的第一个大版本更新。 Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。 Java15.0：这个是我们课程中学习的版本。 解惑：\n​\t我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？\n向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。\n举例：\n用8版本开发的代码，用11版本能运行吗？必须可以的。\n用11版本开发的代码，用8版本能运行吗？不一定。\n如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。\n如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。\n1.8 Java的三大平台 ​\tJavaSE、JavaME、JavaEE\n1.8.1 JavaSE ​\t是其他两个版本的基础。\n1.8.2 JavaME ​\tJava语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。\n​\t其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。\n​\t但是，安卓也是可以用Java来开发的。\n1.8.3 JavaEE ​\t用于Web方向的网站开发。（主要从事后台服务器的开发）\n​\t在服务器领域，Java是当之无愧的龙头老大。\n1.9 Java的主要特性 面向对象 安全性 多线程 简单易用 开源 跨平台 1.9.1 Java语言跨平台的原理 操作系统本身其实是不认识Java语言的。 但是针对于不同的操作系统，Java提供了不同的虚拟机。 虚拟机会把Java语言翻译成操作系统能看得懂的语言。\n1.10 JRE和JDK JVM（Java Virtual Machine），Java虚拟机\nJRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）\nJDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具\n总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。\n","date":"2024-10-06T12:54:10+08:00","image":"https://AXiao-HOLO.github.io/p/day01-java%E5%85%A5%E9%97%A8/Image_1724940523674_hu8184546109368228297.jpg","permalink":"https://AXiao-HOLO.github.io/p/day01-java%E5%85%A5%E9%97%A8/","title":"day01-Java入门"},{"content":"这个页面记录我的markdown语法学习的记录，来源于这里。学习流程为在这篇文章中写出和目标文章相同的效果。\n一、Markdown基本语法 1.标题语法 1.1写法1： 1 2 3 4 5 6 # 一级标题\t或者用HTML语法：\u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; ## 二级标题\t或者用HTML语法：\u0026lt;h2\u0026gt;Heading level 2\u0026lt;/h2\u0026gt; ### 三级标题\t··· #### 四级标题\t··· ##### 五级标题\t··· ###### 六级标题\t··· 需要注意的是，在#的后面要加上一个空格。\n实例效果：\n1.2写法2： 1 在标题的下面卸任一数量的==或者--来表示一级标题或者耳机标题 预览效果：\n2.字体语法： 2.1设计粗体、斜体、和删除线的方法 1 2 3 4 5 *这里是文字*\t//斜体 _这里是文字_\t//斜体 **这里是文字**\t//粗体 ***这里是文字***\t//斜体+粗体 ~~这里是文字~~\t//删除线 这里是文字\t//斜体 这里是文字\t//斜体 这里是文字\t//粗体 这里是文字\t//斜体+粗体 这里是文字\t//删除线\n示例效果：\n2.2设计字体、字号和颜色 这里，就需要用到HTML语法了。\n因为它本身是不支持修改字体、字号与颜色等功能的。\n有些网站，比如像Github、知乎、简书等，它们就无法设置这种功能。不过像有的万盏，比如像CSDN，它的Markdown编辑器做了很好的扩展、支持HTML语法，就有这样的功能\n具体如下：\n1 \u0026lt;font face=\u0026#39;黑体\u0026#39; color=#ff0000 size=10\u0026gt;我是正文\u0026lt;/font\u0026gt; 我是正文\n在Typora编辑器中可以实现\n这里的【黑体】，也可以改成【宋体】、【楷体】、【微软雅黑】等等。\n这里的size，是规定文本尺寸的大小。一般是1-7，浏览器默认为3。\n至于这里的color，建议可以用十六进制来表示，也可以用rgb来表示。如下表：\n我仅截取了部分。如果没有你想要的颜色，可以查看RGB颜色值与十六进制颜色码对照表\n2.3背景色 在markdown语法里，本身也是没有背景色这样一个选项的。\n所以，就需要用内置HTML的形式。\n借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。举例如下：\n1 \u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td bgcolor=orange\u0026gt;背景色是：orange\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt; 渲染效果：\n背景色是：orange 3.链接语法 3.1Markdown语法形式 1 [文本替换链接](链接) 比如，我想要访问baidu.com，那么，我就可以：\n1 [百度一下，我就知道](baidu.com) 百度一下，我就知道\n给链接添加一个Title：\n什么叫给链接添加一个标题？ 就是把你的鼠标放到该链接上时，会显示出来的文字。\n直接在圆括号后面添加即可，就像这样：\n1 [百度一下，你就知道](baidu.com \u0026#34;搜索网站\u0026#34;) 百度一下，你就知道\n3.2HTML形式语法 1 \u0026lt;a href=\u0026#34;超链接地址\u0026#34; title=\u0026#34;超链接title\u0026#34;\u0026gt;超链接显示名\u0026lt;/a\u0026gt; 百度一下，你就知道\n出来的效果和上面的是一样的。\n3.3图片链接 ——markdown语法：\n1 ！[图片解释性内容](图片链接) 比如：\n不过，在一般情况下，你直接把你的图片复制进去就可以了。链接会帮你自动生成的。\n但是，如果你的图片仅仅是保存在本地，没有存放到图床等地方，那么当你的文件传输给别人的时候，就会丢失。这个时候，需要把图片存放到云端。具体的方法就是要搭建图床。关于搭建Github图床的方法，可以参见这篇文章：(如何用github搭建图床（亲测有效）_jxwd的博客-CSDN博客\n——HTML形式的语法\n关于图片，也可以用HTML语法来进行实现。\n具体来说，就是：\n1 \u0026lt;img src=\u0026#34;图片链接\u0026#34; alt=\u0026#34;图片alt\u0026#34; title=\u0026#34;图片title\u0026#34;\u0026gt; 渲染的效果是一样的。\n——把图片也变成超链接：\n那么，在图片中，也是可以添加链接的。\n具体操作的方法语法格式为：\n1 [![我的博客主页]([相关图片链接])](跳转链接) 比如，你点击我下面的图片试试，你看你会不会跳到我的博客主页中去【可能需要按住ctrl键，也就是说，我的图片此时就相当于一个超链接】：\n当然，关于图片的操作还有很多，但其他的大多都不太常用了，我们这里就不再介绍。\n3.4自动生成超链接 有一种比较简单的方法，就是直接在链接的两侧加上一个尖括号，这样markdown会自动将其识别为一个链接。\n具体来说，就是：\n1 \u0026lt;\u0026#34;[相关链接]\u0026#34;\u0026gt; 比如，如下图所示，这就是我前面的图片的链接：\n\u0026lt;\u0026quot;[https://c-ssl.dtstatic.com/uploads/item/201503/08/20150308161918_BkZrQ.thumb.1000_0.png]\u0026quot;\u0026gt;\n这个样子的话，对于网址和Email，也可以比较方便地转换为可点击的链接了。读者可自行尝试，直接用尖括号加上邮箱即可。\n如果想要对链接进行渲染，直接在链接上进行其他的渲染操作即可(比如加粗、变换字体、字号等)\n3.5锚点 这是一个很6的语法。\n锚点实际上就是页内连接。\n具体语法是：\n1 2 3 ## 这是我的标题{#index} //在某个标题后面设置锚点 跳转到[目录](#index)\t//回到锚点 可以来举个例子：\n点击目录，可以跳转到 【1.3链接语法】的位置\n注意有些编辑器可能不支持。还有在简书里，它可能会重新跳出来一个页面然后去跳转。所以，这个功能还需要看具体的编辑器是否支持。\n具体写出来，是这个样子\n:\n3.6注脚 语法示例：\n1 2 3 xxxx[^1]xxxx [^1]:xxxx 渲染效果：（注：脚注可能自动被搬运到最后面，请到文章末尾查看）\nxxxx1xxxx\n3.7内容目录 在段落中填写 [TOC] 以显示全文内容的目录结构。\n不过还是需要注意，不是所有的编辑器都支持。比如我记得知乎就不支持（不知道现在支不支持了）。\n4.分割线语法 这个比较简单，如果要创建分隔线，在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。\n效果展示：\n5.代码语法 对于程序员来说，代码是必不可少的。\n插入程序代码的方式主要是利用英文“`”符号（一般在ESC键下方，和~同一个键）包裹代码。\n5.1包裹转义代码 如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(````)中.\n1 2 ``printf(\u0026#34;hello world\u0026#34;);``\t//这是markdown语法 \u0026lt;code\u0026gt;printf(\u0026#34;hello world\u0026#34;);\u0026lt;/code\u0026gt; //这是HTML语法 渲染效果是一样的，如下：\nprintf(\u0026quot;hello world\u0026quot;);\nprintf(\u0026ldquo;hello world\u0026rdquo;);\n5.2代码块 我们刚刚是在所要包裹的代码两侧各加上两个`` `\n那么现在，我直接用三个```来作为开始就好了。\n它的示例效果就是像这样：\n5.3HTML代码块 当然了，也可以用HTML代码块来去写。\n1 2 3 4 5 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;/head\u0026gt; 当然，需要注意的是有些编辑器是不支持HTML语法的。比如简书等。我们在前面提到过。\n6.引用 6.1基本使用方法 在所要加引用的段落前面加上一个\u0026gt;\n比如：\n1 \u0026gt;这是一个引用 渲染效果：\n这是一个引用\n6.2引用嵌套 就是在引用里面再加一层引用。\n语法也很简单：\n1 2 3 \u0026gt;这是一个引用 \u0026gt; \u0026gt;\u0026gt;这是一个嵌套引用 渲染效果：\n这是一个引用\n这是一个嵌套引用\n6.3带有其他元素的块引用 比如，在引用里包含表题 、不同形式的字体等等。类似于不同语法的嵌套使用。\n例如：\n1 2 \u0026gt;**这是一个加粗的引用** \u0026gt;这是一个普通的引用 这是一个加粗的引用 这是一个普通的引用\n7.列表 7.1无序列表 使用*，+，-表示无序列表。\n注意：符号后面一定要有一个空格，起到缩进的作用。\n1 2 3 4 5 6 - 我是无序列表1 - 我是无序列表2 + 我是无序列表3 + 我是无序列表4 * 我是无序列表5 * 我是无序列表6 渲染效果：\n我是无序列表1 我是无序列表2 我是无序列表3 我是无序列表4 我是无序列表5 我是无序列表6 7.2有序列表 使用数字和一个英文句点表示有序列表。\n注意：英文句点后面一定要有一个空格，起到缩进的作用。\n1 2 3 1. 我是有序列表 2. 我是有序列表 3. 我是有序列表 渲染效果：\n我是有序列表 我是有序列表 我是有序列表 另外，列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等。\n【注】在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\\就可以了。\n8.表格 语法格式：\n1 2 3 4 姓名|学号|分数 -|-|- 孙悟空|2021|95 猪八戒|20211|96 渲染效果：\n姓名 学号 分数 孙悟空 2021 95 猪八戒 20211 96 二、其他常用 9.换行 方法1：连续两个以上空格+回车。\n方法2：使用html语言换行标签。\n10.特殊符号 (1)对于Markdown中的语法符号，前面加反斜线\\即可显示符号本身。这和高级程序设计语言中的转义用法类似。\n1 2 3 4 \\\\\t表示一个反斜线\\ \\*\t表示一个* \\{\\}\t表示一个{} ··· 大家需要注意这里表示的是什么意思。\n就是说，本来，\\、*等字符可能伴有转义的其他含义。可能是在markdown语法中的一种语法形式。但是，前面加上了\\之后，\\、*这些符号就仅仅是简简单单的斜线和*了。不再具有其他markdown语法的作用。就是纯文本语境下的\\和*。\n(2)其他特殊字符，示例如下(注意在数字的后面的分号不能忘记)：\n1 2 3 4 5 \u0026amp;#10003; 它是一个√ \u0026amp;#10052; 它是一个❄ ... 渲染效果：\n✓\n❄\n这里是通过Unicode码来进行转义的。想知道字符对应的Unicode码，可以看这个网站：\u0026lt;\u0026ldquo;https://unicode-table.com/cn\"\u003e\n不过还是需要注意，不是所有的在线编辑器都支持这样的转换方式。但大多数都支持。\n三、高级用法 11.Latex数学公式 11.1行内公式： 使用两个“$”符号引用公式：\n1 2 3 4 $公式$ $n*2$ //在Typora编辑器中，单独一个$包裹住无法使用数学公式(不知道是不是bug)，只有使用两个$才有效 渲染效果：\n$n*2$\n**我们可以在$$里写上相应的数学公式。**具体见3.1.2\n11.2具体数学公式 11.2.1指数与下标 1 语法形式：$a^3_{2}$ 渲染效果：\n$a^3_{2}$\n这个^后面，就是跟着一个指数，然后_的后面跟着的就是下标\n11.2.2平方根 1 语法形式：$\\sqrt{x}$ 渲染效果：\n$\\sqrt{x}$\n11.2.3在上方或者下方的下划线(可以表示取反等) 1 2 语法形式：$\\overline{m+n}$ 和 $\\underline{m+n}$ 渲染效果：\n$\\overline{m+n}$\n$\\underline{m+n}$\n11.2.4向量 1 2 3 $\\vec a$\t表示向量a $\\overrightarrow{AB}$ 表示向量AB，箭头指向右(即A-\u0026gt;B)\t$\\overleftarrow{AB}$ 表示向量BA，箭头指向左(即A\u0026lt;-B) 渲染效果：\n$\\vec a$\n$\\overrightarrow{AB}$\n$\\overleftarrow{AB}$\n11.2.5分数 1 语法形式：$\\frac{x^{2}}{k+1}$ 渲染效果：\n$\\frac{x^{2}}{k+1}$\n一般按照：\n1 $\\frac{...}{...}$ 来排版，前面表示分子，后面表示分母 11.2.6积分、求和、求积运算符 1 2 3 求和：$\\sum_{i=1}^{n}$\t//按照$$\\sum_{...}^{...}$$的格式 积分：$\\int_{0}^{\\pi}$\t//按照$$\\int_{...}^{...}$$的格式 求积：$\\prod_{0}^{n}$\t//同上两种类似，按照$$\\prod_{...}^{...}$$的格式 渲染效果：\n$\\sum_{i=1}^{n}$\n$\\int_{0}^{\\pi}$\n$\\prod_{0}^{n}$\n11.2.7其他一些希腊字母的表示 No. Lowercase Uppercase English IPA $1$ $\\alpha$ $A$ $alpha$ /\u0026lsquo;ælfə/ $2$ $\\beta$ $B$ $beta$ /\u0026lsquo;bi:tə/or/\u0026lsquo;beɪtə/ $3$ $\\gamma$ $\\Gamma$ $gamma$ /\u0026lsquo;gæmə/ $4$ $\\delta$ $\\Delta$ $delta$ /\u0026lsquo;deltə/ $5$ $\\epsilon$ $E$ $epsilon$ /\u0026rsquo;epsɪlɒn/ $6$ $\\zeta$ $Z$ $zeta$ /\u0026lsquo;zi:tə/ $7$ $\\eta$ $H$ $eta$ /\u0026lsquo;i:tə/ $8$ $\\theta$ $\\Theta$ $theta$ /\u0026lsquo;θi:tə/ $9$ $\\iota$ $I$ $iota$ /aɪ\u0026rsquo;əʊtə/ $10$ $\\kappa$ $K$ $kappa$ /\u0026lsquo;kæpə/ $11$ $\\lambda$ $\\lambda$ $lambda$ /\u0026rsquo;læmdə/ $12$ $\\mu$ $M$ $mu$ /mju:/ $13$ $\\nu$ $N$ $nu$ /nju:/ $14$ $\\xi$ $\\Xi$ $xi$ /ksi/or/\u0026lsquo;zaɪ/or/\u0026lsquo;ksaɪ/ $15$ $\\omicron$ $O$ $omicron$ /əu\u0026rsquo;maikrən/or/\u0026lsquo;ɑmɪ,krɑn/ $16$ $\\pi$ $\\Pi$ $pi$ /paɪ/ $17$ $\\rho$ $P$ $rho$ /rəʊ/ $18$ $\\sigma$ $\\Sigma$ $sigma$ /\u0026lsquo;sɪɡmə/ $19$ $\\tau$ $T$ $tau$ /tɔ:/or/taʊ/ $20$ $\\upsilon$ $\\Upsilon$ $upsilon$ /\u0026lsquo;ipsilon/or/\u0026lsquo;ʌpsilɒn/ $21$ $\\phi$ $\\Phi$ $phi$ /faɪ/ $22$ $\\chi$ $X$ $chi$ /kaɪ/ $23$ $\\psi$ $\\Psi$ $psi$ /psaɪ/ $24$ $\\omega$ $\\Omega$ $omega$ /\u0026lsquo;əʊmɪɡə/or/oʊ\u0026rsquo;meɡə/ 12.流程图 1 tag=\u0026gt;type: content:\u0026gt;url 源码如下图所示：\n1 2 3 4 5 6 7 8 9 st=\u0026gt;start: 开始 e=\u0026gt;end: 结束 op=\u0026gt;operation: 操作 sub1=\u0026gt;subroutine: 子程序 cond=\u0026gt;condition: Yes or No? io=\u0026gt;inputoutput: 输入/输出 st-\u0026gt;op-\u0026gt;cond cond(yes)-\u0026gt;io-\u0026gt;e cond(no)-\u0026gt;sub1(right)-\u0026gt;op 具体可参考：markdown 流程图语法-CSDN博客\n以上。\n文章参考了许多文章和资源，部分链接如下，在此鸣谢：\n[1]\u0026lt;\u0026ldquo;https://blog.csdn.net/weixin_45494811/article/details/104307670\"\u003e\n[2]\u0026lt;\u0026ldquo;https://markdown.com.cn/basic-syntax/\"\u003e\n[3]\u0026lt;\u0026ldquo;https://blog.csdn.net/qq_21808961/article/details/81052243\"\u003e\n[4]\u0026lt;\u0026ldquo;https://www.mohu.org/info/symbols/symbols.htm\"\u003e\n[5]\u0026lt;\u0026ldquo;https://markdown.com.cn/cheat-sheet.html\"\u003e\n注意： 这个页面记录我的markdown语法学习的记录，来源于这里。学习流程为在这篇文章中写出和目标文章相同的效果。\nxxxx\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-09-15T16:05:56+08:00","image":"https://AXiao-HOLO.github.io/p/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/161229155190231137135-20230610115939_hu1720298229994273052.png","permalink":"https://AXiao-HOLO.github.io/p/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/","title":"Markdown语法学习"}]