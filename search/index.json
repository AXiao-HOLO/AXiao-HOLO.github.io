[{"content":"题目描述 我们将整数 x 的 权重 定义为按照下述规则将 x 变成 1 所需要的步数：\n如果 x 是偶数，那么 x = x / 2 如果 x 是奇数，那么 x = 3 * x + 1 比方说，x=3 的权重为 7 。因为 3 需要 7 步变成 1 （3 \u0026ndash;\u0026gt; 10 \u0026ndash;\u0026gt; 5 \u0026ndash;\u0026gt; 16 \u0026ndash;\u0026gt; 8 \u0026ndash;\u0026gt; 4 \u0026ndash;\u0026gt; 2 \u0026ndash;\u0026gt; 1）。\n给你三个整数 lo， hi 和 k 。你的任务是将区间 [lo, hi] 之间的整数按照它们的权重 升序排序 ，如果大于等于 2 个整数有 相同 的权重，那么按照数字自身的数值 升序排序 。\n请你返回区间 [lo, hi] 之间的整数按权重排序后的第 k 个数。\n注意，题目保证对于任意整数 x （lo \u0026lt;= x \u0026lt;= hi） ，它变成 1 所需要的步数是一个 32 位有符号整数。\n示例 1：\n1 2 3 4 5 6 7 8 输入：lo = 12, hi = 15, k = 2 输出：13 解释：12 的权重为 9（12 --\u0026gt; 6 --\u0026gt; 3 --\u0026gt; 10 --\u0026gt; 5 --\u0026gt; 16 --\u0026gt; 8 --\u0026gt; 4 --\u0026gt; 2 --\u0026gt; 1） 13 的权重为 9 14 的权重为 17 15 的权重为 17 区间内的数按权重排序以后的结果为 [12,13,14,15] 。对于 k = 2 ，答案是第二个整数也就是 13 。 注意，12 和 13 有相同的权重，所以我们按照它们本身升序排序。14 和 15 同理。 示例 2：\n1 2 3 4 5 输入：lo = 7, hi = 11, k = 4 输出：7 解释：区间内整数 [7, 8, 9, 10, 11] 对应的权重为 [16, 3, 19, 6, 14] 。 按权重排序后得到的结果为 [8, 10, 11, 7, 9] 。 排序后数组中第 4 个数字为 7 。 提示：\n1 \u0026lt;= lo \u0026lt;= hi \u0026lt;= 1000 1 \u0026lt;= k \u0026lt;= hi - lo + 1 解答 java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int getKth(int lo, int hi, int k) { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;Integer\u0026gt;(); for (int i = lo; i \u0026lt;= hi; i++) { list.add(i); } Collections.sort(list, new Comparator\u0026lt;Integer\u0026gt;() { public int compare(Integer x, Integer y) { if (getF(x) != getF(y)) { return getF(x) - getF(y); } else { return x - y; } } }); return list.get(k - 1); } public int getF(int x) { if (x == 1) { return 0; } else if (x % 2 == 1) { return getF(x * 3 + 1) + 1; } else { return getF(x / 2) + 1; } } } 难度在于自定义比较器和递归算法的思想。\njava比较器Comarator Collections.sort() 是一个静态方法，用于对 list 中的元素进行排序。\nnew Comparator\u0026lt;Integer\u0026gt;() {...} 这里创建了一个匿名内部类（匿名类），它实现了 Comparator\u0026lt;Integer\u0026gt; 接口。\nComparator 是一个用于比较两个对象大小的接口。\n在匿名内部类中定义compare（x,y）方法:当返回值为正整数时，x排在y后；当返回值为负整数时，x排在y前；当返回值为0时，x、y顺序不变。\n","date":"2024-12-22T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E5%B0%86%E6%95%B4%E6%95%B0%E6%8C%89%E6%9D%83%E9%87%8D%E6%8E%92%E5%BA%8F/","title":"算法训练——将整数按权重排序"},{"content":"题目描述 给你一个正整数 n。\n返回 大于等于 n 且二进制表示仅包含 置位 位的 最小 整数 x 。\n置位 位指的是二进制表示中值为 1 的位。\n示例 1：\n输入： n = 5\n输出： 7\n解释：\n7 的二进制表示是 \u0026quot;111\u0026quot;。\n示例 2：\n输入： n = 10\n输出： 15\n解释：\n15 的二进制表示是 \u0026quot;1111\u0026quot;。\n示例 3：\n输入： n = 3\n输出： 3\n解释：\n3 的二进制表示是 \u0026quot;11\u0026quot;。\n提示：\n1 \u0026lt;= n \u0026lt;= 1000 解题过程 思路 本题中x存在一定规律，即$x=2^k-1$,根据公式得出x的迭代公式为$x=x*2+1$，即可得出结果。\n代码实现 java 1 2 3 4 5 6 7 8 class Solution { public int smallestNumber(int n) { int x = 1; while (x \u0026lt; n) x = x * 2 + 1; return x; } } c 与java类似，不再赘述。\n","date":"2024-12-12T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E4%BB%85%E5%90%AB%E7%BD%AE%E4%BD%8D%E4%BD%8D%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B4%E6%95%B0/","title":"算法训练——仅含置位位的最小整数"},{"content":"单链表的建立 1 2 3 4 5 6 7 typedef struct node {/*单链表节点结构*/ int data; struct node *next; }LinkList; LinkList *head = NULL; 前插入法建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 LinkList *AddHeadl() {/*用头插入法建立带头结点的单链表*/ int x; int flag = -1; LinkList *head,*p; head = (LinkList*)malloc(sizeof(LinkList)); head-\u0026gt;next = NULL; /*初始化一个空链表，L为头指针*/ printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); /*x是和链表结点的数据域值具有相同类型的变量*/ while (x != flag) /*flag为结束输入的标志*/ { p=(LinkList*)malloc(sizeof(LinkList));/*生成新的结点*/ p-\u0026gt;data = x; /*输入元素值*/ p-\u0026gt;next = head-\u0026gt;next;head-\u0026gt;next = p;/*插入到表头*/ printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); /*读入下一个元素的值*/ } return head; } 尾插入法建表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 LinkList *AddHead() {/*尾插入法建立一个带头结点的单链表，返回表头指针*/ LinkList *head = (LinkList*)malloc(sizeof(LinkList)); head-\u0026gt;next = NULL; LinkList *q=head,*p; int x,flag=-1; printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); while (x!=flag) { p=(LinkList *)malloc(sizeof(LinkList)); p-\u0026gt;data = x; if(head -\u0026gt;next==NULL) head-\u0026gt;next=p; /*第一个结点的处理*/ else q-\u0026gt;next=p; /*其他结点的处理*/ q=p; /*q指向新的尾结点*/ printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); } if(q!=NULL) q-\u0026gt;next=NULL; /*对于非空表，最后结点的指针域放空指针*/ return head; } 初始化单链表 1 2 3 4 5 6 7 8 9 10 11 LinkList *InitList() { LinkList *head=(LinkList*)malloc(sizeof(LinkList)); if(head==NULL) { printf(\u0026#34;内存分配失败\\n\u0026#34;); exit(1); } head-\u0026gt;next=NULL; return head; } 插入元素 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void add() { LinkList *ptr; int ch1=0,ch2,d; printf(\u0026#34;(在目标位置的下一个结点处添加)1.按序号查找\\n2.按值查找\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch1); printf(\u0026#34;输入序号或值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch2); if(ch1==1) ptr = GetNode(head,ch2); else if (ch1==2) ptr = LocateNode(head,ch2); printf(\u0026#34;输入添加的值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;d); LinkList *q; q = (LinkList*)malloc(sizeof(LinkList));/*申请一个新结点，用q保存结点的地址*/ q-\u0026gt;data = d; /*把值d写入q所指的结点的数据域*/ q-\u0026gt;next = ptr-\u0026gt;next; /*令q-\u0026gt;next指向ptr所指结点的下一个结点（或NULL）*/ ptr-\u0026gt;next = q; /*令ptr-\u0026gt;next指向q所指结点*/ } 删除元素 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 void delete() { LinkList *ptr; int ch1=0,ch2; printf(\u0026#34;1.按序号删除\\n2.按值删除\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch1); printf(\u0026#34;输入序号或值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch2); if(ch1==1) ptr = GetNode(head,ch2-1); else if (ch1==2) { ptr = head; while(ptr-\u0026gt;next!=NULL\u0026amp;\u0026amp;ptr-\u0026gt;next-\u0026gt;data != ch2) ptr = ptr-\u0026gt;next; } if (ptr==NULL || ptr-\u0026gt;next==NULL) { printf(\u0026#34;未找到目标结点\\n\u0026#34;); return; } LinkList *q; q = ptr-\u0026gt;next; /*让q指向ptr所指结点的下一个结点*/ ptr-\u0026gt;next = q-\u0026gt;next; /*令ptr-\u0026gt;next指向q所指结点的下一个结点（或NULL）*/ free(q); /*释放q所指结点*/ printf(\u0026#34;删除成功\\n\u0026#34;); } 按序号查找 1 2 3 4 5 6 7 8 9 10 11 12 LinkList *GetNode(LinkList *head,int i) {/*在头结点的单链表中查找第i个结点，找到返回该结点指针，否则返回NULL*/ LinkList *p=head; int j=0; while(p-\u0026gt;next!=NULL\u0026amp;\u0026amp;j\u0026lt;i) { j++; p=p-\u0026gt;next; /*p右移一个结点*/ } if(j==i) return p; return NULL; } 按值查找 1 2 3 4 5 6 7 LinkList *LocateNode(LinkList *head,int x) {/*在带头结点的单链表中查找值为x的结点，找到返回结点指针，否则返回NULL*/ LinkList *p=head-\u0026gt;next; while(p!=NULL\u0026amp;\u0026amp;p-\u0026gt;data!=x) p=p-\u0026gt;next; return p; } 求单链表长度 1 2 3 4 5 6 7 8 9 10 11 int ListLen(LinkList *head) {/*在带头结点的单链表求表的长度*/ int len=0; LinkList *p=head; while(p-\u0026gt;next!=NULL) { len++; p=p-\u0026gt;next; } return len; } 遍历单链表 1 2 3 4 5 6 7 8 9 10 11 void PrintList(LinkList *head) { LinkList *p=head-\u0026gt;next;\t/*head结点为空*/ while(p!=NULL) { if(p-\u0026gt;next!=NULL) printf(\u0026#34;%d-\u0026gt;\u0026#34;,p-\u0026gt;data); else printf(\u0026#34;%d\\n\u0026#34;,p-\u0026gt;data); p=p-\u0026gt;next; } } 主函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 int main() { head = InitList(head); int ch=1; while(ch) { printf(\u0026#34;1.前插入法建表\\n2.尾插入法建表\\n3.插入元素\\n4.删除元素\\n5.输出表长\\n6.遍历链表\\n0.退出\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch); switch(ch) { case 1: head = AddHeadl(); break; case 2: head = AddHead(); break; case 3: add(); break; case 4: delete(); break; case 5: int len=ListLen(head); printf(\u0026#34;长度为%d\\n\u0026#34;,len); break; case 6: PrintList(head); break; case 0: return 0; default: printf(\u0026#34;没有这个选项\u0026#34;); } } } 完整调试程序include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; typedef struct node {/*单链表节点结构*/ int data; struct node *next; }LinkList; LinkList *head = NULL; LinkList *AddHeadl(); /*前插入法建表*/ LinkList *AddHead(); /*尾插入法建表*/ LinkList *InitList(); /*初始化单链表*/ void add(); /*插入元素*/ void delete(); /*删除元素*/ LinkList *GetNode(LinkList *head,int i);/*按序号查找*/ LinkList *LocateNode(LinkList *head,int x);/*按值查找*/ int ListLen(LinkList *head); /*求单链表长度*/ void PrintList(LinkList *head); /*遍历链表*/ int main(); LinkList *AddHeadl() {/*用头插入法建立带头结点的单链表*/ int x; int flag = -1; LinkList *head,*p; head = (LinkList*)malloc(sizeof(LinkList)); head-\u0026gt;next = NULL; /*初始化一个空链表，L为头指针*/ printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); /*x是和链表结点的数据域值具有相同类型的变量*/ while (x != flag) /*flag为结束输入的标志*/ { p=(LinkList*)malloc(sizeof(LinkList));/*生成新的结点*/ p-\u0026gt;data = x; /*输入元素值*/ p-\u0026gt;next = head-\u0026gt;next;head-\u0026gt;next = p;/*插入到表头*/ printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); /*读入下一个元素的值*/ } return head; } LinkList *AddHead() {/*尾插入法建立一个带头结点的单链表，返回表头指针*/ LinkList *head = (LinkList*)malloc(sizeof(LinkList)); head-\u0026gt;next = NULL; LinkList *q=head,*p; int x,flag=-1; printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); while (x!=flag) { p=(LinkList *)malloc(sizeof(LinkList)); p-\u0026gt;data = x; if(head -\u0026gt;next==NULL) head-\u0026gt;next=p; /*第一个结点的处理*/ else q-\u0026gt;next=p; /*其他结点的处理*/ q=p; /*q指向新的尾结点*/ printf(\u0026#34;输入元素值（-1停止）\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;x); } if(q!=NULL) q-\u0026gt;next=NULL; /*对于非空表，最后结点的指针域放空指针*/ return head; } LinkList *InitList() { LinkList *head=(LinkList*)malloc(sizeof(LinkList)); if(head==NULL) { printf(\u0026#34;内存分配失败\\n\u0026#34;); exit(1); } head-\u0026gt;next=NULL; return head; } void add() { LinkList *ptr; int ch1=0,ch2,d; printf(\u0026#34;(在目标位置的下一个结点处添加)1.按序号查找\\n2.按值查找\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch1); printf(\u0026#34;输入序号或值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch2); if(ch1==1) ptr = GetNode(head,ch2); else if (ch1==2) ptr = LocateNode(head,ch2); printf(\u0026#34;输入添加的值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;d); LinkList *q; q = (LinkList*)malloc(sizeof(LinkList));/*申请一个新结点，用q保存结点的地址*/ q-\u0026gt;data = d; /*把值d写入q所指的结点的数据域*/ q-\u0026gt;next = ptr-\u0026gt;next; /*令q-\u0026gt;next指向ptr所指结点的下一个结点（或NULL）*/ ptr-\u0026gt;next = q; /*令ptr-\u0026gt;next指向q所指结点*/ } void delete() { LinkList *ptr; int ch1=0,ch2; printf(\u0026#34;1.按序号删除\\n2.按值删除\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch1); printf(\u0026#34;输入序号或值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch2); if(ch1==1) ptr = GetNode(head,ch2-1); else if (ch1==2) { ptr = head; while(ptr-\u0026gt;next!=NULL\u0026amp;\u0026amp;ptr-\u0026gt;next-\u0026gt;data != ch2) ptr = ptr-\u0026gt;next; } if (ptr==NULL || ptr-\u0026gt;next==NULL) { printf(\u0026#34;未找到目标结点\\n\u0026#34;); return; } LinkList *q; q = ptr-\u0026gt;next; /*让q指向ptr所指结点的下一个结点*/ ptr-\u0026gt;next = q-\u0026gt;next; /*令ptr-\u0026gt;next指向q所指结点的下一个结点（或NULL）*/ free(q); /*释放q所指结点*/ printf(\u0026#34;删除成功\\n\u0026#34;); } LinkList *GetNode(LinkList *head,int i) {/*在头结点的单链表中查找第i个结点，找到返回该结点指针，否则返回NULL*/ LinkList *p=head; int j=0; while(p-\u0026gt;next!=NULL\u0026amp;\u0026amp;j\u0026lt;i) { j++; p=p-\u0026gt;next; /*p右移一个结点*/ } if(j==i) return p; return NULL; } LinkList *LocateNode(LinkList *head,int x) {/*在带头结点的单链表中查找值为x的结点，找到返回结点指针，否则返回NULL*/ LinkList *p=head-\u0026gt;next; while(p!=NULL\u0026amp;\u0026amp;p-\u0026gt;data!=x) p=p-\u0026gt;next; return p; } int ListLen(LinkList *head) {/*在带头结点的单链表求表的长度*/ int len=0; LinkList *p=head; while(p-\u0026gt;next!=NULL) { len++; p=p-\u0026gt;next; } return len; } void PrintList(LinkList *head) { LinkList *p=head-\u0026gt;next; /*head结点为空*/ while(p!=NULL) { if(p-\u0026gt;next!=NULL) printf(\u0026#34;%d-\u0026gt;\u0026#34;,p-\u0026gt;data); else printf(\u0026#34;%d\\n\u0026#34;,p-\u0026gt;data); p=p-\u0026gt;next; } } int main() { head = InitList(head); int ch=1; while(ch) { printf(\u0026#34;1.前插入法建表\\n2.尾插入法建表\\n3.插入元素\\n4.删除元素\\n5.输出表长\\n6.遍历链表\\n0.退出\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;,\u0026amp;ch); switch(ch) { case 1: head = AddHeadl(); break; case 2: head = AddHead(); break; case 3: add(); break; case 4: delete(); break; case 5: int len=ListLen(head); printf(\u0026#34;长度为%d\\n\u0026#34;,len); break; case 6: PrintList(head); break; case 0: return 0; default: printf(\u0026#34;没有这个选项\u0026#34;); } } } ","date":"2024-12-08T07:00:00+08:00","permalink":"https://AXiao-HOLO.github.io/p/c%E8%AF%AD%E8%A8%80%E5%8D%95%E9%93%BE%E8%A1%A8/","title":"C语言单链表"},{"content":"顺序表的建立 1 2 3 4 5 6 typedef struct { int *elem; /*线性表的基地址*/ int length; /*线性表当前的长度*/ int listsize; /*线性表当前分配的存储容量*/ } SeqList; 初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int InsertSeqList(SeqList *L, int i, int e) { /*初始条件：顺序线性表L已存在，1≤i≤ListLength(L)+1*/ /*操作结果：再L中第i个位置之前插入新的数据元素e，L的长度加1*/ int *q, *p; if (i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length + 1) return 0; else if (L-\u0026gt;length \u0026gt;= L-\u0026gt;listsize) { printf(\u0026#34;顺序表已满\u0026#34;); return 0; } else { q = L-\u0026gt;elem + i; for (p = L-\u0026gt;elem + L-\u0026gt;length; p \u0026gt;= q; --p) *(p + 1) = *p; *q = e; ++L-\u0026gt;length; return 1; } } 插入运算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int InsertSeqList(SeqList *L, int i, int e) { /*初始条件：顺序线性表L已存在，1≤i≤ListLength(L)+1*/ /*操作结果：再L中第i个位置之前插入新的数据元素e，L的长度加1*/ int *q, *p; if (i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length + 1) return 0; else if (L-\u0026gt;length \u0026gt;= L-\u0026gt;listsize) { printf(\u0026#34;顺序表已满\u0026#34;); return 0; } else { q = L-\u0026gt;elem + i; for (p = L-\u0026gt;elem + L-\u0026gt;length; p \u0026gt;= q; --p) *(p + 1) = *p; *q = e; ++L-\u0026gt;length; return 1; } } 删除运算 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int DeleteSeqList(SeqList *L, int i) { /*初始条件：顺序线性表L已存在，1≤i≤ListLength(L)*/ int j; if (i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length) { printf(\u0026#34;不存在第i个元素！\\n\u0026#34;); return 0; } else { for (j = i; j \u0026lt; L-\u0026gt;length; j++) L-\u0026gt;elem[j] = L-\u0026gt;elem[j + 1]; /*向上顺序移动元素*/ L-\u0026gt;length--; /*表长减1*/ return 1; } } 按值查找 1 2 3 4 5 6 7 8 9 10 int SearchSeqList(SeqList *L, int x) { int j = 1; while (j \u0026lt;= L-\u0026gt;length \u0026amp;\u0026amp; L-\u0026gt;elem[j] != x) j++; if (j \u0026gt; L-\u0026gt;length) return -1; else return j; } 遍历 1 2 3 4 5 6 7 8 9 void traverseSeqList(SeqList *L) { int i; for ( i = 1; i \u0026lt;= L-\u0026gt;length; i++) { printf(\u0026#34;位置%d:%d, \u0026#34;,i,L-\u0026gt;elem[i]); } } 完整调试程序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define MAXSIZE 100 typedef struct { int *elem; /*线性表的基地址*/ int length; /*线性表当前的长度*/ int listsize; /*线性表当前分配的存储容量*/ } SeqList; int InitSeqList(SeqList *L, int LISTINITSIZE); /*顺序表初始化*/ int InsertSeqList(SeqList *L, int i, int e); /*插入运算*/ int DeleteSeqList(SeqList *L, int i); /*删除运算*/ int SearchSeqList(SeqList *L, int x); /*按值查找*/ void traverseSeqList(SeqList *L); /*遍历*/ int InitSeqList(SeqList *L, int LISTINITSIZE) { /*LIST_INIT_SIZE表示最初分配给线性表的存储空间（线性表容量）*/ L-\u0026gt;elem = (int*)malloc(LISTINITSIZE * sizeof(int)); if (!L-\u0026gt;elem) return 0; L-\u0026gt;length = 0; L-\u0026gt;listsize = LISTINITSIZE; return 1; } int InsertSeqList(SeqList *L, int i, int e) { /*初始条件：顺序线性表L已存在，1≤i≤ListLength(L)+1*/ /*操作结果：再L中第i个位置之前插入新的数据元素e，L的长度加1*/ int *q, *p; if (i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length + 1) return 0; else if (L-\u0026gt;length \u0026gt;= L-\u0026gt;listsize) { printf(\u0026#34;顺序表已满\u0026#34;); return 0; } else { q = L-\u0026gt;elem + i; for (p = L-\u0026gt;elem + L-\u0026gt;length; p \u0026gt;= q; --p) *(p + 1) = *p; *q = e; ++L-\u0026gt;length; return 1; } } int DeleteSeqList(SeqList *L, int i) { /*初始条件：顺序线性表L已存在，1≤i≤ListLength(L)*/ int j; if (i \u0026lt; 1 || i \u0026gt; L-\u0026gt;length) { printf(\u0026#34;不存在第i个元素！\\n\u0026#34;); return 0; } else { for (j = i; j \u0026lt; L-\u0026gt;length; j++) L-\u0026gt;elem[j] = L-\u0026gt;elem[j + 1]; /*向上顺序移动元素*/ L-\u0026gt;length--; /*表长减1*/ return 1; } } int SearchSeqList(SeqList *L, int x) { int j = 1; while (j \u0026lt;= L-\u0026gt;length \u0026amp;\u0026amp; L-\u0026gt;elem[j] != x) j++; if (j \u0026gt; L-\u0026gt;length) return -1; else return j; } void traverseSeqList(SeqList *L) { int i; for ( i = 1; i \u0026lt;= L-\u0026gt;length; i++) { printf(\u0026#34;位置%d:%d, \u0026#34;,i,L-\u0026gt;elem[i]); } } int main() { int n = 1, a, b, c, goal, num, delGoal, numGoal, result; SeqList L; // 修正指针问题 while (n) { printf(\u0026#34;输入选择：\\n1——建立顺序表，长度为20；\\n2——插入元素\\n3——删除元素\\n4——按值查找\\n5——遍历\\n0——退出\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); switch (n) { case 1: if (a = InitSeqList(\u0026amp;L, 50)) // 传入地址 printf(\u0026#34;创建成功\\n\u0026#34;); break; case 2: printf(\u0026#34;输入目标位置\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;goal); printf(\u0026#34;输入目标值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;num); if (b = InsertSeqList(\u0026amp;L, goal, num)) printf(\u0026#34;插入成功\\n\u0026#34;); else printf(\u0026#34;插入失败\\n\u0026#34;); break; case 3: printf(\u0026#34;输入要删除的位置\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;delGoal); if (c = DeleteSeqList(\u0026amp;L, delGoal)) printf(\u0026#34;删除成功\\n\u0026#34;); else printf(\u0026#34;删除失败\\n\u0026#34;); break; case 4: printf(\u0026#34;输入查找目标值\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;numGoal); result = SearchSeqList(\u0026amp;L, numGoal); if (result != -1) printf(\u0026#34;目标位置为%d\\n\u0026#34;, result); else printf(\u0026#34;未找到目标值\\n\u0026#34;); break; case 5: traverseSeqList(\u0026amp;L); break; case 0: return 0; default: printf(\u0026#34;无效选项，请重新输入。\\n\u0026#34;); break; } } } ","date":"2024-12-07T07:00:00+08:00","permalink":"https://AXiao-HOLO.github.io/p/c%E8%AF%AD%E8%A8%80%E9%A1%BA%E5%BA%8F%E8%A1%A8/","title":"C语言顺序表"},{"content":"题目描述 共有 n 名小伙伴一起做游戏。小伙伴们围成一圈，按 顺时针顺序 从 1 到 n 编号。确切地说，从第 i 名小伙伴顺时针移动一位会到达第 (i+1) 名小伙伴的位置，其中 1 \u0026lt;= i \u0026lt; n ，从第 n 名小伙伴顺时针移动一位会回到第 1 名小伙伴的位置。\n游戏遵循如下规则：\n从第 1 名小伙伴所在位置 开始 。 沿着顺时针方向数 k 名小伙伴，计数时需要 包含 起始时的那位小伙伴。逐个绕圈进行计数，一些小伙伴可能会被数过不止一次。 你数到的最后一名小伙伴需要离开圈子，并视作输掉游戏。 如果圈子中仍然有不止一名小伙伴，从刚刚输掉的小伙伴的 顺时针下一位 小伙伴 开始，回到步骤 2 继续执行。 否则，圈子中最后一名小伙伴赢得游戏。 给你参与游戏的小伙伴总数 n ，和一个整数 k ，返回游戏的获胜者。\n示例 1：\n1 2 3 4 5 6 7 8 9 10 11 12 输入：n = 5, k = 2 输出：3 解释：游戏运行步骤如下： 1) 从小伙伴 1 开始。 2) 顺时针数 2 名小伙伴，也就是小伙伴 1 和 2 。 3) 小伙伴 2 离开圈子。下一次从小伙伴 3 开始。 4) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 4 。 5) 小伙伴 4 离开圈子。下一次从小伙伴 5 开始。 6) 顺时针数 2 名小伙伴，也就是小伙伴 5 和 1 。 7) 小伙伴 1 离开圈子。下一次从小伙伴 3 开始。 8) 顺时针数 2 名小伙伴，也就是小伙伴 3 和 5 。 9) 小伙伴 5 离开圈子。只剩下小伙伴 3 。所以小伙伴 3 是游戏的获胜者。 示例 2：\n1 2 3 输入：n = 6, k = 5 输出：1 解释：小伙伴离开圈子的顺序：5、4、6、2、3 。小伙伴 1 是游戏的获胜者。 提示：\n1 \u0026lt;= k \u0026lt;= n \u0026lt;= 500 进阶： 你能否使用线性时间复杂度和常数空间复杂度解决此问题？\n解题过程 思路 这是一个很典型的约瑟夫环的问题。用队列可以很简单的解决。\n先将n个人入队列，然后依次出队列的同时再入队，当到第k个人的时候出队列不再入队。\n剩下的最后一个人即为获胜者。\n代码实现 Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public static int findTheWinner(int n, int k) { Queue\u0026lt;Integer\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;();/*需导包java.util.ArrayDeque和java.util.Queue*/ for (int i = 1; i \u0026lt;= n; i++) {/*初始化队列*/ q.offer(i); } while (q.size() \u0026gt; 1) { for (int i = 1; i \u0026lt; k; i++) { q.offer(q.poll());/*出队再入队*/ } q.poll();/*第k位即为淘汰者*/ } return q.peek();/*最后剩下获胜者*/ } } C c语言并不自带队列的计算方法，待一段时间后等我学会再补上。\n其他方法 由于存在一定的数学规律，也可以通过公式法或者迭代函数的方法求解。\n这里引用官方的题解。\n方法二：数学 + 递归\n以下用 f(n,k) 表示 n 名小伙伴做游戏，每一轮离开圈子的小伙伴的计数为 k 时的获胜者编号。\n当 n=1 时，圈子中只有一名小伙伴，该小伙伴即为获胜者，因此 f(1,k)=1。\n当 n\u0026gt;1 时，将有一名小伙伴离开圈子，圈子中剩下 n−1 名小伙伴。圈子中的第 k ′名小伙伴离开圈子，k ′满足 1≤k′≤n 且 k−k′是 n 的倍数。\n由于 1≤k′≤n，因此 0≤k′−1≤n−1。又由于 k−k\u0026rsquo;是 n 的倍数等价于 (k−1)−(k′−1) 是 n 的倍数，因此 k′−1=(k−1)modn，k′=(k−1)modn+1。\n当圈子中剩下 n−1 名小伙伴时，可以递归地计算 f(n−1,k)，得到剩下的 n−1 名小伙伴中的获胜者。令 x=f(n−1,k)。\n由于在第 k′名小伙伴离开圈子之后，圈子中剩下的 n−1 名小伙伴从第 k′+1 名小伙伴开始计数，获胜者编号是从第 k′+1 名小伙伴开始的第 x 名小伙伴，因此当圈子中有 n 名小伙伴时，获胜者编号是 f(n,k)=(k\u0026rsquo;modn+x−1)modn+1=(k+x−1)modn+1。\n将 x=f(n−1,k) 代入上述关系，可得：f(n,k)=(k+f(n−1,k)−1)modn+1。\njava\n1 2 3 4 5 6 7 8 class Solution { public int findTheWinner(int n, int k) { if (n == 1) { return 1; } return (k + findTheWinner(n - 1, k) - 1) % n + 1; } } c\n1 2 3 4 5 6 int findTheWinner(int n, int k){ if (n == 1) { return 1; } return (k + findTheWinner(n - 1, k) - 1) % n + 1; } 方法三：数学 + 迭代\n方法二的递归实现可以改成迭代实现，省略递归调用栈空间。\njava\n1 2 3 4 5 6 7 8 9 class Solution { public int findTheWinner(int n, int k) { int winner = 1; for (int i = 2; i \u0026lt;= n; i++) { winner = (k + winner - 1) % i + 1; } return winner; } } c\n1 2 3 4 5 6 7 int findTheWinner(int n, int k){ int winner = 1; for (int i = 2; i \u0026lt;= n; i++) { winner = (k + winner - 1) % i + 1; } return winner; } ","date":"2024-12-06T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E6%89%BE%E5%87%BA%E6%B8%B8%E6%88%8F%E7%9A%84%E8%8E%B7%E8%83%9C%E8%80%85%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/","title":"算法训练——找出游戏的获胜者(约瑟夫环)"},{"content":"题目描述 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n请注意 ，必须在不复制数组的情况下原地对数组进行操作。\n示例 1:\n1 2 输入: nums = [0,1,0,3,12] 输出: [1,3,12,0,0] 示例 2:\n1 2 输入: nums = [0] 输出: [0] 提示:\n1 \u0026lt;= nums.length \u0026lt;= 104 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 进阶： 你能尽量减少完成的操作次数吗？\n解题过程 思路 这道题目与删除有序数组中的重复项的思路类似。\n定义两个数组下标fast,slow,\n用fast来遍历数组，当fast不为0时，替换两个下标对应的值，然后slow自增。\n这样就能实现题目的要求。\n代码实现 C 1 2 3 4 5 6 7 8 9 10 void moveZeroes(int* nums, int numsSize) { int fast = 0, slow = 0; for (; fast \u0026lt; numsSize; fast++) if (nums[fast] != 0) { int tem = nums[fast]; nums[fast] = nums[slow]; nums[slow] = tem; slow++; } } Java(与上面类似) 不再赘述。\n","date":"2024-11-20T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E7%A7%BB%E5%8A%A8%E9%9B%B6/","title":"算法训练——移动零"},{"content":"题目要求 给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。\n示例 1：\n输入：\nnums = [1,2,3,1]\n输出：\ntrue\n解释：\n元素 1 在下标 0 和 3 出现。\n示例 2：\n输入：\nnums = [1,2,3,4]\n输出：\nfalse\n解释：\n所有元素都不同。\n示例 3：\n输入：\nnums = [1,1,1,3,3,4,3,2,4,2]\n输出：\ntrue\n提示：\n1 \u0026lt;= nums.length \u0026lt;= 105 -109 \u0026lt;= nums[i] \u0026lt;= 109 解题过程 思路 只要将数组进行排序，然后依次比较相邻的元素就可以了。\n（ps：使用二次循环也是可以的，不过一般情况下会超时）\n代码实现 C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int cmp(const void* _a, const void* _b) { int a = *(int*)_a, b = *(int*)_b; return a - b; } bool containsDuplicate(int* nums, int numsSize) { qsort(nums, numsSize, sizeof(int), cmp); for (int i = 0; i \u0026lt; numsSize - 1; i++) { if (nums[i] == nums[i + 1]) { return true; } } return false; } Java 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public boolean containsDuplicate(int[] nums) { Arrays.sort(nums); int n = nums.length; for (int i = 0; i \u0026lt; n - 1; i++) { if (nums[i] == nums[i + 1]) { return true; } } return false; } } ","date":"2024-11-17T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/","title":"算法训练——存在重复元素"},{"content":"题目描述 给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。\n示例 1:\n1 2 3 4 5 6 输入: nums = [1,2,3,4,5,6,7], k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右轮转 1 步: [7,1,2,3,4,5,6] 向右轮转 2 步: [6,7,1,2,3,4,5] 向右轮转 3 步: [5,6,7,1,2,3,4] 示例 2:\n1 2 3 4 5 输入：nums = [-1,-100,3,99], k = 2 输出：[3,99,-1,-100] 解释: 向右轮转 1 步: [99,-1,-100,3] 向右轮转 2 步: [3,99,-1,-100] 提示：\n1 \u0026lt;= nums.length \u0026lt;= 105 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 0 \u0026lt;= k \u0026lt;= 105 进阶：\n尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？ 解题思路 方法一 新建一个数组，以新的下标写入。然后再覆盖回原来的数组。\nC 1 2 3 4 5 6 7 8 9 10 11 void rotate(int* nums, int numsSize, int k) { int newArr[numsSize]; for(int i = 0; i\u0026lt;numsSize;i++) { newArr[(i+k) % numsSize] = nums[i]; } for(int i = 0; i\u0026lt;numsSize;i++) { nums[i] = newArr[i]; } } Java 1 2 3 4 5 6 7 8 9 10 11 class Solution { public void rotate(int[] nums, int k) { int[] newarr = new int[nums.length]; for (int i = 0; i \u0026lt; nums.length; i++) { newarr[(i + k) % nums.length] = nums[i]; } for (int i = 0; i \u0026lt; nums.length; i++) { nums[i] = newarr[i]; } } } 方法二 这里引用官方给的题解 https://leetcode.cn/problems/rotate-array/solutions/551039/xuan-zhuan-shu-zu-by-leetcode-solution-nipk/\n方法一中使用额外数组的原因在于如果我们直接将每个数字放至它最后的位置，这样被放置位置的元素会被覆盖从而丢失。因此，从另一个角度，我们可以将被替换的元素保存在变量 temp 中，从而避免了额外数组的开销。\n我们从位置 0 开始，最初令 temp=nums[0]。根据规则，位置 0 的元素会放至 (0+k)modn 的位置，令 x=(0+k)modn，此时交换 temp 和 nums[x]，完成位置 x 的更新。然后，我们考察位置 x，并交换 temp 和 nums[(x+k)modn]，从而完成下一个位置的更新。不断进行上述过程，直至回到初始位置 0。\n容易发现，当回到初始位置 0 时，有些数字可能还没有遍历到，此时我们应该从下一个数字开始重复的过程，可是这个时候怎么才算遍历结束呢？我们不妨先考虑这样一个问题：从 0 开始不断遍历，最终回到起点 0 的过程中，我们遍历了多少个元素？\n由于最终回到了起点，故该过程恰好走了整数数量的圈，不妨设为 a 圈；再设该过程总共遍历了 b 个元素。因此，我们有 an=bk，即 an 一定为 n,k 的公倍数。又因为我们在第一次回到起点时就结束，因此 a 要尽可能小，故 an 就是 n,k 的最小公倍数 lcm(n,k)，因此 b 就为 lcm(n,k)/k。\n这说明单次遍历会访问到 lcm(n,k)/k 个元素。为了访问到所有的元素，我们需要进行遍历的次数为\nn/(lcm(n,k)/k)=nk/(lcm(n,k))=gcd(n,k) 其中 gcd 指的是最大公约数。\n我们用下面的例子更具体地说明这个过程：\n1 2 nums = [1, 2, 3, 4, 5, 6] k = 2 如果读者对上面的数学推导的理解有一定困难，也可以使用另外一种方式完成代码：使用单独的变量 count 跟踪当前已经访问的元素数量，当 count=n 时，结束遍历过程。\nC 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; } void swap(int* a, int* b) { int t = *a; *a = *b, *b = t; } void rotate(int* nums, int numsSize, int k) { k = k % numsSize; int count = gcd(k, numsSize); for (int start = 0; start \u0026lt; count; ++start) { int current = start; int prev = nums[start]; do { int next = (current + k) % numsSize; swap(\u0026amp;nums[next], \u0026amp;prev); current = next; } while (start != current); } } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public void rotate(int[] nums, int k) { int n = nums.length; k = k % n; int count = gcd(k, n); for (int start = 0; start \u0026lt; count; ++start) { int current = start; int prev = nums[start]; do { int next = (current + k) % n; int temp = nums[next]; nums[next] = prev; prev = temp; current = next; } while (start != current); } } public int gcd(int x, int y) { return y \u0026gt; 0 ? gcd(y, x % y) : x; } } ","date":"2024-11-16T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/","title":"算法训练——旋转数组"},{"content":"题目要求 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。\n在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。\n返回 你能获得的 最大 利润 。\n示例 1：\n1 2 3 4 5 输入：prices = [7,1,5,3,6,4] 输出：7 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。 最大总利润为 4 + 3 = 7 。 示例 2：\n1 2 3 4 输入：prices = [1,2,3,4,5] 输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。 最大总利润为 4 。 示例 3：\n1 2 3 输入：prices = [7,6,4,3,1] 输出：0 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。 提示：\n1 \u0026lt;= prices.length \u0026lt;= 3 * 104 0 \u0026lt;= prices[i] \u0026lt;= 104 解题过程 思路 题目要求得出最大利润，其实十分简单，只要能获利就卖出股票然后再购回，依次往下重复进行。\n代码实现 C 1 2 3 4 5 6 7 8 int maxProfit(int* prices, int pricesSize) { int sum = 0; for (int i = 1; i \u0026lt; pricesSize; i++) { if (prices[i - 1] \u0026lt; prices[i]) sum += prices[i] - prices[i - 1]; } return sum; } Java 1 2 3 4 5 6 7 8 9 class Solution { public int maxProfit(int[] prices) { int sum = 0; for (int i = 1; i \u0026lt; prices.length; i++) if (prices[i - 1] \u0026lt; prices[i]) sum += prices[i] - prices[i - 1]; return sum; } } ","date":"2024-11-15T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii/","title":"算法训练—— 买卖股票的最佳时机 II"},{"content":"题目要求 给你一个 非严格递增排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。\n考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：\n更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。 返回 k 。 判题标准:\n系统会用下面的代码来测试你的题解:\n1 2 3 4 5 6 7 8 9 int[] nums = [...]; // 输入数组 int[] expectedNums = [...]; // 长度正确的期望答案 int k = removeDuplicates(nums); // 调用 assert k == expectedNums.length; for (int i = 0; i \u0026lt; k; i++) { assert nums[i] == expectedNums[i]; } 如果所有断言都通过，那么您的题解将被 通过。\n示例 1：\n1 2 3 输入：nums = [1,1,2] 输出：2, nums = [1,2,_] 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例 2：\n1 2 3 输入：nums = [0,0,1,1,1,2,2,3,3,4] 输出：5, nums = [0,1,2,3,4] 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。 提示：\n1 \u0026lt;= nums.length \u0026lt;= 3 * 104\n-104 \u0026lt;= nums[i] \u0026lt;= 104\nnums 已按 非严格递增 排列\n解题过程 思路 题目中已经给出原数组，数组nums是非严格递增序列的（如示例），题目要求删除重复的元素，并且覆盖原数组，然后返回覆盖后数组的元素个数。\n由于结果是覆盖原数组，并且数组元素存在规律，所以在运算过程中，应以数组下标的运算进行修改。\n那么考虑如何修改下标。\n我们可以先定义两个下标fast，slow，初值均为1（因为数组下标为0的元素不需要改变）。\n然后fast负责遍历原数组，slow负责修改原数组。（两个过程同时进行）\n当fast对应的值与fast-1对应的值不同时，令slow对应的值修改为fast的值，然后slow自增。\n当fast等于数组长度时，循环结束。\n此时，slow的大小即为所求数组长度。（因为在每次修改之后slow已经+1，而此时slow对应的数组元素为待修改，所以数组长度不是slow+1）\n代码实现 c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int removeDuplicates(int* nums, int numsSize) {/*在编写代码的页面已直接给出numsSize变量*/ if(numsSize == 0) return 0; int fast=1,slow=1; while(fast\u0026lt;numsSize) { if(nums[fast-1] != nums[fast]) { nums[slow] = nums[fast]; slow++; } fast++; } return slow; } Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int removeDuplicates(int[] nums) { if(nums.length == 0) return 0; int fast=1,slow=1; while(fast \u0026lt; nums.length) { if(nums[fast - 1] != nums[fast]) { nums[slow] = nums[fast]; slow++; } fast++; } return slow; } } ","date":"2024-11-14T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/GSVfYy-WwAA-p5z.jpg","permalink":"https://AXiao-HOLO.github.io/p/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","title":"算法训练—— 删除有序数组中的重复项"},{"content":" 课程目标 能够熟练使用Math类中的常见方法\n能够熟练使用System类中的常见方法\n能够理解Object类的常见方法作用\n能够熟练使用Objects类的常见方法\n能够熟练使用BigInteger类的常见方法\n能够熟练使用BigDecimal类的常见方法\n1 Math类 1.1 概述 tips：了解内容\n查看API文档，我们可以看到API文档中关于Math类的定义如下：\nMath类所在包为java.lang包，因此在使用的时候不需要进行导包。并且Math类被final修饰了，因此该类是不能被继承的。\nMath类包含执行基本数字运算的方法，我们可以使用Math类完成基本的数学运算。\n要想使用Math类我们就需要先创建该类的对象，那么创建对象就需要借助于构造方法。因此我们就需要首先查看一下API文档，看看API文档中针对Math类有没有提供对应的构造方法。通过API文档来查看\n一下Math类的成员，如下所示：\n在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建Math类的对象。同时我们发现Math类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用。在Math类中\n定义了很多数学运算的方法，但是我们并不可能将所有的方法学习一遍，我们主要学习的就是一些常见的方法。\n1.2 常见方法 tips：重点讲解内容\n常见方法介绍\n我们要学习的Math的常见方法如下所示：\n1 2 3 4 5 6 7 8 public static int abs(int a)\t// 返回参数的绝对值 public static double ceil(double a)\t// 返回大于或等于参数的最小整数 public static double floor(double a)\t// 返回小于或等于参数的最大整数 public static int round(float a)\t// 按照四舍五入返回最接近参数的int类型的值 public static int max(int a,int b)\t// 获取两个int值中的较大值 public static int min(int a,int b)\t// 获取两个int值中的较小值 public static double pow (double a,double b)\t// 计算a的b次幂的值 public static double random()\t// 返回一个[0.0,1.0)的随机值 案例演示\n接下来我们就来演示一些这些方法的执行效果，如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class MathDemo01 { public static void main(String[] args) { // public static int abs(int a) 返回参数的绝对值 System.out.println(\u0026#34;-2的绝对值为：\u0026#34; + Math.abs(-2)); System.out.println(\u0026#34;2的绝对值为：\u0026#34; + Math.abs(2)); // public static double ceil(double a) 返回大于或等于参数的最小整数 System.out.println(\u0026#34;大于或等于23.45的最小整数位：\u0026#34; + Math.ceil(23.45)); System.out.println(\u0026#34;大于或等于-23.45的最小整数位：\u0026#34; + Math.ceil(-23.45)); // public static double floor(double a) 返回小于或等于参数的最大整数 System.out.println(\u0026#34;小于或等于23.45的最大整数位：\u0026#34; + Math.floor(23.45)); System.out.println(\u0026#34;小于或等于-23.45的最大整数位：\u0026#34; + Math.floor(-23.45)); // public static int round(float a) 按照四舍五入返回最接近参数的int System.out.println(\u0026#34;23.45四舍五入的结果为：\u0026#34; + Math.round(23.45)); System.out.println(\u0026#34;23.55四舍五入的结果为：\u0026#34; + Math.round(23.55)); // public static int max(int a,int b) 返回两个int值中的较大值 System.out.println(\u0026#34;23和45的最大值为: \u0026#34; + Math.max(23, 45)); // public static int min(int a,int b) 返回两个int值中的较小值 System.out.println(\u0026#34;12和34的最小值为: \u0026#34; + Math.min(12 , 34)); // public static double pow (double a,double b)返回a的b次幂的值 System.out.println(\u0026#34;2的3次幂计算结果为: \u0026#34; + Math.pow(2,3)); // public static double random()返回值为double的正值，[0.0,1.0) System.out.println(\u0026#34;获取到的0-1之间的随机数为: \u0026#34; + Math.random()); } } 运行程序进行测试，控制台输出结果如下：\n1 2 3 4 5 6 7 8 9 10 11 12 -2的绝对值为：2 2的绝对值为：2 大于或等于23.45的最小整数位：24.0 大于或等于-23.45的最小整数位：-23.0 小于或等于23.45的最大整数位：23.0 小于或等于-23.45的最大整数位：-24.0 23.45四舍五入的结果为：23 23.55四舍五入的结果为：24 23和45的最大值为: 45 12和34的最小值为: 12 2的3次幂计算结果为: 8.0 获取到的0-1之间的随机数为: 0.7322484131745958 1.3 算法小题(质数) 需求：\n​\t判断一个数是否为一个质数\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class MathDemo2 { public static void main(String[] args) { //判断一个数是否为一个质数 System.out.println(isPrime(997)); //997 2~996 995次 } public static boolean isPrime(int number) { int count = 0; for (int i = 2; i \u0026lt;= Math.sqrt(number); i++) { count++; if (number % i == 0) { return false; } } System.out.println(count); return true; } } 1.4 算法小题(自幂数) 自幂数，一个n位自然数等于自身各个数位上数字的n次幂之和\n​\t举例1：三位数 1^3 + 5^3 + 3^3 = 153\n​\t举例2：四位数 1^4 + 6^4 + 3^4 + 4^3 = 1634\n如果自幂数是：\n一位自幂数，也叫做：独身数 三位自幂数：水仙花数 四位自幂数：四叶玫瑰数 五位自幂数：五角星数 六位自幂数：六合数 七位自幂数：北斗七星数 八位自幂数：八仙数 九位自幂数：九九重阳数 十位自幂数：十全十美数 要求1：统计一共有多少个水仙花数。\n要求2：（课后作业）证明没有两位的自幂数。\n要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //水仙花数:100 ~ 999 int count = 0; //得到每一个三位数 for (int i = 100; i \u0026lt;= 999; i++) { //个位 十位 百位 int ge = i % 10; int shi = i / 10 % 10; int bai = i / 100 % 10; //判断: //每一位的三次方之和 跟本身 进行比较。 double sum = Math.pow(ge, 3) + Math.pow(shi, 3) + Math.pow(bai, 3); if (sum == i) { count++; //System.out.println(i); System.out.println(count); } } 1.5 课后练习 要求2：（课后作业）证明没有两位的自幂数。\n要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）\n2 System类 2.1 概述 tips：了解内容\n查看API文档，我们可以看到API文档中关于System类的定义如下：\nSystem类所在包为java.lang包，因此在使用的时候不需要进行导包。并且System类被final修饰了，因此该类是不能被继承的。\nSystem包含了系统操作的一些常用的方法。比如获取当前时间所对应的毫秒值，再比如终止当前JVM等等。\n要想使用System类我们就需要先创建该类的对象，那么创建对象就需要借助于构造方法。因此我们就需要首先查看一下API文档，看看API文档中针对System类有没有提供对应的构造方法。通过API文档来\n查看一下System类的成员，如下所示：\n在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建System类的对象。同时我们发现System类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用（Nested\nClass Summary内部类或者内部接口的描述）。\n2.2 常见方法 tips：重点讲解内容\n常见方法介绍\n我们要学习的System类中的常见方法如下所示：\n1 2 3 public static long currentTimeMillis()\t// 获取当前时间所对应的毫秒值（当前时间为0时区所对应的时间即就是英国格林尼治天文台旧址所在位置） public static void exit(int status)\t// 终止当前正在运行的Java虚拟机，0表示正常退出，非零表示异常退出 public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); // 进行数值元素copy 案例演示\n接下来我们就来通过一些案例演示一下这些方法的特点。\n案例1：演示currentTimeMillis方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class SystemDemo01 { public static void main(String[] args) { // 获取当前时间所对应的毫秒值 long millis = System.currentTimeMillis(); // 输出结果 System.out.println(\u0026#34;当前时间所对应的毫秒值为：\u0026#34; + millis); } } 运行程序进行测试，控制台的输出结果如下：\n1 当前时间所对应的毫秒值为：1576050298343 获取到当前时间的毫秒值的意义：我们常常来需要统计某一段代码的执行时间。此时我们就可以在执行这段代码之前获取一次时间，在执行完毕以后再次获取一次系统时间，然后计算两个时间的差值，\n这个差值就是这段代码执行完毕以后所需要的时间。如下代码所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class SystemDemo2 { public static void main(String[] args) { //判断1~100000之间有多少个质数 long start = System.currentTimeMillis(); for (int i = 1; i \u0026lt;= 100000; i++) { boolean flag = isPrime2(i); if (flag) { System.out.println(i); } } long end = System.currentTimeMillis(); //获取程序运行的总时间 System.out.println(end - start); //方式一：1514 毫秒 方式二：71毫秒 } //以前判断是否为质数的方式 public static boolean isPrime1(int number) { for (int i = 2; i \u0026lt; number; i++) { if (number % i == 0) { return false; } } return true; } //改进之后判断是否为质数的方式（效率高） public static boolean isPrime2(int number) { for (int i = 2; i \u0026lt;= Math.sqrt(number); i++) { if (number % i == 0) { return false; } } return true; } } 案例2：演示exit方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class SystemDemo01 { public static void main(String[] args) { // 输出 System.out.println(\u0026#34;程序开始执行了.....\u0026#34;); // 终止JVM System.exit(0); // 输出 System.out.println(\u0026#34;程序终止了..........\u0026#34;); } } 运行程序进行测试，控制台输出结果如下：\n1 程序开始执行了..... 此时可以看到在控制台只输出了\u0026quot;程序开始了\u0026hellip;\u0026quot;，由于JVM终止了，因此输出\u0026quot;程序终止了\u0026hellip;\u0026ldquo;这段代码没有被执行。\n案例3：演示arraycopy方法\n方法参数说明：\n1 2 3 4 5 6 // src: 源数组 // srcPos： 源数值的开始位置 // dest： 目标数组 // destPos： 目标数组开始位置 // length: 要复制的元素个数 public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); 代码如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class SystemDemo01 { public static void main(String[] args) { // 定义源数组 int[] srcArray = {23 , 45 , 67 , 89 , 14 , 56 } ; // 定义目标数组 int[] desArray = new int[10] ; // 进行数组元素的copy: 把srcArray数组中从0索引开始的3个元素，从desArray数组中的1索引开始复制过去 System.arraycopy(srcArray , 0 , desArray , 1 , 3); // 遍历目标数组 for(int x = 0 ; x \u0026lt; desArray.length ; x++) { if(x != desArray.length - 1) { System.out.print(desArray[x] + \u0026#34;, \u0026#34;); }else { System.out.println(desArray[x]); } } } } 运行程序进行测试，控制台输出结果如下所示：\n1 0, 23, 45, 67, 0, 0, 0, 0, 0, 0 通过控制台输出结果我们可以看到，数组元素的确进行复制了。\n使用这个方法我们也可以完成数组元素的删除操作，如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class SystemDemo02 { public static void main(String[] args) { // 定义一个数组 int[] srcArray = {23 , 45 , 67 , 89 , 14 , 56 } ; // 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可 System.arraycopy(srcArray , 3 , srcArray , 2 , 3); // 遍历srcArray数组 for(int x = 0 ; x \u0026lt; srcArray.length ; x++) { if(x != desArray.length - 1) { System.out.print(srcArray[x] + \u0026#34;, \u0026#34;); }else { System.out.println(srcArray[x]); } } } } 运行程序进行测试，控制台的输出结果如下所示：\n1 23, 45, 89, 14, 56, 56 通过控制台输出结果我们可以看到此时多出了一个56元素，此时我们只需要将最后一个位置设置为0即可。如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class SystemDemo02 { public static void main(String[] args) { // 定义一个数组 int[] srcArray = {23 , 45 , 67 , 89 , 14 , 56 } ; // 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可 System.arraycopy(srcArray , 3 , srcArray , 2 , 3); // 将最后一个位置的元素设置为0 srcArray[srcArray.length - 1] = 0 ; // 遍历srcArray数组 for(int x = 0 ; x \u0026lt; srcArray.length ; x++) { if(x != srcArray.length - 1 ) { System.out.print(srcArray[x] + \u0026#34;, \u0026#34;); }else { System.out.println(srcArray[x]); } } } } 运行程序进行测试，控制台输出结果如下所示：\n1 23, 45, 89, 14, 56, 0 此时我们可以看到元素\u0026quot;67\u0026quot;已经被删除掉了。67后面的其他元素依次向前进行移动了一位。\narraycopy方法底层细节：\n1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错\n2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错\n3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 public class SystemDemo3 { public static void main(String[] args) { //public static void arraycopy(数据源数组，起始索引，目的地数组，起始索引，拷贝个数) 数组拷贝 //细节: //1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错 //2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错 //3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型 Student s1 = new Student(\u0026#34;zhangsan\u0026#34;, 23); Student s2 = new Student(\u0026#34;lisi\u0026#34;, 24); Student s3 = new Student(\u0026#34;wangwu\u0026#34;, 25); Student[] arr1 = {s1, s2, s3}; Person[] arr2 = new Person[3]; //把arr1中对象的地址值赋值给arr2中 System.arraycopy(arr1, 0, arr2, 0, 3); //遍历数组arr2 for (int i = 0; i \u0026lt; arr2.length; i++) { Student stu = (Student) arr2[i]; System.out.println(stu.getName() + \u0026#34;,\u0026#34; + stu.getAge()); } } } class Person { private String name; private int age; public Person() { } public Person(String name, int age) { this.name = name; this.age = age; } /** * 获取 * * @return name */ public String getName() { return name; } /** * 设置 * * @param name */ public void setName(String name) { this.name = name; } /** * 获取 * * @return age */ public int getAge() { return age; } /** * 设置 * * @param age */ public void setAge(int age) { this.age = age; } public String toString() { return \u0026#34;Person{name = \u0026#34; + name + \u0026#34;, age = \u0026#34; + age + \u0026#34;}\u0026#34;; } } class Student extends Person { public Student() { } public Student(String name, int age) { super(name, age); } } 3 Runtime 3.1 概述 ​\tRuntime表示Java中运行时对象，可以获取到程序运行时设计到的一些信息\n3.2 常见方法 常见方法介绍\n我们要学习的Object类中的常见方法如下所示：\n1 2 3 4 5 6 7 public static Runtime getRuntime()\t//当前系统的运行环境对象 public void exit(int status)\t//停止虚拟机 public int availableProcessors()\t//获得CPU的线程数 public long maxMemory()\t//JVM能从系统中获取总内存大小（单位byte） public long totalMemory()\t//JVM已经从系统中获取总内存大小（单位byte） public long freeMemory()\t//JVM剩余内存大小（单位byte） public Process exec(String command) //运行cmd命令 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 public class RunTimeDemo1 { public static void main(String[] args) throws IOException { /* public static Runtime getRuntime() 当前系统的运行环境对象 public void exit(int status) 停止虚拟机 public int availableProcessors() 获得CPU的线程数 public long maxMemory() JVM能从系统中获取总内存大小(单位byte) public long totalMemory() JVM已经从系统中获取总内存大小(单位byte) public long freeMemory() JVM剩余内存大小(单位byte) public Process exec(string command) 运行cmd命令 */ //1.获取Runtime的对象 //Runtime r1 =Runtime.getRuntime(); //2.exit 停止虚拟机 //Runtime.getRuntime().exit(0); //System.out.println(\u0026#34;看看我执行了吗?\u0026#34;); //3.获得CPU的线程数 System.out.println(Runtime.getRuntime().availableProcessors());//8 //4.总内存大小,单位byte字节 System.out.println(Runtime.getRuntime().maxMemory() / 1024 / 1024);//4064 //5.已经获取的总内存大小,单位byte字节 System.out.println(Runtime.getRuntime().totalMemory() / 1024 / 1024);//254 //6.剩余内存大小 System.out.println(Runtime.getRuntime().freeMemory() / 1024 / 1024);//251 //7.运行cmd命令 //shutdown :关机 //加上参数才能执行 //-s :默认在1分钟之后关机 //-s -t 指定时间 : 指定关机时间 //-a :取消关机操作 //-r: 关机并重启 Runtime.getRuntime().exec(\u0026#34;shutdown -s -t 3600\u0026#34;); } } 3.3 恶搞好基友 需求：\n​\t界面上方按钮默认隐藏\n​\t界面中间有一个提示文本和三个按钮\n​\t当你的好基友点击中间三个按钮的时候就在N秒之后关机，不同的按钮N的值不一样\n​\t任意一个按钮被点击之后，上方了按钮出现。当点击上方按钮之后取消关机任务\n1 2 3 4 5 public class Test { public static void main(String[] args) { new MyJframe(); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 public class MyJframe extends JFrame implements ActionListener { JButton yesBut = new JButton(\u0026#34;帅爆了\u0026#34;); JButton midBut = new JButton(\u0026#34;一般般吧\u0026#34;); JButton noBut = new JButton(\u0026#34;不帅，有点磕碜\u0026#34;); JButton dadBut = new JButton(\u0026#34;饶了我吧！\u0026#34;); //决定了上方的按钮是否展示 boolean flag = false; public MyJframe() { initJFrame(); initView(); //显示 this.setVisible(true); } private void initView() { this.getContentPane().removeAll(); if (flag) { //展示按钮 dadBut.setBounds(50, 20, 100, 30); dadBut.addActionListener(this); this.getContentPane().add(dadBut); } JLabel text = new JLabel(\u0026#34;你觉得自己帅吗？\u0026#34;); text.setFont(new Font(\u0026#34;微软雅黑\u0026#34;, 0, 30)); text.setBounds(120, 150, 300, 50); yesBut.setBounds(200, 250, 100, 30); midBut.setBounds(200, 325, 100, 30); noBut.setBounds(160, 400, 180, 30); yesBut.addActionListener(this); midBut.addActionListener(this); noBut.addActionListener(this); this.getContentPane().add(text); this.getContentPane().add(yesBut); this.getContentPane().add(midBut); this.getContentPane().add(noBut); this.getContentPane().repaint(); } private void initJFrame() { //设置宽高 this.setSize(500, 600); //设置标题 this.setTitle(\u0026#34;恶搞好基友\u0026#34;); //设置关闭模式 this.setDefaultCloseOperation(3); //置顶 this.setAlwaysOnTop(true); //居中 this.setLocationRelativeTo(null); //取消内部默认布局 this.setLayout(null); } @Override public void actionPerformed(ActionEvent e) { Object obj = e.getSource(); if (obj == yesBut) { //给好基友一个弹框 showJDialog(\u0026#34;xxx，你太自信了，给你一点小惩罚\u0026#34;); try { Runtime.getRuntime().exec(\u0026#34;shutdown -s -t 3600\u0026#34;); } catch (IOException ioException) { ioException.printStackTrace(); } flag = true; initView(); } else if (obj == midBut) { System.out.println(\u0026#34;你的好基友点击了一般般吧\u0026#34;); //给好基友一个弹框 showJDialog(\u0026#34;xxx，你还是太自信了，也要给你一点小惩罚\u0026#34;); try { Runtime.getRuntime().exec(\u0026#34;shutdown -s -t 7200\u0026#34;); } catch (IOException ioException) { ioException.printStackTrace(); } flag = true; initView(); } else if (obj == noBut) { System.out.println(\u0026#34;你的好基友点击了不帅\u0026#34;); //给好基友一个弹框 showJDialog(\u0026#34;xxx，你还是有一点自知之明的，也要给你一点小惩罚\u0026#34;); try { Runtime.getRuntime().exec(\u0026#34;shutdown -s -t 1800\u0026#34;); } catch (IOException ioException) { ioException.printStackTrace(); } flag = true; initView(); } else if (obj == dadBut) { //给好基友一个弹框 showJDialog(\u0026#34;xxx，这次就饶了你~\u0026#34;); try { Runtime.getRuntime().exec(\u0026#34;shutdown -a\u0026#34;); } catch (IOException ioException) { ioException.printStackTrace(); } } } public void showJDialog(String content) { //创建一个弹框对象 JDialog jDialog = new JDialog(); //给弹框设置大小 jDialog.setSize(200, 150); //让弹框置顶 jDialog.setAlwaysOnTop(true); //让弹框居中 jDialog.setLocationRelativeTo(null); //弹框不关闭永远无法操作下面的界面 jDialog.setModal(true); //创建Jlabel对象管理文字并添加到弹框当中 JLabel warning = new JLabel(content); warning.setBounds(0, 0, 200, 150); jDialog.getContentPane().add(warning); //让弹框展示出来 jDialog.setVisible(true); } } 4 Object类 4.1 概述 tips：重点讲解内容\n查看API文档，我们可以看到API文档中关于Object类的定义如下：\nObject类所在包是java.lang包。Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类；换句话说，该类所具备的方法，其他所有类都继承了。\n查看API文档我们可以看到，在Object类中提供了一个无参构造方法，如下所示：\n但是一般情况下我们很少去主动的创建Object类的对象，调用其对应的方法。更多的是创建Object类的某个子类对象，然后通过子类对象调用Object类中的方法。\n4.2 常见方法 tips：重点讲解内容\n常见方法介绍\n我们要学习的Object类中的常见方法如下所示：\n1 2 3 public String toString()\t//返回该对象的字符串表示形式(可以看做是对象的内存地址值) public boolean equals(Object obj)\t//比较两个对象地址值是否相等；true表示相同，false表示不相同 protected Object clone() //对象克隆 案例演示\n接下来我们就来通过一些案例演示一下这些方法的特点。\n案例1：演示toString方法\n实现步骤：\n创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get/set方法 创建一个测试类（ObjectDemo01），在测试类的main方法中去创建学生对象，然后调用该对象的toString方法获取该对象的字符串表现形式，并将结果进行输出 如下所示：\nStudent类\n1 2 3 4 5 6 7 8 9 public class Student { private String name ; // 姓名 private String age ; // 年龄 // 无参构造方法和有参构造方法以及get和set方法略 ... } ObjectDemo01测试类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class ObjectDemo01 { public static void main(String[] args) { // 创建学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用toString方法获取s1对象的字符串表现形式 String result1 = s1.toString(); // 输出结果 System.out.println(\u0026#34;s1对象的字符串表现形式为：\u0026#34; + result1); } } 运行程序进行测试，控制台输出结果如下所示：\n1 s1对象的字符串表现形式为：com.itheima.api.system.demo04.Student@3f3afe78 为什么控制台输出的结果为：com.itheima.api.system.demo04.Student@3f3afe78； 此时我们可以查看一下Object类中toString方法的源码，如下所示：\n1 2 3 public String toString() {\t// Object类中toString方法的源码定义 return getClass().getName() + \u0026#34;@\u0026#34; + Integer.toHexString(hashCode()); } 其中getClass().getName()对应的结果就是：com.itheima.api.system.demo04.Student；Integer.toHexString(hashCode())对应的结果就是3f3afe78。\n我们常常将\u0026quot;com.itheima.api.system.demo04.Student@3f3afe78\u0026quot;这一部分称之为对象的内存地址值。但是一般情况下获取对象的内存地址值没有太大的意义。获取对象的成员变量的字符串拼接形式才\n算有意义，怎么实现呢？此时我们就需要在Student类中重写Object的toString方法。我们可以通过idea开发工具进行实现，具体步骤如下所示：\n在空白处使用快捷键：alt + insert。此时会弹出如下的对话框 选择toString，此时会弹出如下的对话框 同时选择name和age属性，点击OK。此时就会完成toString方法的重写，代码如下所示：\n1 2 3 4 5 6 7 @Override public String toString() { return \u0026#34;Student{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#39;\u0026#34; + age + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } 这段代码就是把Student类中的成员变量进行了字符串的拼接。重写完毕以后，再次运行程序，控制台输出结果如下所示：\n1 s1对象的字符串表现形式为：Student{name=\u0026#39;itheima\u0026#39;, age=\u0026#39;14\u0026#39;} 此时我们就可以清楚的查看Student的成员变量值，因此重写toString方法的意义就是以良好的格式，更方便的展示对象中的属性值\n我们再来查看一下如下代码的输出：\n1 2 3 4 5 // 创建学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 直接输出对象s1 System.out.println(s1); 运行程序进行测试，控制台输出结果如下所示：\n1 Student{name=\u0026#39;itheima\u0026#39;, age=\u0026#39;14\u0026#39;} 我们可以看到和刚才的输出结果是一致的。那么此时也就证明直接输出一个对象，那么会默认调用对象的toString方法，因此如上代码的等同于如下代码：\n1 2 3 4 5 // 创建学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用s1的toString方法，把结果进行输出 System.out.println(s1.toString()); 因此后期为了方便进行测试，我们常常是通过输出语句直接输出一个对象的名称。\n小结：\n在通过输出语句输出一个对象时，默认调用的就是toString()方法 输出地址值一般没有意义，我们可以通过重写toString方法去输出对应的成员变量信息（快捷键：atl + insert ， 空白处 右键 -\u0026gt; Generate -\u0026gt; 选择toString） toString方法的作用：以良好的格式，更方便的展示对象中的属性值 一般情况下Jdk所提供的类都会重写Object类中的toString方法 案例2：演示equals方法\n实现步骤：\n在测试类（ObjectDemo02）的main方法中，创建两个学生对象，然后比较两个对象是否相同 代码如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class ObjectDemo02 { public static void main(String[] args) { // 创建两个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; Student s2 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 比较两个对象是否相等 System.out.println(s1 == s2); } } 运行程序进行测试，控制台的输出结果如下所示：\n1 false 因为\u0026rdquo;==\u0026ldquo;号比较的是对象的地址值，而我们通过new关键字创建了两个对象，它们的地址值是不相同的。因此比较结果就是false。\n我们尝试调用Object类中的equals方法进行比较，代码如下所示：\n1 2 3 4 5 // 调用equals方法比较两个对象是否相等 boolean result = s1.equals(s2); // 输出结果 System.out.println(result); 运行程序进行测试，控制台的输出结果为：\n1 false 为什么结果还是false呢？我们可以查看一下Object类中equals方法的源码，如下所示：\n1 2 3 public boolean equals(Object obj) {\t// Object类中的equals方法的源码 return (this == obj); } 通过源码我们可以发现默认情况下equals方法比较的也是对象的地址值。比较内存地址值一般情况下是没有意义的，我们希望比较的是对象的属性，如果两个对象的属性相同，我们认为就是同一个对象；\n那么要比较对象的属性，我们就需要在Student类中重写Object类中的equals方法。equals方法的重写，我们也可以使用idea开发工具完成，具体的操作如下所示：\n在空白处使用快捷键：alt + insert。此时会弹出如下的对话框 选择equals() and hashCode()方法，此时会弹出如下的对话框 点击next，会弹出如下对话框：\n选择neme和age属性点击next，此时就会弹出如下对话框：\n取消name和age属性（因为此时选择的是在生成hashCode方法时所涉及到的属性，关于hashCode方法后期再做重点介绍），点击Finish完成生成操作。生成的equals方法和hashCode方法如下：\n1 2 3 4 5 6 7 8 9 10 11 12 @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return Objects.equals(name, student.name) \u0026amp;\u0026amp; Objects.equals(age, student.age);\t// 比较的是对象的name属性值和age属性值 } @Override public int hashCode() { return 0; } hashCode方法我们暂时使用不到，可以将hashCode方法删除。重写完毕以后运行程序进行测试，控制台输出结果如下所示：\n1 true 此时equals方法比较的是对象的成员变量值，而s1和s2两个对象的成员变量值都是相同的。因此比较完毕以后的结果就是true。\n小结：\n默认情况下equals方法比较的是对象的地址值 比较对象的地址值是没有意义的，因此一般情况下我们都会重写Object类中的equals方法 案例2：对象克隆\n​\t把A对象的属性值完全拷贝给B对象，也叫对象拷贝,对象复制\n对象克隆的分类：\n深克隆和浅克隆\n浅克隆：\n​\t不管对象内部的属性是基本数据类型还是引用数据类型，都完全拷贝过来\n​\t基本数据类型拷贝过来的是具体的数据，引用数据类型拷贝过来的是地址值。\n​\tObject类默认的是浅克隆\n深克隆：\n​\t基本数据类型拷贝过来，字符串复用，引用数据类型会重新创建新的\n代码实现：\npackage com.itheima.a04objectdemo; public class ObjectDemo4 { public static void main(String[] args) throws CloneNotSupportedException { // protected object clone(int a) 对象克隆 //1.先创建一个对象 int[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}; User u1 = new User(1, \u0026#34;zhangsan\u0026#34;, \u0026#34;1234qwer\u0026#34;, \u0026#34;girl11\u0026#34;, data); //2.克隆对象 //细节: //方法在底层会帮我们创建一个对象,并把原对象中的数据拷贝过去。 //书写细节: //1.重写Object中的clone方法 //2.让javabean类实现Cloneable接口 //3.创建原对象并调用clone就可以了 //User u2 =(User)u1.clone(); //验证一件事情：Object中的克隆是浅克隆 //想要进行深克隆，就需要重写clone方法并修改里面的方法体 //int[] arr = u1.getData(); //arr[0] = 100; //System.out.println(u1); //System.out.println(u2); //以后一般会用第三方工具进行克隆 //1.第三方写的代码导入到项目中 //2.编写代码 //Gson gson =new Gson(); //把对象变成一个字符串 //String s=gson.toJson(u1); //再把字符串变回对象就可以了 //User user =gson.fromJson(s, User.class); //int[] arr=u1.getData(); //arr[0] = 100; //打印对象 //System.out.println(user); } } package com.itheima.a04objectdemo; import java.util.StringJoiner; //Cloneable //如果一个接口里面没有抽象方法 //表示当前的接口是一个标记性接口 //现在Cloneable表示一旦实现了，那么当前类的对象就可以被克降 //如果没有实现，当前类的对象就不能克隆 public class User implements Cloneable { private int id; private String username; private String password; private String path; private int[] data; public User() { } public User(int id, String username, String password, String path, int[] data) { this.id = id; this.username = username; this.password = password; this.path = path; this.data = data; } /** * 获取 * * @return id */ public int getId() { return id; } /** * 设置 * * @param id */ public void setId(int id) { this.id = id; } /** * 获取 * * @return username */ public String getUsername() { return username; } /** * 设置 * * @param username */ public void setUsername(String username) { this.username = username; } /** * 获取 * * @return password */ public String getPassword() { return password; } /** * 设置 * * @param password */ public void setPassword(String password) { this.password = password; } /** * 获取 * * @return path */ public String getPath() { return path; } /** * 设置 * * @param path */ public void setPath(String path) { this.path = path; } /** * 获取 * * @return data */ public int[] getData() { return data; } /** * 设置 * * @param data */ public void setData(int[] data) { this.data = data; } public String toString() { return \u0026#34;角色编号为：\u0026#34; + id + \u0026#34;，用户名为：\u0026#34; + username + \u0026#34;密码为：\u0026#34; + password + \u0026#34;, 游戏图片为:\u0026#34; + path + \u0026#34;, 进度:\u0026#34; + arrToString(); } public String arrToString() { StringJoiner sj = new StringJoiner(\u0026#34;, \u0026#34;, \u0026#34;[\u0026#34;, \u0026#34;]\u0026#34;); for (int i = 0; i \u0026lt; data.length; i++) { sj.add(data[i] + \u0026#34;\u0026#34;); } return sj.toString(); } @Override protected Object clone() throws CloneNotSupportedException { //调用父类中的clone方法 //相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去。 //先把被克隆对象中的数组获取出来 int[] data = this.data; //创建新的数组 int[] newData =new int[data.length]; //拷贝数组中的数据 for (int i = 0; i \u0026lt; data.length; i++) { newData[i] = data[i]; } //调用父类中的方法克隆对象 User u=(User)super.clone(); //因为父类中的克隆方法是浅克隆，替换克隆出来对象中的数组地址值 u.data =newData; return u; } } 5 Objects类 5.1 概述 tips：了解内容\n查看API文档，我们可以看到API文档中关于Objects类的定义如下：\nObjects类所在包是在java.util包下，因此在使用的时候需要进行导包。并且Objects类是被final修饰的，因此该类不能被继承。\nObjects类提供了一些对象常见操作的方法。比如判断对象是否相等，判断对象是否为null等等。\n接下来我们来查看一下API文档，看一下Objects类中的成员，如下所示：\n我们可以发现Objects类中无无参构造方法，因此我们不能使用new关键字去创建Objects的对象。同时我们可以发现Objects类中所提供的方法都是静态的。因此我们可以通过类名直接去调用这些方法。\n5.2 常见方法 tips：重点讲解内容\n常见方法介绍\n我们要重点学习的Objects类中的常见方法如下所示：\n1 2 3 4 public static String toString(Object o) // 获取对象的字符串表现形式 public static boolean equals(Object a, Object b)\t// 比较两个对象是否相等 public static boolean isNull(Object obj)\t// 判断对象是否为null public static boolean nonNull(Object obj)\t// 判断对象是否不为null 我们要了解的Objects类中的常见方法如下所示：\n1 2 3 public static \u0026lt;T\u0026gt; T requireNonNull(T obj)\t// 检查对象是否不为null,如果为null直接抛出异常；如果不是null返回该对象； public static \u0026lt;T\u0026gt; T requireNonNullElse(T obj, T defaultObj) // 检查对象是否不为null，如果不为null，返回该对象；如果为null返回defaultObj值 public static \u0026lt;T\u0026gt; T requireNonNullElseGet(T obj, Supplier\u0026lt;? extends T\u0026gt; supplier)\t// 检查对象是否不为null，如果不为null，返回该对象；如果\t// 为null,返回由Supplier所提供的值 上述方法中的T可以理解为是Object类型。\n案例演示\n接下来我们就来通过一些案例演示一下Objects类中的这些方法特点。\n案例1：演示重点学习方法\n实现步骤：\n创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get/set方法，并且重写toString方法和equals方法 创建一个测试类（ObjectsDemo01）, 在该类中编写测试代码 如下所示：\nStudent类\n1 2 3 4 5 6 7 8 9 public class Student { private String name ; // 姓名 private String age ; // 年龄 // 其他代码略 ... } ObjectsDemo01测试类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 public class ObjectsDemo01 { public static void main(String[] args) { // 调用方法 method_04() ; } // 测试nonNull方法 public static void method_04() { // 创建一个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects类中的nonNull方法 boolean result = Objects.nonNull(s1); // 输出结果 System.out.println(result); } // 测试isNull方法 public static void method_03() { // 创建一个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects类中的isNull方法 boolean result = Objects.isNull(s1); // 输出结果 System.out.println(result); } // 测试equals方法 public static void method_02() { // 创建两个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; Student s2 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects类中的equals方法，比较两个对象是否相等 boolean result = Objects.equals(s1, s2); // 如果Student没有重写Object类中的equals方法，此处比较的还是对象的地址值 // 输出结果 System.out.println(result); } // 测试toString方法 public static void method_01() { // 创建一个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects中的toString方法,获取s1对象的字符串表现形式 String result = Objects.toString(s1); // 如果Student没有重写Object类中的toString方法，此处还是返回的对象的地址值 // 输出结果 System.out.println(result); } } 案例2：演示需要了解的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 public class ObjectsDemo02 { public static void main(String[] args) { // 调用方法 method_03(); } // 演示requireNonNullElseGet public static void method_03() { // 创建一个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects对象的requireNonNullElseGet方法,该方法的第二个参数是Supplier类型的，查看源码我们发现Supplier是一个函数式接口, // 那么我们就可以为其传递一个Lambda表达式，而在Supplier接口中所定义的方法是无参有返回值的方法，因此具体调用所传入的Lambda表达式如下所示 Student student = Objects.requireNonNullElseGet(s1, () -\u0026gt; { return new Student(\u0026#34;itcast\u0026#34;, \u0026#34;14\u0026#34;); }); // 输出 System.out.println(student); } // 演示requireNonNullElse public static void method_02() { // 创建一个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects对象的requireNonNullElse方法 Student student = Objects.requireNonNullElse(s1, new Student(\u0026#34;itcast\u0026#34;, \u0026#34;14\u0026#34;)); // 输出 System.out.println(student); } // 演示requireNonNull public static void method_01() { // 创建一个学生对象 Student s1 = new Student(\u0026#34;itheima\u0026#34; , \u0026#34;14\u0026#34;) ; // 调用Objects对象的requireNonNull方法 Student student = Objects.requireNonNull(s1); // 输出 System.out.println(student); } } 注：了解性的方法可以可以作为扩展视频进行下发。\n6 BigInteger类 6.1 引入 ​\t平时在存储整数的时候，Java中默认是int类型，int类型有取值范围：-2147483648 ~ 2147483647。如果数字过大，我们可以使用long类型，但是如果long类型也表示不下怎么办呢？\n​\t就需要用到BigInteger，可以理解为：大的整数。\n​\t有多大呢？理论上最大到42亿的21亿次方\n​\t基本上在内存撑爆之前，都无法达到这个上限。\n6.2 概述 查看API文档，我们可以看到API文档中关于BigInteger类的定义如下：\nBigInteger所在包是在java.math包下，因此在使用的时候就需要进行导包。我们可以使用BigInteger类进行大整数的计算\n6.3 常见方法 构造方法\n1 2 3 4 5 6 public BigInteger(int num, Random rnd) //获取随机大整数，范围：[0 ~ 2的num次方-1] public BigInteger(String val) //获取指定的大整数 public BigInteger(String val, int radix) //获取指定进制的大整数 下面这个不是构造，而是一个静态方法获取BigInteger对象 public static BigInteger valueOf(long val) //静态方法获取BigInteger的对象，内部有优化 构造方法小结：\n如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取。 如果BigInteger表示的超出long的范围，可以用构造方法获取。 对象一旦创建，BigInteger内部记录的值不能发生改变。 只要进行计算都会产生一个新的BigInteger对象 常见成员方法\nBigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：\n1 2 3 4 5 6 7 8 9 public BigInteger add(BigInteger val)\t//加法 public BigInteger subtract(BigInteger val)\t//减法 public BigInteger multiply(BigInteger val)\t//乘法 public BigInteger divide(BigInteger val)\t//除法 public BigInteger[] divideAndRemainder(BigInteger val)\t//除法，获取商和余数 public boolean equals(Object x) //比较是否相同 public BigInteger pow(int exponent) //次幂、次方 public BigInteger max/min(BigInteger val) //返回较大值/较小值 public int intValue(BigInteger val) //转为int类型整数，超出范围数据有误 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 package com.itheima.a06bigintegerdemo; import java.math.BigInteger; public class BigIntegerDemo1 { public static void main(String[] args) { /* public BigInteger(int num, Random rnd) 获取随机大整数，范围:[0~ 2的num次方-11 public BigInteger(String val) 获取指定的大整数 public BigInteger(String val, int radix) 获取指定进制的大整数 public static BigInteger valueOf(long val) 静态方法获取BigInteger的对象，内部有优化 细节: 对象一旦创建里面的数据不能发生改变。 */ //1.获取一个随机的大整数 /* Random r=new Random(); for (int i = e; i \u0026lt; 100; i++) { BigInteger bd1 = new BigInteger(4,r); System.out.println(bd1);//[@ ~ 15]} } */ //2.获取一个指定的大整数，可以超出long的取值范围 //细节:字符串中必须是整数，否则会报错 /* BigInteger bd2 = new BigInteger(\u0026#34;1.1\u0026#34;); System.out.println(bd2); */ /* BigInteger bd3 = new BigInteger(\u0026#34;abc\u0026#34;); System.out.println(bd3); */ //3.获取指定进制的大整数 //细节: //1.字符串中的数字必须是整数 //2.字符串中的数字必须要跟进制吻合。 //比如二进制中，那么只能写日和1，写其他的就报错。 BigInteger bd4 = new BigInteger(\u0026#34;123\u0026#34;, 2); System.out.println(bd4); //4.静态方法获取BigInteger的对象，内部有优化 //细节: //1.能表示范围比较小，只能在long的取值范围之内，如果超出long的范围就不行了。 //2.在内部对常用的数字: -16 ~ 16 进行了优化。 // 提前把-16~16 先创建好BigInteger的对象，如果多次获取不会重新创建新的。 BigInteger bd5 = BigInteger.valueOf(16); BigInteger bd6 = BigInteger.valueOf(16); System.out.println(bd5 == bd6);//true BigInteger bd7 = BigInteger.valueOf(17); BigInteger bd8 = BigInteger.valueOf(17); System.out.println(bd7 == bd8);//false //5.对象一旦创建内部的数据不能发生改变 BigInteger bd9 =BigInteger.valueOf(1); BigInteger bd10 =BigInteger.valueOf(2); //此时，不会修改参与计算的BigInteger对象中的借，而是产生了一个新的BigInteger对象记录 BigInteger result=bd9.add(bd10); System.out.println(result);//3 } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 package com.itheima.a06bigintegerdemo; import java.math.BigInteger; public class BigIntegerDemo2 { public static void main(String[] args) { /* public BigInteger add(BigInteger val) 加法 public BigInteger subtract(BigInteger val) 减法 public BigInteger multiply(BigInteger val) 乘法 public BigInteger divide(BigInteger val) 除法，获取商 public BigInteger[] divideAndRemainder(BigInteger val) 除法，获取商和余数 public boolean equals(Object x) 比较是否相同 public BigInteger pow(int exponent) 次幂 public BigInteger max/min(BigInteger val) 返回较大值/较小值 public int intValue(BigInteger val) 转为int类型整数，超出范围数据有误 */ //1.创建两个BigInteger对象 BigInteger bd1 = BigInteger.valueOf(10); BigInteger bd2 = BigInteger.valueOf(5); //2.加法 BigInteger bd3 = bd1.add(bd2); System.out.println(bd3); //3.除法，获取商和余数 BigInteger[] arr = bd1.divideAndRemainder(bd2); System.out.println(arr[0]); System.out.println(arr[1]); //4.比较是否相同 boolean result = bd1.equals(bd2); System.out.println(result); //5.次幂 BigInteger bd4 = bd1.pow(2); System.out.println(bd4); //6.max BigInteger bd5 = bd1.max(bd2); //7.转为int类型整数，超出范围数据有误 /* BigInteger bd6 = BigInteger.valueOf(2147483647L); int i = bd6.intValue(); System.out.println(i); */ BigInteger bd6 = BigInteger.valueOf(200); double v = bd6.doubleValue(); System.out.println(v);//200.0 } } 6.4 底层存储方式： 对于计算机而言，其实是没有数据类型的概念的，都是0101010101，数据类型是编程语言自己规定的，所以在实际存储的时候，先把具体的数字变成二进制，每32个bit为一组，存储在数组中。\n数组中最多能存储元素个数：21亿多\n数组中每一位能表示的数字：42亿多\n理论上，BigInteger能表示的最大数字为：42亿的21亿次方。\n但是还没到这个数字，电脑的内存就会撑爆，所以一般认为BigInteger是无限的。\n存储方式如图所示：\n7 BigDecimal类 7.1 引入 首先我们来分析一下如下程序的执行结果：\n1 2 3 4 5 6 7 public class BigDecimalDemo01 { public static void main(String[] args) { System.out.println(0.09 + 0.01); } } 这段代码比较简单，就是计算0.09和0.01之和，并且将其结果在控制台进行输出。那么按照我们的想法在控制台输出的结果应该为0.1。那么实际的运行结果是什么呢？我们来运行一下程序，控制台的输出\n结果如下所示：\n1 0.09999999999999999 这样的结果其实就是一个丢失精度的结果。为什么会产生精度丢失呢？\n在使用float或者double类型的数据在进行数学运算的时候，很有可能会产生精度丢失问题。我们都知道计算机底层在进行运算的时候，使用的都是二进制数据； 当我们在程序中写了一个十进制数据 ，在\n进行运算的时候，计算机会将这个十进制数据转换成二进制数据，然后再进行运算，计算完毕以后计算机会把运算的结果再转换成十进制数据给我们展示； 如果我们使用的是整数类型的数据进行计算，那\n么在把十进制数据转换成二进制数据的时候不会存在精度问题； 如果我们的数据是一个浮点类型的数据，有的时候计算机并不会将这个数据完全转换成一个二进制数据，而是将这个将其转换成一个无限的\n趋近于这个十进数的二进制数据； 这样使用一个不太准确的数据进行运算的时候， 最终就会造成精度丢失；为了提高精度，Java就给我们提供了BigDecimal供我们进行数据运算。\n7.2 概述 查看API文档，我们可以看到API文档中关于BigDecimal类的定义如下：\nBigDecimal所在包是在java.math包下，因此在使用的时候就需要进行导包。我们可以使用BigDecimal类进行更加精准的数据计算。\n7.3 常见方法 构造方法\n要用BigDecimal类，那么就需要首先学习一下如何去创建BigDecimal的对象。通过查看API文档，我们可以发现Jdk中针对BigDecimal类提供了很多的构造方法，但是最常用的构造方法是：\n了解完常见的构造方法以后，我们接下来就重点介绍一下常见的成员方法。\n常见成员方法\nBigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：\n1 2 3 4 public BigDecimal add(BigDecimal value)\t// 加法运算 public BigDecimal subtract(BigDecimal value)\t// 减法运算 public BigDecimal multiply(BigDecimal value)\t// 乘法运算 public BigDecimal divide(BigDecimal value)\t// 触发运算 接下来我们就来通过一些案例演示一下这些成员方法的使用。\n案例1：演示基本的四则运算\n代码如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class BigDecimalDemo01 { public static void main(String[] args) { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\u0026#34;0.3\u0026#34;) ; BigDecimal b2 = new BigDecimal(\u0026#34;4\u0026#34;) ; // 调用方法进行b1和b2的四则运算，并将其运算结果在控制台进行输出 System.out.println(b1.add(b2)); // 进行加法运算 System.out.println(b1.subtract(b2)); // 进行减法运算 System.out.println(b1.multiply(b2)); // 进行乘法运算 System.out.println(b1.divide(b2)); // 进行除法运算 } } 运行程序进行测试，控制台输出结果如下：\n1 2 3 4 4.3 -3.7 1.2 0.075 此时我们可以看到使用BigDecimal类来完成浮点数的计算不会存在损失精度的问题。\n案例2：演示除法的特殊情况\n如果使用BigDecimal类型的数据进行除法运算的时候，得到的结果是一个无限循环小数，那么就会报错：ArithmeticException。 如下代码所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class BigDecimalDemo02 { public static void main(String[] args) { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\u0026#34;1\u0026#34;) ; BigDecimal b2 = new BigDecimal(\u0026#34;3\u0026#34;) ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2)); } } 运行程序进行测试，控制台输出结果如下所示：\n1 2 3 Exception in thread \u0026#34;main\u0026#34; java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result. at java.base/java.math.BigDecimal.divide(BigDecimal.java:1716) at com.itheima.api.bigdecimal.demo02.BigDecimalDemo02.main(BigDecimalDemo02.java:14) 针对这个问题怎么解决，此时我们就需要使用到BigDecimal类中另外一个divide方法，如下所示：\n1 BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) 上述divide方法参数说明：\n1 2 3 4 5 divisor:\t除数对应的BigDecimal对象； scale:\t精确的位数； roundingMode:\t取舍模式； 取舍模式被封装到了RoundingMode这个枚举类中（关于枚举我们后期再做重点讲解），在这个枚举类中定义了很多种取舍方式。最常见的取舍方式有如下几个： UP(直接进1) ， FLOOR(直接删除) ， HALF_UP(4舍五入),我们可以通过如下格式直接访问这些取舍模式：枚举类名.变量名 接下来我们就来演示一下这些取舍模式，代码如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public class BigDecimalDemo02 { public static void main(String[] args) { // 调用方法 method_03() ; } // 演示取舍模式HALF_UP public static void method_03() { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\u0026#34;0.3\u0026#34;) ; BigDecimal b2 = new BigDecimal(\u0026#34;4\u0026#34;) ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2 , 2 , RoundingMode.HALF_UP)); } // 演示取舍模式FLOOR public static void method_02() { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\u0026#34;1\u0026#34;) ; BigDecimal b2 = new BigDecimal(\u0026#34;3\u0026#34;) ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2 , 2 , RoundingMode.FLOOR)); } // 演示取舍模式UP public static void method_01() { // 创建两个BigDecimal对象 BigDecimal b1 = new BigDecimal(\u0026#34;1\u0026#34;) ; BigDecimal b2 = new BigDecimal(\u0026#34;3\u0026#34;) ; // 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出 System.out.println(b1.divide(b2 , 2 , RoundingMode.UP)); } } 小结：后期在进行两个数的除法运算的时候，我们常常使用的是可以设置取舍模式的divide方法。\n7.4 底层存储方式： 把数据看成字符串，遍历得到里面的每一个字符，把这些字符在ASCII码表上的值，都存储到数组中。\n","date":"2024-10-22T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day18-api%E5%B8%B8%E8%A7%81api%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86/","title":"day18-API（常见API，对象克隆）"},{"content":" 1. 美化界面 界面搭建好之后，就需要美化界面了，本次需要美化下面四个地方：\n将15张小图片移动到界面的中央偏下方\n添加背景图片\n添加图片的边框\n优化路径\n1.1 小图片居中 原本的小图片，都在左上角的位置，不好看，我想让他们居中，这样就需要给每一张图片在x和y都进行一个偏移即可。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 for (int i = 0; i \u0026lt; 4; i++) { //内循环 --- 表示在一行添加4张图片 for (int j = 0; j \u0026lt; 4; j++) { //获取当前要加载图片的序号 int num = data[i][j]; //创建一个JLabel的对象（管理容器） JLabel jLabel = new JLabel(new ImageIcon(path + num + \u0026#34;.jpg\u0026#34;)); //指定图片位置，并进行适当的偏移 jLabel.setBounds(105 * j + 83, 105 * i + 134, 105, 105); //给图片添加边框 //0:表示让图片凸起来 //1：表示让图片凹下去 jLabel.setBorder(new BevelBorder(BevelBorder.LOWERED)); //把管理容器添加到界面中 this.getContentPane().add(jLabel); } } 1.2 添加背景图片 ​\t细节：代码中后添加的，塞在下方\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 for (int i = 0; i \u0026lt; 4; i++) { //内循环 --- 表示在一行添加4张图片 for (int j = 0; j \u0026lt; 4; j++) { //获取当前要加载图片的序号 int num = data[i][j]; //创建一个JLabel的对象（管理容器） JLabel jLabel = new JLabel(new ImageIcon(\u0026#34;F:\\\\JavaSE最新版\\\\day17-面向对象综合练习（下）\\\\代码\\\\\u0026#34; + num + \u0026#34;.jpg\u0026#34;)); //指定图片位置 jLabel.setBounds(105 * j + 83, 105 * i + 134, 105, 105); //给图片添加边框 //0:表示让图片凸起来 //1：表示让图片凹下去 jLabel.setBorder(new BevelBorder(BevelBorder.LOWERED)); //把管理容器添加到界面中 this.getContentPane().add(jLabel); } } //添加背景图片 JLabel background = new JLabel(new ImageIcon(\u0026#34;F:\\JavaSE最新版\\day17-面向对象综合练习（下）\\代码\\puzzlegame\\\\image\\\\background.png\u0026#34;)); background.setBounds(40, 40, 508, 560); //把背景图片添加到界面当中 this.getContentPane().add(background); 1.3 添加图片的边框 1 2 3 4 5 6 7 8 9 //给图片添加边框 //括号中也可以写0或者1 //要注意，这个凸凹跟大家自己理解的可能会有偏差 //0:表示让图片凸起来，图片凸起来，边框就会凹下去 //1：表示让图片凹下去，图片凹下去，边框就会凸起来 //但是0和1不好记，所以Java中就定义了常亮表示，方便记忆 //BevelBorder.LOWERED：表示1 //BevelBorder.RAISED：表示0 jLabel.setBorder(new BevelBorder(BevelBorder.LOWERED)); 1.4 优化路径 之前我们写的路径是完整路径：\n1 F:\\JavaSE最新版\\day17-面向对象综合练习（下）\\代码\\puzzlegame\\image\\animal\\animal3\\1.jpg 这样会有两个坏处：\n一：路径太长，代码阅读不方便\n二：项目拿到别人电脑上时，如果别人电脑上没有F盘和对应的文件夹，就找不到图片\n1.4.1 计算机中的两种路径 绝对路径\n从判断开始的路径，此时路径是固定的。\n1 C:\\\\a.txt 相对路径\n没有从判断开始的路径\n1 aaa\\\\bbb\\\\a.txt 目前为止，在idea中，相对路径是相对当前项目而言的。\n以下面的路径为例：\n1 aaa\\\\bbb\\\\a.txt 在寻找的时候，先找当前项目，在当前项目下找aaa，在aaa里面找bbb，在bbb里面找a.txt\n利用这个原理，我们可以修改项目中路径的书写：\n代码示例：\n1 2 3 4 5 //添加背景图片 JLabel background = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\background.png\u0026#34;)); background.setBounds(40, 40, 508, 560); //把背景图片添加到界面当中 this.getContentPane().add(background); 2. 上下左右移动的逻辑 业务分析： 上下左右的我们看上去就是移动空白的方块，实则逻辑跟我们看上去的相反：\n上移：是把空白区域下方的图片上移。 下移：是把空白区域上方的图片下移。 左移：是把空白区域右方的图片左移。 右移：是把空白区域左方的图片右移。 但是在移动的时候也有一些小问题要注意：\n如果空白区域已经在最上面了，此时x=0，那么就无法再下移了。 如果空白区域已经在最下面了，此时x=3，那么就无法再上移了。 如果空白区域已经在最左侧了，此时y=1，那么就无法再右移了。 如果空白区域已经在最右侧了，此时y=3，那么就无法再左移了。 实现步骤： 本类实现KeyListener接口，并重写所有抽象方法 给整个界面添加键盘监听事件 统计一下空白方块对应的数字0在二维数组中的位置 在keyReleased方法当中实现移动的逻辑 代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 //松开按键的时候会调用这个方法 @Override public void keyReleased(KeyEvent e) { //对上，下，左，右进行判断 //左：37 上：38 右：39 下：40 int code = e.getKeyCode(); if (code == 37) { System.out.println(\u0026#34;向左移动\u0026#34;); //逻辑： //把空白方块右方的数字往左移动 data[x][y] = data[x][y + 1]; data[x][y + 1] = 0; y++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 38) { System.out.println(\u0026#34;向上移动\u0026#34;); //逻辑： //把空白方块下方的数字往上移动 //x，y 表示空白方块 //x + 1， y 表示空白方块下方的数字 //把空白方块下方的数字赋值给空白方块 data[x][y] = data[x + 1][y]; data[x + 1][y] = 0; x++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 39) { System.out.println(\u0026#34;向右移动\u0026#34;); //逻辑： //把空白方块左方的数字往右移动 data[x][y] = data[x][y - 1]; data[x][y - 1] = 0; y--; //每移动一次，计数器就自增一次。 initImage(); } else if (code == 40) { System.out.println(\u0026#34;向下移动\u0026#34;); //逻辑： //把空白方块上方的数字往下移动 data[x][y] = data[x - 1][y]; data[x - 1][y] = 0; x--; //调用方法按照最新的数字加载图片 initImage(); } } 3. 查看完整图片的功能 业务分析： ​\t在玩游戏的过程中，我想看一下最终的效果图，该怎么办呢？\n此时可以添加一个功能，当我们长按某个键（假设为A）,不松的时候，就显示完整图片，松开就显示原来的图片\n实现步骤： 给整个界面添加键盘事件 在keyPressed中书写按下不松的逻辑 在keyReleased中书写松开的逻辑 代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 //按下不松时会调用这个方法 @Override public void keyPressed(KeyEvent e) { int code = e.getKeyCode(); if (code == 65){ //把界面中所有的图片全部删除 this.getContentPane().removeAll(); //加载第一张完整的图片 JLabel all = new JLabel(new ImageIcon(path + \u0026#34;all.jpg\u0026#34;)); all.setBounds(83,134,420,420); this.getContentPane().add(all); //加载背景图片 //添加背景图片 JLabel background = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\background.png\u0026#34;)); background.setBounds(40, 40, 508, 560); //把背景图片添加到界面当中 this.getContentPane().add(background); //刷新界面 this.getContentPane().repaint(); } } //松开按键的时候会调用这个方法 @Override public void keyReleased(KeyEvent e) { ... else if(code == 65){ initImage(); } .... } 4. 作弊码 业务分许： ​\t不想玩了，想要一键通关\n实现步骤： 给整个界面添加键盘事件 在keyReleased中书写松开的逻辑，当按下W的时候一键通关。 备注：当然各位小伙伴可以改写这段逻辑，当按下W的时候，可以将数据排列成还需要走这么两三步才能一键通关的，这样你在跟好基友PK的时候，操作是不是更加隐秘呢？\n代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //松开按键的时候会调用这个方法 @Override public void keyReleased(KeyEvent e) { ... else if(code == 87){ data = new int[][]{ {1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,0} }; initImage(); } .... } 5. 判断胜利 业务分许： ​\t当游戏的图标排列正确了，需要有胜利图标显示。\n​\t每次上下左右移动图片的时候都需要进行判断。\n​\t在keyReleased中方法一开始的地方就需要写判断是否胜利\n实现步骤： 定义一个正确的二维数组win。 在加载图片之前，先判断一下二维数组中的数字跟win数组中是否相同。 如果相同展示正确图标 如果不同则不展示正确图标 代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 public class GameJFrame extends JFrame implements KeyListener,ActionListener{ ... //定义一个二维数组，存储正确的数据 int[][] win = { {1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,0} }; private void initImage() { //清空原本已经出现的所有图片 this.getContentPane().removeAll(); if (victory()) { //显示胜利的图标 JLabel winJLabel = new JLabel(new ImageIcon(\u0026#34;C:\\\\Users\\\\moon\\\\IdeaProjects\\\\basic-code\\\\puzzlegame\\\\image\\\\win.png\u0026#34;)); winJLabel.setBounds(203,283,197,73); this.getContentPane().add(winJLabel); } ... } //判断data数组中的数据是否跟win数组中相同 //如果全部相同，返回true。否则返回false public boolean victory(){ for (int i = 0; i \u0026lt; data.length; i++) { //i : 依次表示二维数组 data里面的索引 //data[i]：依次表示每一个一维数组 for (int j = 0; j \u0026lt; data[i].length; j++) { if(data[i][j] != win[i][j]){ //只要有一个数据不一样，则返回false return false; } } } //循环结束表示数组遍历比较完毕，全都一样返回true return true; } } 6. 计步功能 业务分许： ​\t左上角的计步器，每移动一次，计步器就需要自增一次\n实现步骤： 定义一个变量用来统计已经玩了多少步。 每次按上下左右的时候计步器自增一次即可。 代码实现： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 public class GameJFrame extends JFrame implements KeyListener,ActionListener{ ... //定义变量用来统计步数 int step = 0; //初始化图片 //添加图片的时候，就需要按照二维数组中管理的数据添加图片 private void initImage() { //清空原本已经出现的所有图片 this.getContentPane().removeAll(); if (victory()) { //显示胜利的图标 JLabel winJLabel = new JLabel(new ImageIcon(\u0026#34;C:\\\\Users\\\\moon\\\\IdeaProjects\\\\basic-code\\\\puzzlegame\\\\image\\\\win.png\u0026#34;)); winJLabel.setBounds(203,283,197,73); this.getContentPane().add(winJLabel); } JLabel stepCount = new JLabel(\u0026#34;步数：\u0026#34; + step); stepCount.setBounds(50,30,100,20); this.getContentPane().add(stepCount); //路径分为两种： //绝对路径：一定是从盘符开始的。C:\\ D：\\ //相对路径：不是从盘符开始的 //相对路径相对当前项目而言的。 aaa\\\\bbb //在当前项目下，去找aaa文件夹，里面再找bbb文件夹。 //细节： //先加载的图片在上方，后加载的图片塞在下面。 //外循环 --- 把内循环重复执行了4次。 for (int i = 0; i \u0026lt; 4; i++) { //内循环 --- 表示在一行添加4张图片 for (int j = 0; j \u0026lt; 4; j++) { //获取当前要加载图片的序号 int num = data[i][j]; //创建一个JLabel的对象（管理容器） JLabel jLabel = new JLabel(new ImageIcon(path + num + \u0026#34;.jpg\u0026#34;)); //指定图片位置 jLabel.setBounds(105 * j + 83, 105 * i + 134, 105, 105); //给图片添加边框 //0:表示让图片凸起来 //1：表示让图片凹下去 jLabel.setBorder(new BevelBorder(BevelBorder.LOWERED)); //把管理容器添加到界面中 this.getContentPane().add(jLabel); } } //添加背景图片 JLabel background = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\background.png\u0026#34;)); background.setBounds(40, 40, 508, 560); //把背景图片添加到界面当中 this.getContentPane().add(background); //刷新一下界面 this.getContentPane().repaint(); } //松开按键的时候会调用这个方法 @Override public void keyReleased(KeyEvent e) { //判断游戏是否胜利，如果胜利，此方法需要直接结束，不能再执行下面的移动代码了 if(victory()){ //结束方法 return; } //对上，下，左，右进行判断 //左：37 上：38 右：39 下：40 int code = e.getKeyCode(); System.out.println(code); if (code == 37) { System.out.println(\u0026#34;向左移动\u0026#34;); if(y == 3){ return; } //逻辑： //把空白方块右方的数字往左移动 data[x][y] = data[x][y + 1]; data[x][y + 1] = 0; y++; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 38) { System.out.println(\u0026#34;向上移动\u0026#34;); if(x == 3){ //表示空白方块已经在最下方了，他的下面没有图片再能移动了 return; } //逻辑： //把空白方块下方的数字往上移动 //x，y 表示空白方块 //x + 1， y 表示空白方块下方的数字 //把空白方块下方的数字赋值给空白方块 data[x][y] = data[x + 1][y]; data[x + 1][y] = 0; x++; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 39) { System.out.println(\u0026#34;向右移动\u0026#34;); if(y == 0){ return; } //逻辑： //把空白方块左方的数字往右移动 data[x][y] = data[x][y - 1]; data[x][y - 1] = 0; y--; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 40) { System.out.println(\u0026#34;向下移动\u0026#34;); if(x == 0){ return; } //逻辑： //把空白方块上方的数字往下移动 data[x][y] = data[x - 1][y]; data[x - 1][y] = 0; x--; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); }else if(code == 65){ initImage(); }else if(code == 87){ data = new int[][]{ {1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,0} }; initImage(); } } ... } 7. 其他功能 业务分许： ​\t完成重新开始、关闭游戏、关于我们。这三个都是在菜单上的，所以可以一起完成\n重新开始：点击之后，重新打乱图片，计步器清零\n关闭游戏：点击之后，全部关闭\n关于我们：点击之后出现黑马程序员的公众号二维码\n实现步骤： 给菜单上的每个选项添加点击事件 在actionPerformed方法中实现对应的逻辑即可 代码实现： 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @Override public void actionPerformed(ActionEvent e) { //获取当前被点击的条目对象 Object obj = e.getSource(); //判断 if(obj == replayItem){ System.out.println(\u0026#34;重新游戏\u0026#34;); //计步器清零 step = 0; //再次打乱二维数组中的数据 initData(); //重新加载图片 initImage(); }else if(obj == reLoginItem){ System.out.println(\u0026#34;重新登录\u0026#34;); //关闭当前的游戏界面 this.setVisible(false); //打开登录界面 new LoginJFrame(); }else if(obj == closeItem){ System.out.println(\u0026#34;关闭游戏\u0026#34;); //直接关闭虚拟机即可 System.exit(0); }else if(obj == accountItem){ System.out.println(\u0026#34;公众号\u0026#34;); //创建一个弹框对象 JDialog jDialog = new JDialog(); //创建一个管理图片的容器对象JLabel JLabel jLabel = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\about.png\u0026#34;)); //设置位置和宽高 jLabel.setBounds(0,0,258,258); //把图片添加到弹框当中 jDialog.getContentPane().add(jLabel); //给弹框设置大小 jDialog.setSize(344,344); //让弹框置顶 jDialog.setAlwaysOnTop(true); //让弹框居中 jDialog.setLocationRelativeTo(null); //弹框不关闭则无法操作下面的界面 jDialog.setModal(true); //让弹框显示出来 jDialog.setVisible(true); } } 8.游戏完整代码public class GameJFrame extends JFrame implements KeyListener,ActionListener{ //JFrame 界面，窗体 //子类呢？也表示界面，窗体 //规定：GameJFrame这个界面表示的就是游戏的主界面 //以后跟游戏相关的所有逻辑都写在这个类中 //创建一个二维数组 //目的：用来管理数据 //加载图片的时候，会根据二维数组中的数据进行加载 int[][] data = new int[4][4]; //记录空白方块在二维数组中的位置 int x = 0; int y = 0; //定义一个变量，记录当前展示图片的路径 String path = \u0026#34;puzzlegame\\\\image\\\\animal\\\\animal3\\\\\u0026#34;; //定义一个二维数组，存储正确的数据 int[][] win = { {1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,0} }; //定义变量用来统计步数 int step = 0; //创建选项下面的条目对象 JMenuItem replayItem = new JMenuItem(\u0026#34;重新游戏\u0026#34;); JMenuItem reLoginItem = new JMenuItem(\u0026#34;重新登录\u0026#34;); JMenuItem closeItem = new JMenuItem(\u0026#34;关闭游戏\u0026#34;); JMenuItem accountItem = new JMenuItem(\u0026#34;公众号\u0026#34;); public GameJFrame() { //初始化界面 initJFrame(); //初始化菜单 initJMenuBar(); //初始化数据（打乱） initData(); //初始化图片（根据打乱之后的结果去加载图片） initImage(); //让界面显示出来，建议写在最后 this.setVisible(true); } //初始化数据（打乱） private void initData() { //1.定义一个一维数组 int[] tempArr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; //2.打乱数组中的数据的顺序 //遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换 Random r = new Random(); for (int i = 0; i \u0026lt; tempArr.length; i++) { //获取到随机索引 int index = r.nextInt(tempArr.length); //拿着遍历到的每一个数据，跟随机索引上的数据进行交换 int temp = tempArr[i]; tempArr[i] = tempArr[index]; tempArr[index] = temp; } /* * * 5 6 8 9 * 10 11 15 1 * 4 7 12 13 * 2 3 0 14 * * 5 6 8 9 10 11 15 1 4 7 12 13 2 3 0 14 * */ //4.给二维数组添加数据 //遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中 for (int i = 0; i \u0026lt; tempArr.length; i++) { if (tempArr[i] == 0) { x = i / 4; y = i % 4; } data[i / 4][i % 4] = tempArr[i]; } } //初始化图片 //添加图片的时候，就需要按照二维数组中管理的数据添加图片 private void initImage() { //清空原本已经出现的所有图片 this.getContentPane().removeAll(); if (victory()) { //显示胜利的图标 JLabel winJLabel = new JLabel(new ImageIcon(\u0026#34;C:\\\\Users\\\\moon\\\\IdeaProjects\\\\basic-code\\\\puzzlegame\\\\image\\\\win.png\u0026#34;)); winJLabel.setBounds(203,283,197,73); this.getContentPane().add(winJLabel); } JLabel stepCount = new JLabel(\u0026#34;步数：\u0026#34; + step); stepCount.setBounds(50,30,100,20); this.getContentPane().add(stepCount); //路径分为两种： //绝对路径：一定是从盘符开始的。C:\\ D：\\ //相对路径：不是从盘符开始的 //相对路径相对当前项目而言的。 aaa\\\\bbb //在当前项目下，去找aaa文件夹，里面再找bbb文件夹。 //细节： //先加载的图片在上方，后加载的图片塞在下面。 //外循环 --- 把内循环重复执行了4次。 for (int i = 0; i \u0026lt; 4; i++) { //内循环 --- 表示在一行添加4张图片 for (int j = 0; j \u0026lt; 4; j++) { //获取当前要加载图片的序号 int num = data[i][j]; //创建一个JLabel的对象（管理容器） JLabel jLabel = new JLabel(new ImageIcon(path + num + \u0026#34;.jpg\u0026#34;)); //指定图片位置 jLabel.setBounds(105 * j + 83, 105 * i + 134, 105, 105); //给图片添加边框 //0:表示让图片凸起来 //1：表示让图片凹下去 jLabel.setBorder(new BevelBorder(BevelBorder.LOWERED)); //把管理容器添加到界面中 this.getContentPane().add(jLabel); } } //添加背景图片 JLabel background = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\background.png\u0026#34;)); background.setBounds(40, 40, 508, 560); //把背景图片添加到界面当中 this.getContentPane().add(background); //刷新一下界面 this.getContentPane().repaint(); } private void initJMenuBar() { //创建整个的菜单对象 JMenuBar jMenuBar = new JMenuBar(); //创建菜单上面的两个选项的对象 （功能 关于我们） JMenu functionJMenu = new JMenu(\u0026#34;功能\u0026#34;); JMenu aboutJMenu = new JMenu(\u0026#34;关于我们\u0026#34;); //将每一个选项下面的条目添加到选项当中 functionJMenu.add(replayItem); functionJMenu.add(reLoginItem); functionJMenu.add(closeItem); aboutJMenu.add(accountItem); //给条目绑定事件 replayItem.addActionListener(this); reLoginItem.addActionListener(this); closeItem.addActionListener(this); accountItem.addActionListener(this); //将菜单里面的两个选项添加到菜单当中 jMenuBar.add(functionJMenu); jMenuBar.add(aboutJMenu); //给整个界面设置菜单 this.setJMenuBar(jMenuBar); } private void initJFrame() { //设置界面的宽高 this.setSize(603, 680); //设置界面的标题 this.setTitle(\u0026#34;拼图单机版 v1.0\u0026#34;); //设置界面置顶 this.setAlwaysOnTop(true); //设置界面居中 this.setLocationRelativeTo(null); //设置关闭模式 this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件 this.setLayout(null); //给整个界面添加键盘监听事件 this.addKeyListener(this); } @Override public void keyTyped(KeyEvent e) { } //按下不松时会调用这个方法 @Override public void keyPressed(KeyEvent e) { int code = e.getKeyCode(); if (code == 65){ //把界面中所有的图片全部删除 this.getContentPane().removeAll(); //加载第一张完整的图片 JLabel all = new JLabel(new ImageIcon(path + \u0026#34;all.jpg\u0026#34;)); all.setBounds(83,134,420,420); this.getContentPane().add(all); //加载背景图片 //添加背景图片 JLabel background = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\background.png\u0026#34;)); background.setBounds(40, 40, 508, 560); //把背景图片添加到界面当中 this.getContentPane().add(background); //刷新界面 this.getContentPane().repaint(); } } //松开按键的时候会调用这个方法 @Override public void keyReleased(KeyEvent e) { //判断游戏是否胜利，如果胜利，此方法需要直接结束，不能再执行下面的移动代码了 if(victory()){ //结束方法 return; } //对上，下，左，右进行判断 //左：37 上：38 右：39 下：40 int code = e.getKeyCode(); System.out.println(code); if (code == 37) { System.out.println(\u0026#34;向左移动\u0026#34;); if(y == 3){ return; } //逻辑： //把空白方块右方的数字往左移动 data[x][y] = data[x][y + 1]; data[x][y + 1] = 0; y++; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 38) { System.out.println(\u0026#34;向上移动\u0026#34;); if(x == 3){ //表示空白方块已经在最下方了，他的下面没有图片再能移动了 return; } //逻辑： //把空白方块下方的数字往上移动 //x，y 表示空白方块 //x + 1， y 表示空白方块下方的数字 //把空白方块下方的数字赋值给空白方块 data[x][y] = data[x + 1][y]; data[x + 1][y] = 0; x++; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 39) { System.out.println(\u0026#34;向右移动\u0026#34;); if(y == 0){ return; } //逻辑： //把空白方块左方的数字往右移动 data[x][y] = data[x][y - 1]; data[x][y - 1] = 0; y--; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); } else if (code == 40) { System.out.println(\u0026#34;向下移动\u0026#34;); if(x == 0){ return; } //逻辑： //把空白方块上方的数字往下移动 data[x][y] = data[x - 1][y]; data[x - 1][y] = 0; x--; //每移动一次，计数器就自增一次。 step++; //调用方法按照最新的数字加载图片 initImage(); }else if(code == 65){ initImage(); }else if(code == 87){ data = new int[][]{ {1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,0} }; initImage(); } } //判断data数组中的数据是否跟win数组中相同 //如果全部相同，返回true。否则返回false public boolean victory(){ for (int i = 0; i \u0026lt; data.length; i++) { //i : 依次表示二维数组 data里面的索引 //data[i]：依次表示每一个一维数组 for (int j = 0; j \u0026lt; data[i].length; j++) { if(data[i][j] != win[i][j]){ //只要有一个数据不一样，则返回false return false; } } } //循环结束表示数组遍历比较完毕，全都一样返回true return true; } @Override public void actionPerformed(ActionEvent e) { //获取当前被点击的条目对象 Object obj = e.getSource(); //判断 if(obj == replayItem){ System.out.println(\u0026#34;重新游戏\u0026#34;); //计步器清零 step = 0; //再次打乱二维数组中的数据 initData(); //重新加载图片 initImage(); }else if(obj == reLoginItem){ System.out.println(\u0026#34;重新登录\u0026#34;); //关闭当前的游戏界面 this.setVisible(false); //打开登录界面 new LoginJFrame(); }else if(obj == closeItem){ System.out.println(\u0026#34;关闭游戏\u0026#34;); //直接关闭虚拟机即可 System.exit(0); }else if(obj == accountItem){ System.out.println(\u0026#34;公众号\u0026#34;); //创建一个弹框对象 JDialog jDialog = new JDialog(); //创建一个管理图片的容器对象JLabel JLabel jLabel = new JLabel(new ImageIcon(\u0026#34;puzzlegame\\\\image\\\\about.png\u0026#34;)); //设置位置和宽高 jLabel.setBounds(0,0,258,258); //把图片添加到弹框当中 jDialog.getContentPane().add(jLabel); //给弹框设置大小 jDialog.setSize(344,344); //让弹框置顶 jDialog.setAlwaysOnTop(true); //让弹框居中 jDialog.setLocationRelativeTo(null); //弹框不关闭则无法操作下面的界面 jDialog.setModal(true); //让弹框显示出来 jDialog.setVisible(true); } } } ​\n","date":"2024-10-15T07:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day17-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%E4%B8%8B/","title":"day17-面向对象综合练习（下）"},{"content":" 1. 设计游戏的目的 锻炼逻辑思维能力 利用Java的图形化界面，写一个项目，知道前面学习的知识点在实际开发中的应用场景 2. 游戏的最终效果呈现 Hello，各位同学大家好。今天，我们要写一个非常有意思的小游戏 \u0026mdash;《拼图小游戏》 我们先来看一下游戏的最终成品展示，然后再一步一步的从0开始，完成游戏里面每一个细节。 游戏运行之后，就是这样的界面。 刚开始打开，是登录页面，因为是第一次运行，需要注册。点击注册就会跳转到注册页面\n​ 在注册页面我们可以注册账号，用户名如果已存在则会注册失败。\n​ 在游戏主界面中，我们可以利用上下左右移动小图片去玩游戏，还有快捷键A可以查看最终效果，W一键通关。\n3. 实现思路 我们在写游戏的时候，也是一部分一部分完成的。\n先写游戏主界面，实现步骤如下：\n1，完成最外层窗体的搭建。\n2，再把菜单添加到窗体当中。\n3，把小图片添加到窗体当中。\n4，打乱数字图片的顺序。\n5，让数字图片可以移动起来。\n6，通关之后的胜利判断。\n7，添加其他额外的功能。\n4. 三行代码实现主界面搭建 界面效果： 实现步骤： 创建App类, 编写main方法\n作用: 程序的主入口\n书写以下代码\n1 2 3 4 5 6 7 8 //1.召唤主界面 JFrame jFrame = new JFrame(); //2.设置主界面的大小 jFrame.setSize(514,595); //3.让主界面显示出来 jFrame.setVisible(true); 5. 主界面的其他设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //1.召唤主界面 JFrame jFrame = new JFrame(); //设置主界面的大小 jFrame.setSize(514,595); //将主界面设置到屏幕的正中央 jFrame.setLocationRelativeTo(null); //将主界面置顶 jFrame.setAlwaysOnTop(true); //关闭主界面的时候让代码一起停止 jFrame.setDefaultCloseOperation(3); //给主界面设置一个标题 jFrame.setTitle(\u0026#34;拼图游戏单机版 v1.0\u0026#34;); //2.让主界面显示出来 jFrame.setVisible(true); 注意事项：\n​\tjFrame.setVisible(true);必须要写在最后一行。\n6. 利用继承简化代码 需求：\n​\t如果把所有的代码都写在main方法中，那么main方法里面的代码，就包含游戏主界面的代码，登录界面的代码，注册界面的代码，会变得非常臃肿后期维护也是一件非常难的事情，所以我们需要用继承改进，改进之后，代码就可以分类了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 //登录界面 public class LoginJFrame extends JFrame { //LoginJFrame 表示登录界面 //以后所有跟登录相关的代码，都写在这里 public LoginJFrame(){ //在创建登录界面的时候，同时给这个界面去设置一些信息 //比如，宽高，直接展示出来 this.setSize(488,430); //设置界面的标题 this.setTitle(\u0026#34;拼图 登录\u0026#34;); //设置界面置顶 this.setAlwaysOnTop(true); //设置界面居中 this.setLocationRelativeTo(null); //设置关闭模式 this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //让显示显示出来，建议写在最后 this.setVisible(true); } } //注册界面 public class RegisterJFrame extends JFrame { //跟注册相关的代码，都写在这个界面中 public RegisterJFrame(){ this.setSize(488,500); //设置界面的标题 this.setTitle(\u0026#34;拼图 注册\u0026#34;); //设置界面置顶 this.setAlwaysOnTop(true); //设置界面居中 this.setLocationRelativeTo(null); //设置关闭模式 this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //让显示显示出来，建议写在最后 this.setVisible(true); getContentPane(); } } //游戏主界面 public class GameJFrame extends JFrame { public GameJFrame() { //设置界面的宽高 this.setSize(603, 680); //设置界面的标题 this.setTitle(\u0026#34;拼图单机版 v1.0\u0026#34;); //设置界面置顶 this.setAlwaysOnTop(true); //设置界面居中 this.setLocationRelativeTo(null); //设置关闭模式 this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件 this.setLayout(null); //让界面显示出来，建议写在最后 this.setVisible(true); } } 注意点：\n​\t其中this表示当前窗体的意思。\n7. 菜单制作 菜单就是下图红色边框的内容。\n7.1菜单的组成 在菜单中有：JMenuBar、JMenu、JMenuItem三个角色。\nJMenuBar：如上图中红色边框\nJMenu：如上图蓝色边框\nJMenuItem：如上图绿色字体处\n其中JMenuBar是整体，一个界面中一般只有一个JMenuBar。\n而JMenu是菜单中的选项，可以有多个。\nJMenuItem是选项下面的条目，也可以有多个。\n7.2代码书写步骤 1，创建JMenuBar对象\n2，创建JMenu对象\n3，创建JMenuItem对象\n4，把JMenuItem添加到JMenu中\n5，把JMenu添加到JMenuBar中\n6，把整个JMenuBar设置到整个界面中\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //创建一个菜单对象 JMenuBar jMenuBar = new JMenuBar(); //设置菜单的宽高 jMenuBar.setSize(514, 20); //创建一个选项 JMenu jMenu1 = new JMenu(\u0026#34;功能\u0026#34;); //创建一个条目 jMenuItem1 = new JMenuItem(\u0026#34;重新游戏\u0026#34;); //把条目添加到选项当中 jMenu1.add(jMenuItem1); //把选项添加到菜单当中 jMenuBar.add(jMenu1); //把菜单添加到最外层的窗体当中 this.setJMenuBar(jMenuBar); 8.添加图片 在上图中，其实是15张小图片。我们在添加图片的时候，要把添加图片的操作重复15次，才能把所有图片都添加到界面当中。\n8.1使用到的Java类 ​\tImageIcon：描述图片的类，可以关联计算中任意位置的图片。\n​\t但是一般会把图片拷贝到当前项目中。\n​\tJLabel：用来管理图片，文字的类。\n​\t可以用来设置位置，宽高。\n8.2位置坐标 界面左上角的点可以看做是坐标的原点，横向的是X轴，纵向的是Y轴。\n图片的位置其实取决于图片左上角的点，在坐标中的位置。\n如果是（0,0）那么该图片会显示再屏幕的左上角。\n8.3添加步骤： ​\t1，取消整个界面的默认居中布局\n​\t2，创建ImageIcon对象，并制定图片位置。\n​\t3，创建JLabel对象，并把ImageIcon对象放到小括号中。\n​\t4，利用JLabel对象设置大小，宽高。\n​\t5，将JLabel对象添加到整个界面当中。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 //1，先对整个界面进行设置 //取消内部居中放置方式 this.setLayout(null); //2，创建ImageIcon对象，并制定图片位置。 ImageIcon imageIcon1 = new ImageIcon(\u0026#34;image\\\\1.png\u0026#34;); //3，创建JLabel对象，并把ImageIcon对象放到小括号中。 JLabel jLabel1 = new JLabel(imageIcon1); //4，利用JLabel对象设置大小，宽高。 jLabel1.setBounds(0, 0, 100, 100); //5，将JLabel对象添加到整个界面当中。 this.add(jLabel1); 以此类推，只要能确定15张图片的位置，把上面的代码重复写15遍，就可以将所有图片都添加到界面中了。\n8.4 打乱图片的位置 每一张图片都对应1~15之间的数字，空白处为0，打乱图片实际上就是把数字打乱，添加图片的时候按照打乱的图片添加即可\n8.4.1 打乱数组中数据的练习 ​\tint[] tempArr = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n​\t要求：打乱一维数组中的数据，并按照4个一组的方式添加到二维数组中。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 public class Test1 { public static void main(String[] args) { //需求： //把一个一维数组中的数据：0~15 打乱顺序 //然后再按照4个一组的方式添加到二维数组当中 //1.定义一个一维数组 int[] tempArr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; //2.打乱数组中的数据的顺序 //遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换 Random r = new Random(); for (int i = 0; i \u0026lt; tempArr.length; i++) { //获取到随机索引 int index = r.nextInt(tempArr.length); //拿着遍历到的每一个数据，跟随机索引上的数据进行交换 int temp = tempArr[i]; tempArr[i] = tempArr[index]; tempArr[index] = temp; } //3.遍历数组 for (int i = 0; i \u0026lt; tempArr.length; i++) { System.out.print(tempArr[i] + \u0026#34; \u0026#34;); } System.out.println(); //4.创建一个二维数组 int[][] data = new int[4][4]; //5.给二维数组添加数据 //解法一： //遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中 for (int i = 0; i \u0026lt; tempArr.length; i++) { data[i / 4][i % 4] = tempArr[i]; } //遍历二维数组 for (int i = 0; i \u0026lt; data.length; i++) { for (int j = 0; j \u0026lt; data[i].length; j++) { System.out.print(data[i][j] + \u0026#34; \u0026#34;); } System.out.println(); } } } 8.4.2 打乱图片 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 public class GameJFrame extends JFrame { //JFrame 界面，窗体 //子类呢？也表示界面，窗体 //规定：GameJFrame这个界面表示的就是游戏的主界面 //以后跟游戏相关的所有逻辑都写在这个类中 //创建一个二维数组 //目的：用来管理数据 //加载图片的时候，会根据二维数组中的数据进行加载 int[][] data = new int[4][4]; public GameJFrame() { //初始化界面 initJFrame(); //初始化菜单 initJMenuBar(); //初始化数据（打乱） initData(); //初始化图片（根据打乱之后的结果去加载图片） initImage(); //让界面显示出来，建议写在最后 this.setVisible(true); } //初始化数据（打乱） private void initData() { //1.定义一个一维数组 int[] tempArr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}; //2.打乱数组中的数据的顺序 //遍历数组，得到每一个元素，拿着每一个元素跟随机索引上的数据进行交换 Random r = new Random(); for (int i = 0; i \u0026lt; tempArr.length; i++) { //获取到随机索引 int index = r.nextInt(tempArr.length); //拿着遍历到的每一个数据，跟随机索引上的数据进行交换 int temp = tempArr[i]; tempArr[i] = tempArr[index]; tempArr[index] = temp; } //4.给二维数组添加数据 //遍历一维数组tempArr得到每一个元素，把每一个元素依次添加到二维数组当中 for (int i = 0; i \u0026lt; tempArr.length; i++) { data[i / 4][i % 4] = tempArr[i]; } } //初始化图片 //添加图片的时候，就需要按照二维数组中管理的数据添加图片 private void initImage() { //外循环 --- 把内循环重复执行了4次。 for (int i = 0; i \u0026lt; 4; i++) { //内循环 --- 表示在一行添加4张图片 for (int j = 0; j \u0026lt; 4; j++) { //获取当前要加载图片的序号 int num = data[i][j]; //创建一个JLabel的对象（管理容器） JLabel jLabel = new JLabel(new ImageIcon(\u0026#34;C:\\\\Users\\\\moon\\\\IdeaProjects\\\\basic-code\\\\puzzlegame\\\\image\\\\animal\\\\animal3\\\\\u0026#34; + num + \u0026#34;.jpg\u0026#34;)); //指定图片位置 jLabel.setBounds(105 * j, 105 * i, 105, 105); //把管理容器添加到界面中 this.getContentPane().add(jLabel); } } } private void initJMenuBar() { //创建整个的菜单对象 JMenuBar jMenuBar = new JMenuBar(); //创建菜单上面的两个选项的对象 （功能 关于我们） JMenu functionJMenu = new JMenu(\u0026#34;功能\u0026#34;); JMenu aboutJMenu = new JMenu(\u0026#34;关于我们\u0026#34;); //创建选项下面的条目对象 JMenuItem replayItem = new JMenuItem(\u0026#34;重新游戏\u0026#34;); JMenuItem reLoginItem = new JMenuItem(\u0026#34;重新登录\u0026#34;); JMenuItem closeItem = new JMenuItem(\u0026#34;关闭游戏\u0026#34;); JMenuItem accountItem = new JMenuItem(\u0026#34;公众号\u0026#34;); //将每一个选项下面的条目天极爱到选项当中 functionJMenu.add(replayItem); functionJMenu.add(reLoginItem); functionJMenu.add(closeItem); aboutJMenu.add(accountItem); //将菜单里面的两个选项添加到菜单当中 jMenuBar.add(functionJMenu); jMenuBar.add(aboutJMenu); //给整个界面设置菜单 this.setJMenuBar(jMenuBar); } private void initJFrame() { //设置界面的宽高 this.setSize(603, 680); //设置界面的标题 this.setTitle(\u0026#34;拼图单机版 v1.0\u0026#34;); //设置界面置顶 this.setAlwaysOnTop(true); //设置界面居中 this.setLocationRelativeTo(null); //设置关闭模式 this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件 this.setLayout(null); } } 9. 事件 ​\t事件是可以被组件识别的操作。\n9.1 常见的三个核心要素 事件源： 按钮 图片 窗体\u0026hellip; 事件：某些操作 绑定监听：当事件源上发生了某个事件，则执行某段代码 9.2 常见的三种事件监听 键盘监听 KeyListener 鼠标监听 MouseListener 动作监听 ActionListener 9.3 动作监听 包含：\n鼠标左键点击 空格 9.3.1 事件的三种实现方式 定义实现类实现接口 匿名内部类 本类实现接口 方式一：实现类 ​\t定义实现类实现ActionListener接口\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 public class Test3 { public static void main(String[] args) { JFrame jFrame = new JFrame(); //设置界面的宽高 jFrame.setSize(603, 680); //设置界面的标题 jFrame.setTitle(\u0026#34;事件演示\u0026#34;); //设置界面置顶 jFrame.setAlwaysOnTop(true); //设置界面居中 jFrame.setLocationRelativeTo(null); //设置关闭模式 jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件 jFrame.setLayout(null); //创建一个按钮对象 JButton jtb = new JButton(\u0026#34;点我啊\u0026#34;); //设置位置和宽高 jtb.setBounds(0,0,100,50); //给按钮添加动作监听 //jtb:组件对象，表示你要给哪个组件添加事件 //addActionListener：表示我要给组件添加哪个事件监听（动作监听包含鼠标左键点击，空格） //参数：表示事件被触发之后要执行的代码 jtb.addActionListener(new MyActionListener()); //把按钮添加到界面当中 jFrame.getContentPane().add(jtb); jFrame.setVisible(true); } } public class MyActionListener implements ActionListener { @Override public void actionPerformed(ActionEvent e) { System.out.println(\u0026#34;按钮被点击了\u0026#34;); } } 方式二：匿名内部类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 public class Test3 { public static void main(String[] args) { JFrame jFrame = new JFrame(); //设置界面的宽高 jFrame.setSize(603, 680); //设置界面的标题 jFrame.setTitle(\u0026#34;事件演示\u0026#34;); //设置界面置顶 jFrame.setAlwaysOnTop(true); //设置界面居中 jFrame.setLocationRelativeTo(null); //设置关闭模式 jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件 jFrame.setLayout(null); //创建一个按钮对象 JButton jtb = new JButton(\u0026#34;点我啊\u0026#34;); //设置位置和宽高 jtb.setBounds(0,0,100,50); //给按钮添加动作监听 //jtb:组件对象，表示你要给哪个组件添加事件 //addActionListener：表示我要给组件添加哪个事件监听（动作监听包含鼠标左键点击，空格） //参数：表示事件被触发之后要执行的代码 jtb.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { System.out.println(\u0026#34;达咩~不要点我哟~\u0026#34;); } }); //把按钮添加到界面当中 jFrame.getContentPane().add(jtb); jFrame.setVisible(true); } } 方式三：本类实现接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 public class MyJFrame extends JFrame implements ActionListener { //创建一个按钮对象 JButton jtb1 = new JButton(\u0026#34;点我啊\u0026#34;); //创建一个按钮对象 JButton jtb2 = new JButton(\u0026#34;再点我啊\u0026#34;); public MyJFrame(){ //设置界面的宽高 this.setSize(603, 680); //设置界面的标题 this.setTitle(\u0026#34;拼图单机版 v1.0\u0026#34;); //设置界面置顶 this.setAlwaysOnTop(true); //设置界面居中 this.setLocationRelativeTo(null); //设置关闭模式 this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件 this.setLayout(null); //给按钮设置位置和宽高 jtb1.setBounds(0,0,100,50); //给按钮添加事件 jtb1.addActionListener(this); //给按钮设置位置和宽高 jtb2.setBounds(100,0,100,50); jtb2.addActionListener(this); //那按钮添加到整个界面当中 this.getContentPane().add(jtb1); this.getContentPane().add(jtb2); //让整个界面显示出来 this.setVisible(true); } @Override public void actionPerformed(ActionEvent e) { //对当前的按钮进行判断 //获取当前被操作的那个按钮对象 Object source = e.getSource(); if(source == jtb1){ jtb1.setSize(200,200); }else if(source == jtb2){ Random r = new Random(); jtb2.setLocation(r.nextInt(500),r.nextInt(500)); } } } ​\n","date":"2024-10-15T06:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%E4%B8%8A/","title":"day16-面向对象综合练习（上）"},{"content":" 今日内容 抽象类 接口 内部类 教学目标 能够写出抽象类的格式 能够写出抽象方法的格式 能说出抽象类的应用场景 写出定义接口的格式 写出实现接口的格式 说出接口中成员的特点 能说出接口的应用场景 能说出接口中为什么会出现带有方法体的方法 能完成适配器设计模式 第一章 抽象类 1.1 概述 1.1.1 抽象类引入 ​\t父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类。\n抽象方法 ： 没有方法体的方法。 抽象类：包含抽象方法的类。 1.2 abstract使用格式 abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。\n1.2.1 抽象方法 使用abstract 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。\n定义格式：\n1 修饰符 abstract 返回值类型 方法名 (参数列表)； 代码举例：\n1 public abstract void run()； 1.2.2 抽象类 如果一个类包含抽象方法，那么该类必须是抽象类。注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。\n定义格式：\n1 2 3 abstract class 类名字 { } 代码举例：\n1 2 3 public abstract class Animal { public abstract void run()； } 1.2.3 抽象类的使用 要求：继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。\n代码举例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 // 父类,抽象类 abstract class Employee { private String id; private String name; private double salary; public Employee() { } public Employee(String id, String name, double salary) { this.id = id; this.name = name; this.salary = salary; } // 抽象方法 // 抽象方法必须要放在抽象类中 abstract public void work(); } // 定义一个子类继承抽象类 class Manager extends Employee { public Manager() { } public Manager(String id, String name, double salary) { super(id, name, salary); } // 2.重写父类的抽象方法 @Override public void work() { System.out.println(\u0026#34;管理其他人\u0026#34;); } } // 定义一个子类继承抽象类 class Cook extends Employee { public Cook() { } public Cook(String id, String name, double salary) { super(id, name, salary); } @Override public void work() { System.out.println(\u0026#34;厨师炒菜多加点盐...\u0026#34;); } } // 测试类 public class Demo10 { public static void main(String[] args) { // 创建抽象类,抽象类不能创建对象 // 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象 //\tEmployee e = new Employee(); //\te.work(); // 3.创建子类 Manager m = new Manager(); m.work(); Cook c = new Cook(\u0026#34;ap002\u0026#34;, \u0026#34;库克\u0026#34;, 1); c.work(); } } 此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做实现方法。\n1.3 抽象类的特征 抽象类的特征总结起来可以说是 有得有失\n有得：抽象类得到了拥有抽象方法的能力。\n有失：抽象类失去了创建对象的能力。\n其他成员（构造方法，实例方法，静态方法等）抽象类都是具备的。\n1.4 抽象类的细节 不需要背，只要当idea报错之后，知道如何修改即可。\n关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。\n抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。\n理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。\n抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。\n理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。\n抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。\n理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。\n抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。\n理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。\n抽象类存在的意义是为了被子类继承。\n理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。\n1.5 抽象类存在的意义 ​\t抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。抽象类可以强制让子类，一定要按照规定的格式进行重写。\n第二章 接口 2.1 概述 我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，构造方法，成员变量等。那么什么是接口呢？接口是更加彻底的抽象，JDK7之前，包括JDK7，接口中全部是抽象方法。接口同样是不能创建对象的。\n2.2 定义格式 1 2 3 4 5 6 7 //接口的定义格式： interface 接口名称{ // 抽象方法 } // 接口的声明：interface // 接口名称：首字母大写，满足“驼峰模式” 2.3 接口成分的特点 在JDK7，包括JDK7之前，接口中的只有包含：抽象方法和常量\n2.3.1.抽象方法 ​ 注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！ ​ 按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。\n2.3.2 常量 在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。\n2.3.3 案例演示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public interface InterF { // 抽象方法！ // public abstract void run(); void run(); // public abstract String getName(); String getName(); // public abstract int add(int a , int b); int add(int a , int b); // 它的最终写法是： // public static final int AGE = 12 ; int AGE = 12; //常量 String SCHOOL_NAME = \u0026#34;黑马程序员\u0026#34;; } 2.4 基本的实现 2.4.1 实现接口的概述 类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 implements关键字。\n2.4.2 实现接口的格式 1 2 3 4 5 6 /**接口的实现： 在Java中接口是被实现的，实现接口的类称为实现类。 实现类的格式:*/ class 类名 implements 接口1,接口2,接口3...{ } 从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？\n2.4.3 类实现接口的要求和意义 必须重写实现的全部接口中所有抽象方法。 如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。 意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。 2.4.4 类与接口基本实现案例 假如我们定义一个运动员的接口（规范），代码如下：\n1 2 3 4 5 6 7 8 /** 接口：接口体现的是规范。 * */ public interface SportMan { void run(); // 抽象方法，跑步。 void law(); // 抽象方法，遵守法律。 String compittion(String project); // 抽象方法，比赛。 } 接下来定义一个乒乓球运动员类，实现接口，实现接口的实现类代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.itheima._03接口的实现; /** * 接口的实现： * 在Java中接口是被实现的，实现接口的类称为实现类。 * 实现类的格式: * class 类名 implements 接口1,接口2,接口3...{ * * * } * */ public class PingPongMan implements SportMan { @Override public void run() { System.out.println(\u0026#34;乒乓球运动员稍微跑一下！！\u0026#34;); } @Override public void law() { System.out.println(\u0026#34;乒乓球运动员守法！\u0026#34;); } @Override public String compittion(String project) { return \u0026#34;参加\u0026#34;+project+\u0026#34;得金牌！\u0026#34;; } } 测试代码：\n1 2 3 4 5 6 7 8 9 10 public class TestMain { public static void main(String[] args) { // 创建实现类对象。 PingPongMan zjk = new PingPongMan(); zjk.run(); zjk.law(); System.out.println(zjk.compittion(\u0026#34;全球乒乓球比赛\u0026#34;)); } } 2.4.5 类与接口的多实现案例 类与接口之间的关系是多实现的，一个类可以同时实现多个接口。\n首先我们先定义两个接口，代码如下：\n1 2 3 4 5 6 7 8 9 /** 法律规范：接口*/ public interface Law { void rule(); } /** 这一个运动员的规范：接口*/ public interface SportMan { void run(); } 然后定义一个实现类：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /** * Java中接口是可以被多实现的： * 一个类可以实现多个接口: Law, SportMan * * */ public class JumpMan implements Law ,SportMan { @Override public void rule() { System.out.println(\u0026#34;尊长守法\u0026#34;); } @Override public void run() { System.out.println(\u0026#34;训练跑步！\u0026#34;); } } 从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。\n2.5 接口与接口的多继承 Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：\n类与接口是实现关系\n接口与接口是继承关系\n接口继承接口就是把其他接口的抽象方法与本接口进行了合并。\n案例演示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public interface Abc { void go(); void test(); } /** 法律规范：接口*/ public interface Law { void rule(); void test(); } * * 总结： * 接口与类之间是多实现的。 * 接口与接口之间是多继承的。 * */ public interface SportMan extends Law , Abc { void run(); } 2.6扩展：接口的细节 不需要背，只要当idea报错之后，知道如何修改即可。\n关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。\n当两个接口中存在相同抽象方法的时候，该怎么办？ 只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。\n实现类能不能继承A类的时候，同时实现其他接口呢？ 继承的父类，就好比是亲爸爸一样 实现的接口，就好比是干爹一样 可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。\n实现类能不能继承一个抽象类的时候，同时实现其他接口呢？ 实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。\n实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？ 处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。 处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。\n如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办? 可以在接口跟实现类中间，新建一个中间类（适配器类） 让这个适配器类去实现接口，对接口里面的所有的方法做空重写。 让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。 因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象\n第三章 内部类 3.1 概述 3.1.1 什么是内部类 将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类。可以把内部类理解成寄生，外部类理解成宿主。\n3.1.2 什么时候使用内部类 一个事物内部还有一个独立的事物，内部的事物脱离外部的事物无法独立使用\n人里面有一颗心脏。 汽车内部有一个发动机。 为了实现更好的封装性。 3.2 内部类的分类 按定义的位置来分\n成员内部内，类定义在了成员位置 (类中方法外称为成员位置，无static修饰的内部类) 静态内部类，类定义在了成员位置 (类中方法外称为成员位置，有static修饰的内部类) 局部内部类，类定义在方法内 匿名内部类，没有名字的内部类，可以在方法中，也可以在类中方法外。 3.3 成员内部类 成员内部类特点：\n无static修饰的内部类，属于外部类对象的。 宿主：外部类对象。 内部类的使用格式：\n1 外部类.内部类。 // 访问内部类的类型都是用 外部类.内部类 获取成员内部类对象的两种方式：\n方式一：外部直接创建成员内部类的对象\n1 外部类.内部类 变量 = new 外部类（）.new 内部类（）; 方式二：在外部类中定义一个方法提供内部类的对象\n案例演示\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 方式一： public class Test { public static void main(String[] args) { // 宿主：外部类对象。 // Outer out = new Outer(); // 创建内部类对象。 Outer.Inner oi = new Outer().new Inner(); oi.method(); } } class Outer { // 成员内部类，属于外部类对象的。 // 拓展：成员内部类不能定义静态成员。 public class Inner{ // 这里面的东西与类是完全一样的。 public void method(){ System.out.println(\u0026#34;内部类中的方法被调用了\u0026#34;); } } } 方式二： public class Outer { String name; private class Inner{ static int a = 10; } public Inner getInstance(){ return new Inner(); } } public class Test { public static void main(String[] args) { Outer o = new Outer(); System.out.println(o.getInstance()); } } 3.4 成员内部类的细节 编写成员内部类的注意点：\n成员内部类可以被一些修饰符所修饰，比如： private，默认，protected，public，static等 在成员内部类里面，JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量。 创建内部类对象时，对象中有一个隐含的Outer.this记录外部类对象的地址值。（请参见3.6节的内存图） 详解：\n​\t内部类被private修饰，外界无法直接获取内部类的对象，只能通过3.3节中的方式二获取内部类的对象\n​\t被其他权限修饰符修饰的内部类一般用3.3节中的方式一直接获取内部类的对象\n​\t内部类被static修饰是成员内部类中的特殊情况，叫做静态内部类下面单独学习。\n​\t内部类如果想要访问外部类的成员变量，外部类的变量必须用final修饰，JDK8以前必须手动写final，JDK8之后不需要手动写，JDK默认加上。\n3.5 成员内部类面试题 请在?地方向上相应代码,以达到输出的内容\n注意：内部类访问外部类对象的格式是：外部类名.this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Test { public static void main(String[] args) { Outer.inner oi = new Outer().new inner(); oi.method(); } } class Outer {\t// 外部类 private int a = 30; // 在成员位置定义一个类 class inner { private int a = 20; public void method() { int a = 10; System.out.println(???);\t// 10 答案：a System.out.println(???);\t// 20\t答案：this.a System.out.println(???);\t// 30\t答案：Outer.this.a } } } 3.6 成员内部类内存图 3.7 静态内部类 静态内部类特点：\n静态内部类是一种特殊的成员内部类。 有static修饰，属于外部类本身的。 总结：静态内部类与其他类的用法完全一样。只是访问的时候需要加上外部类.内部类。 拓展1:静态内部类可以直接访问外部类的静态成员。 拓展2:静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象。 拓展3:静态内部类中没有银行的Outer.this。 内部类的使用格式：\n1 外部类.内部类。 静态内部类对象的创建格式：\n1 外部类.内部类 变量 = new 外部类.内部类构造器; 调用方法的格式：\n调用非静态方法的格式：先创建对象，用对象调用 调用静态方法的格式：外部类名.内部类名.方法名(); 案例演示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // 外部类：Outer01 class Outer01{ private static String sc_name = \u0026#34;黑马程序\u0026#34;; // 内部类: Inner01 public static class Inner01{ // 这里面的东西与类是完全一样的。 private String name; public Inner01(String name) { this.name = name; } public void showName(){ System.out.println(this.name); // 拓展:静态内部类可以直接访问外部类的静态成员。 System.out.println(sc_name); } } } public class InnerClassDemo01 { public static void main(String[] args) { // 创建静态内部类对象。 // 外部类.内部类 变量 = new 外部类.内部类构造器; Outer01.Inner01 in = new Outer01.Inner01(\u0026#34;张三\u0026#34;); in.showName(); } } 3.8 局部内部类 局部内部类 ：定义在方法中的类。 定义格式:\n1 2 3 4 5 6 7 8 9 10 11 class 外部类名 { 数据类型 变量名; 修饰符 返回值类型 方法名(参数列表) { // … class 内部类 { // 成员变量 // 成员方法 } } } 3.9 匿名内部类【重点】 3.9.1 概述 匿名内部类 ：是内部类的简化写法。他是一个隐含了名字的内部类。开发中，最常用到的内部类就是匿名内部类了。\n3.9.2 格式 1 2 3 new 类名或者接口名() { 重写方法; }; 包含了：\n继承或者实现关系\n方法重写\n创建对象\n所以从语法上来讲，这个整体其实是匿名内部类对象\n3.9.2 什么时候用到匿名内部类 实际上，如果我们希望定义一个只要使用一次的类，就可考虑使用匿名内部类。匿名内部类的本质作用\n是为了简化代码。\n之前我们使用接口时，似乎得做如下几步操作：\n定义子类 重写接口中的方法 创建子类对象 调用重写后的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 interface Swim { public abstract void swimming(); } // 1. 定义接口的实现类 class Student implements Swim { // 2. 重写抽象方法 @Override public void swimming() { System.out.println(\u0026#34;狗刨式...\u0026#34;); } } public class Test { public static void main(String[] args) { // 3. 创建实现类对象 Student s = new Student(); // 4. 调用方法 s.swimming(); } } 我们的目的，最终只是为了调用方法，那么能不能简化一下，把以上四步合成一步呢？匿名内部类就是做这样的快捷方式。\n3.9.3 匿名内部类前提和格式 匿名内部类必须继承一个父类或者实现一个父接口。\n匿名内部类格式\n1 2 3 4 5 6 7 new 父类名或者接口名(){ // 方法重写 @Override public void method() { // 执行语句 } }; 3.9.4 使用方式 以接口为例，匿名内部类的使用，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 interface Swim { public abstract void swimming(); } public class Demo07 { public static void main(String[] args) { // 使用匿名内部类 new Swim() { @Override public void swimming() { System.out.println(\u0026#34;自由泳...\u0026#34;); } }.swimming(); // 接口 变量 = new 实现类(); // 多态,走子类的重写方法 Swim s2 = new Swim() { @Override public void swimming() { System.out.println(\u0026#34;蛙泳...\u0026#34;); } }; s2.swimming(); s2.swimming(); } } 3.9.5 匿名内部类的特点 定义一个没有名字的内部类 这个类实现了父类，或者父类接口 匿名内部类会创建这个没有名字的类的对象 3.9.6 匿名内部类的使用场景 通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 interface Swim { public abstract void swimming(); } public class Demo07 { public static void main(String[] args) { // 普通方式传入对象 // 创建实现类对象 Student s = new Student(); goSwimming(s); // 匿名内部类使用场景:作为方法参数传递 Swim s3 = new Swim() { @Override public void swimming() { System.out.println(\u0026#34;蝶泳...\u0026#34;); } }; // 传入匿名内部类 goSwimming(s3); // 完美方案: 一步到位 goSwimming(new Swim() { public void swimming() { System.out.println(\u0026#34;大学生, 蛙泳...\u0026#34;); } }); goSwimming(new Swim() { public void swimming() { System.out.println(\u0026#34;小学生, 自由泳...\u0026#34;); } }); } // 定义一个方法,模拟请一些人去游泳 public static void goSwimming(Swim s) { s.swimming(); } } ","date":"2024-10-15T05:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%8E%A5%E5%8F%A3%E5%86%85%E9%83%A8%E7%B1%BB/","title":"day15-面向对象进阶（抽象类\u0026接口\u0026内部类）"},{"content":" day14 今日内容 多态 包 final 权限修饰符 代码块 教学目标 能够说出使用多态的前提条件\n理解多态的向上转型\n理解多态的向下转型\n能够知道多态的使用场景\n包的作用\npublic和private权限修饰符的作用\n描述final修饰的类的特点\n描述final修饰的方法的特点\n描述final修饰的变量的特点\n第一章 多态 1.1 多态的形式 多态是继封装、继承之后，面向对象的第三大特性。\n多态是出现在继承或者实现关系中的。\n多态体现的格式：\n1 2 父类类型 变量名 = new 子类/实现类构造器; 变量名.方法名(); 多态的前提：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。\n1.2 多态的使用场景 如果没有多态，在下图中register方法只能传递学生对象，其他的Teacher和administrator对象是无法传递给register方法方法的，在这种情况下，只能定义三个不同的register方法分别接收学生，老师和管理员。\n有了多态之后，方法的形参就可以定义为共同的父类Person。\n要注意的是：\n当一个方法的形参是一个类，我们可以传递这个类所有的子类对象。 当一个方法的形参是一个接口，我们可以传递这个接口所有的实现类对象（后面会学）。 而且多态还可以根据传递的不同对象来调用不同类中的方法。 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 父类： public class Person { private String name; private int age; 空参构造 带全部参数的构造 get和set方法 public void show(){ System.out.println(name + \u0026#34;, \u0026#34; + age); } } 子类1： public class Administrator extends Person { @Override public void show() { System.out.println(\u0026#34;管理员的信息为：\u0026#34; + getName() + \u0026#34;, \u0026#34; + getAge()); } } 子类2： public class Student extends Person{ @Override public void show() { System.out.println(\u0026#34;学生的信息为：\u0026#34; + getName() + \u0026#34;, \u0026#34; + getAge()); } } 子类3： public class Teacher extends Person{ @Override public void show() { System.out.println(\u0026#34;老师的信息为：\u0026#34; + getName() + \u0026#34;, \u0026#34; + getAge()); } } 测试类： public class Test { public static void main(String[] args) { //创建三个对象，并调用register方法 Student s = new Student(); s.setName(\u0026#34;张三\u0026#34;); s.setAge(18); Teacher t = new Teacher(); t.setName(\u0026#34;王建国\u0026#34;); t.setAge(30); Administrator admin = new Administrator(); admin.setName(\u0026#34;管理员\u0026#34;); admin.setAge(35); register(s); register(t); register(admin); } //这个方法既能接收老师，又能接收学生，还能接收管理员 //只能把参数写成这三个类型的父类 public static void register(Person p){ p.show(); } } 1.3 多态的定义和前提 多态： 是指同一行为，具有多个不同表现形式。\n从上面案例可以看出，Cat和Dog都是动物，都是吃这一行为，但是出现的效果（表现形式）是不一样的。\n前提【重点】\n有继承或者实现关系\n方法的重写【意义体现：不重写，无意义】\n父类引用指向子类对象【格式体现】\n父类类型：指子类对象继承的父类类型，或者实现的父接口类型。\n1.4 多态的运行特点 调用成员变量时：编译看左边，运行看左边\n调用成员方法时：编译看左边，运行看右边\n代码示例：\n1 2 3 4 5 6 7 Fu f = new Zi()； //编译看左边的父类中有没有name这个属性，没有就报错 //在实际运行的时候，把父类name属性的值打印出来 System.out.println(f.name); //编译看左边的父类中有没有show这个方法，没有就报错 //在实际运行的时候，运行的是子类中的show方法 f.show(); 1.5 多态的弊端 我们已经知道多态编译阶段是看左边父类类型的，如果子类有些独有的功能，此时多态的写法就无法访问子类独有功能了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Animal{ public void eat()｛ System.out.println(\u0026#34;动物吃东西！\u0026#34;) ｝ } class Cat extends Animal { public void eat() { System.out.println(\u0026#34;吃鱼\u0026#34;); } public void catchMouse() { System.out.println(\u0026#34;抓老鼠\u0026#34;); } } class Dog extends Animal { public void eat() { System.out.println(\u0026#34;吃骨头\u0026#34;); } } class Test{ public static void main(String[] args){ Animal a = new Cat(); a.eat(); a.catchMouse();//编译报错，编译看左边，Animal没有这个方法 } } 1.6 引用类型转换 1.6.1 为什么要转型 多态的写法就无法访问子类独有功能了。\n当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点\u0026quot;小麻烦\u0026quot;。所以，想要调用子类特有的方法，必须做向下转型。\n回顾基本数据类型转换\n自动转换: 范围小的赋值给范围大的.自动完成:double d = 5; 强制转换: 范围大的赋值给范围小的,强制转换:int i = (int)3.14 ​ 多态的转型分为向上转型（自动转换）与向下转型（强制转换）两种。\n1.6.2 向上转型（自动转换） 向上转型：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。 当父类引用指向一个子类对象时，便是向上转型。 使用格式： 1 2 父类类型 变量名 = new 子类类型(); 如：Animal a = new Cat(); **原因是：父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。**所以子类范围小可以直接自动转型给父类类型的变量。\n1.6.3 向下转型（强制转换） 向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。 一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。 使用格式：\n1 2 3 子类类型 变量名 = (子类类型) 父类变量名; 如:Aniaml a = new Cat(); Cat c =(Cat) a; 1.6.4 案例演示 当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点\u0026quot;小麻烦\u0026quot;。所以，想要调用子类特有的方法，必须做向下转型。\n转型演示，代码如下：\n定义类：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract class Animal { abstract void eat(); } class Cat extends Animal { public void eat() { System.out.println(\u0026#34;吃鱼\u0026#34;); } public void catchMouse() { System.out.println(\u0026#34;抓老鼠\u0026#34;); } } class Dog extends Animal { public void eat() { System.out.println(\u0026#34;吃骨头\u0026#34;); } public void watchHouse() { System.out.println(\u0026#34;看家\u0026#34;); } } 定义测试类：\n1 2 3 4 5 6 7 8 9 10 11 public class Test { public static void main(String[] args) { // 向上转型 Animal a = new Cat(); a.eat(); // 调用的是 Cat 的 eat // 向下转型 Cat c = (Cat)a; c.catchMouse(); // 调用的是 Cat 的 catchMouse } } 1.6.5 转型的异常 转型的过程中，一不小心就会遇到这样的问题，请看如下代码：\n1 2 3 4 5 6 7 8 9 10 11 public class Test { public static void main(String[] args) { // 向上转型 Animal a = new Cat(); a.eat(); // 调用的是 Cat 的 eat // 向下转型 Dog d = (Dog)a; d.watchHouse(); // 调用的是 Dog 的 watchHouse 【运行报错】 } } 这段代码可以通过编译，但是运行时，却报出了 ClassCastException ，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。\n1.6.6 instanceof关键字 为了避免ClassCastException的发生，Java提供了 instanceof 关键字，给引用变量做类型的校验，格式如下：\n1 2 3 变量名 instanceof 数据类型 如果变量属于该数据类型或者其子类类型，返回true。 如果变量不属于该数据类型或者其子类类型，返回false。 所以，转换前，我们最好先做一个判断，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Test { public static void main(String[] args) { // 向上转型 Animal a = new Cat(); a.eat(); // 调用的是 Cat 的 eat // 向下转型 if (a instanceof Cat){ Cat c = (Cat)a; c.catchMouse(); // 调用的是 Cat 的 catchMouse } else if (a instanceof Dog){ Dog d = (Dog)a; d.watchHouse(); // 调用的是 Dog 的 watchHouse } } } 1.6.7 instanceof新特性 JDK14的时候提出了新特性，把判断和强转合并成了一行\n1 2 3 4 5 6 7 8 9 10 //新特性 //先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d //如果不是，则不强转，结果直接是false if(a instanceof Dog d){ d.lookHome(); }else if(a instanceof Cat c){ c.catchMouse(); }else{ System.out.println(\u0026#34;没有这个类型，无法转换\u0026#34;); } 1.7 综合练习 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 需求：根据需求完成代码: 1.定义狗类 属性： 年龄，颜色 行为: eat(String something)(something表示吃的东西) 看家lookHome方法(无参数) 2.定义猫类 属性： 年龄，颜色 行为: eat(String something)方法(something表示吃的东西) 逮老鼠catchMouse方法(无参数) 3.定义Person类//饲养员 属性： 姓名，年龄 行为： keepPet(Dog dog,String something)方法 功能：喂养宠物狗，something表示喂养的东西 行为： keepPet(Cat cat,String something)方法 功能：喂养宠物猫，something表示喂养的东西 生成空参有参构造，set和get方法 4.定义测试类(完成以下打印效果): keepPet(Dog dog,String somethind)方法打印内容如下： 年龄为30岁的老王养了一只黑颜色的2岁的狗 2岁的黑颜色的狗两只前腿死死的抱住骨头猛吃 keepPet(Cat cat,String somethind)方法打印内容如下： 年龄为25岁的老李养了一只灰颜色的3岁的猫 3岁的灰颜色的猫眯着眼睛侧着头吃鱼 5.思考：\t1.Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？ 2.Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？ 画图分析：\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 //动物类（父类） public class Animal { private int age; private String color; public Animal() { } public Animal(int age, String color) { this.age = age; this.color = color; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } public void eat(String something){ System.out.println(\u0026#34;动物在吃\u0026#34; + something); } } //猫类（子类） public class Cat extends Animal { public Cat() { } public Cat(int age, String color) { super(age, color); } @Override public void eat(String something) { System.out.println(getAge() + \u0026#34;岁的\u0026#34; + getColor() + \u0026#34;颜色的猫眯着眼睛侧着头吃\u0026#34; + something); } public void catchMouse(){ System.out.println(\u0026#34;猫抓老鼠\u0026#34;); } } //狗类（子类） public class Dog extends Animal { public Dog() { } public Dog(int age, String color) { super(age, color); } //行为 //eat(String something)(something表示吃的东西) //看家lookHome方法(无参数) @Override public void eat(String something) { System.out.println(getAge() + \u0026#34;岁的\u0026#34; + getColor() + \u0026#34;颜色的狗两只前腿死死的抱住\u0026#34; + something + \u0026#34;猛吃\u0026#34;); } public void lookHome(){ System.out.println(\u0026#34;狗在看家\u0026#34;); } } //饲养员类 public class Person { private String name; private int age; public Person() { } public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } //饲养狗 /* public void keepPet(Dog dog, String something) { System.out.println(\u0026#34;年龄为\u0026#34; + age + \u0026#34;岁的\u0026#34; + name + \u0026#34;养了一只\u0026#34; + dog.getColor() + \u0026#34;颜色的\u0026#34; + dog.getAge() + \u0026#34;岁的狗\u0026#34;); dog.eat(something); } //饲养猫 public void keepPet(Cat cat, String something) { System.out.println(\u0026#34;年龄为\u0026#34; + age + \u0026#34;岁的\u0026#34; + name + \u0026#34;养了一只\u0026#34; + cat.getColor() + \u0026#34;颜色的\u0026#34; + cat.getAge() + \u0026#34;岁的猫\u0026#34;); cat.eat(something); }*/ //想要一个方法，能接收所有的动物，包括猫，包括狗 //方法的形参：可以写这些类的父类 Animal public void keepPet(Animal a, String something) { if(a instanceof Dog d){ System.out.println(\u0026#34;年龄为\u0026#34; + age + \u0026#34;岁的\u0026#34; + name + \u0026#34;养了一只\u0026#34; + a.getColor() + \u0026#34;颜色的\u0026#34; + a.getAge() + \u0026#34;岁的狗\u0026#34;); d.eat(something); }else if(a instanceof Cat c){ System.out.println(\u0026#34;年龄为\u0026#34; + age + \u0026#34;岁的\u0026#34; + name + \u0026#34;养了一只\u0026#34; + c.getColor() + \u0026#34;颜色的\u0026#34; + c.getAge() + \u0026#34;岁的猫\u0026#34;); c.eat(something); }else{ System.out.println(\u0026#34;没有这种动物\u0026#34;); } } } //测试类 public class Test { public static void main(String[] args) { //创建对象并调用方法 /* Person p1 = new Person(\u0026#34;老王\u0026#34;,30); Dog d = new Dog(2,\u0026#34;黑\u0026#34;); p1.keepPet(d,\u0026#34;骨头\u0026#34;); Person p2 = new Person(\u0026#34;老李\u0026#34;,25); Cat c = new Cat(3,\u0026#34;灰\u0026#34;); p2.keepPet(c,\u0026#34;鱼\u0026#34;);*/ //创建饲养员的对象 Person p = new Person(\u0026#34;老王\u0026#34;,30); Dog d = new Dog(2,\u0026#34;黑\u0026#34;); Cat c = new Cat(3,\u0026#34;灰\u0026#34;); p.keepPet(d,\u0026#34;骨头\u0026#34;); p.keepPet(c,\u0026#34;鱼\u0026#34;); } } 第二章 包 2.1 包 ​\t包在操作系统中其实就是一个文件夹。包是用来分门别类的管理技术，不同的技术类放在不同的包下，方便管理和维护。\n在IDEA项目中，建包的操作如下：\n包名的命名规范：\n1 2 路径名.路径名.xxx.xxx // 例如：com.itheima.oa 包名一般是公司域名的倒写。例如：黑马是www.itheima.com,包名就可以定义成com.itheima.技术名称。 包名必须用”.“连接。 包名的每个路径名必须是一个合法的标识符，而且不能是Java的关键字。 2.2 导包 什么时候需要导包？\n​\t情况一：在使用Java中提供的非核心包中的类时\n​\t情况二：使用自己写的其他包中的类时\n什么时候不需要导包？\n​\t情况一：在使用Java核心包（java.lang）中的类时\n​\t情况二：在使用自己写的同一个包中的类时\n2.3 使用不同包下的相同类怎么办？ 假设demo1和demo2中都有一个Student该如何使用？\n代码示例：\n1 2 3 4 5 //使用全类名的形式即可。 //全类名：包名 + 类名 //拷贝全类名的快捷键：选中类名crtl + shift + alt + c 或者用鼠标点copy，再点击copy Reference com.itheima.homework.demo1.Student s1 = new com.itheima.homework.demo1.Student(); com.itheima.homework.demo2.Student s2 = new com.itheima.homework.demo2.Student(); 第三章 权限修饰符 3.1 权限修饰符 ​\t在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，我们之前已经学习过了public 和 private，接下来我们研究一下protected和默认修饰符的作用。\npublic：公共的，所有地方都可以访问。\nprotected：本类 ，本包，其他包中的子类都可以访问。\n默认（没有修饰符）：本类 ，本包可以访问。\n注意：默认是空着不写，不是default\nprivate：私有的，当前类可以访问。 public \u0026gt; protected \u0026gt; 默认 \u0026gt; private\n3.2 不同权限的访问能力 public protected 默认 private 同一类中 √ √ √ √ 同一包中的类 √ √ √ 不同包的子类 √ √ 不同包中的无关类 √ 可见，public具有最大权限。private则是最小权限。\n编写代码时，如果没有特殊的考虑，建议这样使用权限：\n成员变量使用private ，隐藏细节。 构造方法使用 public ，方便创建对象。 成员方法使用public ，方便调用方法。 小贴士：不加权限修饰符，就是默认权限\n第四章 final关键字 4.1 概述 ​\t学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。\n如果有一个方法我不想别人去改写里面内容，该怎么办呢？\nJava提供了final 关键字，表示修饰的内容不可变。\nfinal： 不可改变，最终的含义。可以用于修饰类、方法和变量。 类：被修饰的类，不能被继承。 方法：被修饰的方法，不能被重写。 变量：被修饰的变量，有且仅能被赋值一次。 4.2 使用方式 4.2.1 修饰类 final修饰的类，不能被继承。\n格式如下：\n1 2 final class 类名 { } 代码:\n1 2 3 final class Fu { } // class Zi extends Fu {} // 报错,不能继承final的类 查询API发现像 public final class String 、public final class Math 、public final class Scanner 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。\n4.2.2 修饰方法 final修饰的方法，不能被重写。 格式如下：\n1 2 3 修饰符 final 返回值类型 方法名(参数列表){ //方法体 } 代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Fu2 { final public void show1() { System.out.println(\u0026#34;Fu2 show1\u0026#34;); } public void show2() { System.out.println(\u0026#34;Fu2 show2\u0026#34;); } } class Zi2 extends Fu2 { //\t@Override //\tpublic void show1() { //\tSystem.out.println(\u0026#34;Zi2 show1\u0026#34;); //\t} @Override public void show2() { System.out.println(\u0026#34;Zi2 show2\u0026#34;); } } 4.2.3 修饰变量-局部变量 局部变量——基本类型 基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class FinalDemo1 { public static void main(String[] args) { // 声明变量，使用final修饰 final int a; // 第一次赋值 a = 10; // 第二次赋值 a = 20; // 报错,不可重新赋值 // 声明变量，直接赋值，使用final修饰 final int b = 10; // 第二次赋值 b = 20; // 报错,不可重新赋值 } } 思考，下面两种写法，哪种可以通过编译？\n写法1：\n1 2 3 4 5 final int c = 0; for (int i = 0; i \u0026lt; 10; i++) { c = i; System.out.println(c); } 写法2：\n1 2 3 4 for (int i = 0; i \u0026lt; 10; i++) { final int c = i; System.out.println(c); } 根据 final 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。\n4.2.4 修饰变量-成员变量 成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个：\n显示初始化(在定义成员变量的时候立马赋值)（常用）； 1 2 3 public class Student { final int num = 10; } 构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）。\n注意：每个构造方法中都要赋值一次！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Student { final int num = 10; final int num2; public Student() { this.num2 = 20; // this.num2 = 20; } public Student(String name) { this.num2 = 20; // this.num2 = 20; } } 被final修饰的常量名称，一般都有书写规范，所有字母都大写。\n","date":"2024-10-15T04:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%E5%A4%9A%E6%80%81%E5%8C%85final%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%A3%E7%A0%81%E5%9D%97/","title":"day14-面向对象进阶（多态\u0026包\u0026final\u0026权限修饰符\u0026代码块）"},{"content":" 面向对象进阶部分学习方法： 特点：\n​\t逻辑性没有那么强，但是概念会比较多。\n​\t记忆部分重要的概念，理解课堂上讲解的需要大家掌握的概念，多多练习代码。\nday13 今日内容 复习回顾 static关键字 继承 教学目标 能够掌握static关键字修饰的变量调用方式\n能够掌握static关键字修饰的方法调用方式\n知道静态代码块的格式和应用场景\n能够写出类的继承格式\n能够说出继承的特点\n能够区分this和super的作用\n能够说出方法重写的概念\n能够说出方法重写的注意事项\n第一章 复习回顾 1.1 如何定义类 类的定义格式如下:\n1 2 3 4 5 修饰符 class 类名 { // 1.成员变量（属性） // 2.成员方法 (行为) // 3.构造方法 （初始化类的对象数据的） } 例如:\n1 2 3 4 5 6 public class Student { // 1.成员变量 public String name ; public char sex ; // \u0026#39;男\u0026#39; \u0026#39;女\u0026#39; public int age; } 1.2 如何通过类创建对象 1 类名 对象名称 = new 类名(); 例如:\n1 Student stu = new Student(); 1.3 封装 1.3.1 封装的步骤 1.使用 private 关键字来修饰成员变量。\n2.使用public修饰getter和setter方法。\n1.3.2 封装的步骤实现 private修饰成员变量 1 2 3 4 public class Student { private String name; private int age; } public修饰getter和setter方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Student { private String name; private int age; public void setName(String n) { name = n; } public String getName() { return name; } public void setAge(int a) { if (a \u0026gt; 0 \u0026amp;\u0026amp; a \u0026lt;200) { age = a; } else { System.out.println(\u0026#34;年龄非法！\u0026#34;); } } public int getAge() { return age; } } 1.4 构造方法 1.4.1 构造方法的作用 在创建对象的时候，给成员变量进行初始化。\n初始化即赋值的意思。\n1.4.2 构造方法的格式 1 2 3 修饰符 类名(形参列表) { // 构造体代码，执行代码 } 1.4.3 构造方法的应用 首先定义一个学生类，代码如下：\n1 2 3 4 5 6 7 8 9 10 public class Student { // 1.成员变量 public String name; public int age; // 2.构造方法 public Student() { System.out.println(\u0026#34;无参数构造方法被调用\u0026#34;)； } } 接下来通过调用构造方法得到两个学生对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class CreateStu02 { public static void main(String[] args) { // 创建一个学生对象 // 类名 变量名称 = new 类名(); Student s1 = new Student(); // 使用对象访问成员变量，赋值 s1.name = \u0026#34;张三\u0026#34;; s1.age = 20 ; // 使用对象访问成员变量 输出值 System.out.println(s1.name); System.out.println(s1.age); Student s2 = new Student(); // 使用对象访问成员变量 赋值 s2.name = \u0026#34;李四\u0026#34;; s2.age = 18 ; System.out.println(s2.name); System.out.println(s2.age); } } 1.5 this关键字的作用 1.5.1 this关键字的作用 this代表所在类的当前对象的引用（地址值），即代表当前对象。\n1.5.2 this关键字的应用 1.5.2.1 用于普通的gettter与setter方法 this出现在实例方法中，谁调用这个方法（哪个对象调用这个方法），this就代表谁（this就代表哪个对象）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Student { private String name; private int age; public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { if (age \u0026gt; 0 \u0026amp;\u0026amp; age \u0026lt; 200) { this.age = age; } else { System.out.println(\u0026#34;年龄非法！\u0026#34;); } } public int getAge() { return age; } } 1.5.2.2 用于构造方法中 this出现在构造方法中，代表构造方法正在初始化的那个对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class Student { private String name; private int age; // 无参数构造方法 public Student() {} // 有参数构造方法 public Student(String name,int age) { this.name = name; this.age = age; } } 第二章 static关键字 2.1 概述 以前我们定义过如下类：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Student { // 成员变量 public String name; public char sex; // \u0026#39;男\u0026#39; \u0026#39;女\u0026#39; public int age; // 无参数构造方法 public Student() { } // 有参数构造方法 public Student(String a) { } } 我们已经知道面向对象中，存在类和对象的概念，我们在类中定义了一些成员变量，例如name,age,sex ,结果发现这些成员变量，每个对象都存在（因为每个对象都可以访问）。\n而像name ,age , sex确实是每个学生对象都应该有的属性，应该属于每个对象。\n所以Java中成员（变量和方法）等是存在所属性的，Java是通过static关键字来区分的。static关键字在Java开发非常的重要，对于理解面向对象非常关键。\n关于 static 关键字的使用，它可以用来修饰的成员变量和成员方法，被static修饰的成员是属于类的是放在静态区中，没有static修饰的成员变量和方法则是属于对象的。我们上面案例中的成员变量都是没有static修饰的，所以属于每个对象。\n2.2 定义格式和使用 static是静态的意思。 static可以修饰成员变量或者修饰方法。\n2.2.1 静态变量及其访问 有static修饰成员变量，说明这个成员变量是属于类的，这个成员变量称为类变量或者静态成员变量。 直接用 类名访问即可。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。所有的对象都可以共享这个变量。\n如何使用呢\n例如现在我们需要定义传智全部的学生类，那么这些学生类的对象的学校属性应该都是“传智”，这个时候我们可以把这个属性定义成static修饰的静态成员变量。\n定义格式\n1 修饰符 static 数据类型 变量名 = 初始值； 举例\n1 2 3 4 public class Student { public static String schoolName = \u0026#34;传智播客\u0026#34;； // 属于类，只有一份。 // ..... } 静态成员变量的访问:\n格式：类名.静态变量\n1 2 3 4 5 public static void main(String[] args){ System.out.println(Student.schoolName); // 传智播客 Student.schoolName = \u0026#34;黑马程序员\u0026#34;; System.out.println(Student.schoolName); // 黑马程序员 } 2.2.2 实例变量及其访问 无static修饰的成员变量属于每个对象的， 这个成员变量叫实例变量，之前我们写成员变量就是实例成员变量。\n需要注意的是：实例成员变量属于每个对象，必须创建类的对象才可以访问。\n格式：对象.实例成员变量\n2.2.3 静态方法及其访问 有static修饰成员方法，说明这个成员方法是属于类的，这个成员方法称为类方法或者静态方法**。 直接用 类名访问即可。因为类只有一个，所以静态方法在内存区域中也只存在一份。所有的对象都可以共享这个方法。\n与静态成员变量一样，静态方法也是直接通过类名.方法名称即可访问。\n举例\n1 2 3 4 5 6 7 public class Student{ public static String schoolName = \u0026#34;传智播客\u0026#34;； // 属于类，只有一份。 // ..... public static void study(){ System.out.println(\u0026#34;我们都在黑马程序员学习\u0026#34;); } } 静态成员变量的访问:\n格式：类名.静态方法\n1 2 3 public static void main(String[] args){ Student.study(); } 2.2.4 实例方法及其访问 无static修饰的成员方法属于每个对象的，这个成员方法也叫做实例方法。\n需要注意的是：实例方法是属于每个对象，必须创建类的对象才可以访问。\n格式：对象.实例方法\n示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Student { // 实例变量 private String name ; // 2.方法：行为 // 无 static修饰，实例方法。属于每个对象，必须创建对象调用 public void run(){ System.out.println(\u0026#34;学生可以跑步\u0026#34;); } // 无 static修饰，实例方法 public void sleep(){ System.out.println(\u0026#34;学生睡觉\u0026#34;); } public static void study(){ } } 1 2 3 4 5 6 7 8 public static void main(String[] args){ // 创建对象 Student stu = new Student ; stu.name = \u0026#34;徐干\u0026#34;; // Student.sleep();// 报错，必须用对象访问。 stu.sleep(); stu.run(); } 2.3 小结 1.当 static 修饰成员变量或者成员方法时，该变量称为静态变量，该方法称为静态方法。该类的每个对象都共享同一个类的静态变量和静态方法。任何对象都可以更改该静态变量的值或者访问静态方法。但是不推荐这种方式去访问。因为静态变量或者静态方法直接通过类名访问即可，完全没有必要用对象去访问。\n2.无static修饰的成员变量或者成员方法，称为实例变量，实例方法，实例变量和实例方法必须创建类的对象，然后通过对象来访问。\n3.static修饰的成员属于类，会存储在静态区，是随着类的加载而加载的，且只加载一次，所以只有一份，节省内存。存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。它优先于对象存在，所以，可以被所有对象共享。\n4.无static修饰的成员，是属于对象，对象有多少个，他们就会出现多少份。所以必须由对象调用。\n第三章 继承 3.1 概述 3.1.1 引入 假如我们要定义如下类: 学生类,老师类和工人类，分析如下。\n学生类 属性:姓名,年龄 行为:吃饭,睡觉\n老师类 属性:姓名,年龄，薪水 行为:吃饭,睡觉，教书\n班主任 属性:姓名,年龄，薪水 行为:吃饭,睡觉，管理\n如果我们定义了这三个类去开发一个系统，那么这三个类中就存在大量重复的信息（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了相同代码大量重复，代码显得很臃肿和冗余，那么如何解决呢？\n假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。如图所示： 其中，多个类可以称为子类，单独被继承的那一个类称为父类、超类（superclass）或者基类。\n3.1.2 继承的含义 继承描述的是事物之间的所属关系，这种关系是：is-a 的关系。例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。\n继承：就是子类继承父类的属性和行为，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的非私有的属性和行为。\n3.1.3 继承的好处 提高代码的复用性（减少代码冗余，相同代码重复利用）。 使类与类之间产生了关系。 3.2 继承的格式 通过 extends 关键字，可以声明一个子类继承另外一个父类，定义格式如下：\n1 2 3 4 5 6 7 class 父类 { ... } class 子类 extends 父类 { ... } 需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。\n3.3 继承案例 3.3.1 案例 请使用继承定义以下类:\n学生类 属性:姓名,年龄 行为:吃饭,睡觉 老师类 属性:姓名,年龄，薪水 行为:吃饭,睡觉，教书 班主任 属性:姓名,年龄，薪水 行为:吃饭,睡觉，管理 3.3.2 案例图解分析 老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。\n如下图所示。\n3.3.3 案例代码实现 1.父类Human类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Human { // 合理隐藏 private String name ; private int age ; // 合理暴露 public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } 2.子类Teacher类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Teacher extends Human { // 工资 private double salary ; // 特有方法 public void teach(){ System.out.println(\u0026#34;老师在认真教技术！\u0026#34;)； } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } } 3.子类Student类\n1 2 3 public class Student extends Human{ } 4.子类BanZhuren类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class Teacher extends Human { // 工资 private double salary ; // 特有方法 public void admin(){ System.out.println(\u0026#34;班主任强调纪律问题！\u0026#34;)； } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } } 5.测试类\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public class Test { public static void main(String[] args) { Teacher dlei = new Teacher(); dlei.setName(\u0026#34;播仔\u0026#34;); dlei.setAge(\u0026#34;31\u0026#34;); dlei.setSalary(1000.99); System.out.println(dlei.getName()); System.out.println(dlei.getAge()); System.out.println(dlei.getSalary()); dlei.teach(); BanZhuRen linTao = new BanZhuRen(); linTao.setName(\u0026#34;灵涛\u0026#34;); linTao.setAge(\u0026#34;28\u0026#34;); linTao.setSalary(1000.99); System.out.println(linTao.getName()); System.out.println(linTao.getAge()); System.out.println(linTao.getSalary()); linTao.admin(); Student xugan = new Student(); xugan.setName(\u0026#34;播仔\u0026#34;); xugan.setAge(\u0026#34;31\u0026#34;); //xugan.setSalary(1000.99); // xugan没有薪水属性，报错！ System.out.println(xugan.getName()); System.out.println(xugan.getAge()); } } 3.3.4 小结 1.继承实际上是子类相同的属性和行为可以定义在父类中，子类特有的属性和行为由自己定义，这样就实现了相同属性和行为的重复利用，从而提高了代码复用。\n2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？请看下节！\n3.4 子类不能继承的内容 3.4.1 引入 并不是父类的所有内容都可以给子类继承的：\n子类不能继承父类的构造方法。\n值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter/setter方法访问父类的private成员变量。\n3.4.1 演示代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Demo03 { public static void main(String[] args) { Zi z = new Zi(); System.out.println(z.num1); //\tSystem.out.println(z.num2); // 私有的子类无法使用 // 通过getter/setter方法访问父类的private成员变量 System.out.println(z.getNum2()); z.show1(); // z.show2(); // 私有的子类无法使用 } } class Fu { public int num1 = 10; private int num2 = 20; public void show1() { System.out.println(\u0026#34;show1\u0026#34;); } private void show2() { System.out.println(\u0026#34;show2\u0026#34;); } public int getNum2() { return num2; } public void setNum2(int num2) { this.num2 = num2; } } class Zi extends Fu { } 3.5 继承后的特点—成员变量 当类之间产生了继承关系后，其中各类中的成员变量，又产生了哪些影响呢？\n3.5.1 成员变量不重名 如果子类父类中出现不重名的成员变量，这时的访问是没有影响的。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Fu { // Fu中的成员变量 int num = 5; } class Zi extends Fu { // Zi中的成员变量 int num2 = 6; // Zi中的成员方法 public void show() { // 访问父类中的num System.out.println(\u0026#34;Fu num=\u0026#34;+num); // 继承而来，所以直接访问。 // 访问子类中的num2 System.out.println(\u0026#34;Zi num2=\u0026#34;+num2); } } class Demo04 { public static void main(String[] args) { // 创建子类对象 Zi z = new Zi(); // 调用子类中的show方法 z.show(); } } 演示结果： Fu num = 5 Zi num2 = 6 3.5.2 成员变量重名 如果子类父类中出现重名的成员变量，这时的访问是有影响的。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Fu1 { // Fu中的成员变量。 int num = 5; } class Zi1 extends Fu1 { // Zi中的成员变量 int num = 6; public void show() { // 访问父类中的num System.out.println(\u0026#34;Fu num=\u0026#34; + num); // 访问子类中的num System.out.println(\u0026#34;Zi num=\u0026#34; + num); } } class Demo04 { public static void main(String[] args) { // 创建子类对象 Zi1 z = new Zi1(); // 调用子类中的show方法 z1.show(); } } 演示结果： Fu num = 6 Zi num = 6 子父类中出现了同名的成员变量时，子类会优先访问自己对象中的成员变量。如果此时想访问父类成员变量如何解决呢？我们可以使用super关键字。\n3.5.3 super访问父类成员变量 子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用super 关键字，修饰父类成员变量，类似于之前学过的 this 。\n需要注意的是：super代表的是父类对象的引用，this代表的是当前对象的引用。\n使用格式：\n1 super.父类成员变量名 子类方法需要修改，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Fu { // Fu中的成员变量。 int num = 5; } class Zi extends Fu { // Zi中的成员变量 int num = 6; public void show() { int num = 1; // 访问方法中的num System.out.println(\u0026#34;method num=\u0026#34; + num); // 访问子类中的num System.out.println(\u0026#34;Zi num=\u0026#34; + this.num); // 访问父类中的num System.out.println(\u0026#34;Fu num=\u0026#34; + super.num); } } class Demo04 { public static void main(String[] args) { // 创建子类对象 Zi1 z = new Zi1(); // 调用子类中的show方法 z1.show(); } } 演示结果： method num=1 Zi num=6 Fu num=5 小贴士：Fu 类中的成员变量是非私有的，子类中可以直接访问。若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx方法和setXxx方法。\n3.6 继承后的特点—成员方法 当类之间产生了关系，其中各类中的成员方法，又产生了哪些影响呢？\n3.6.1 成员方法不重名 如果子类父类中出现不重名的成员方法，这时的调用是没有影响的。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Fu { public void show() { System.out.println(\u0026#34;Fu类中的show方法执行\u0026#34;); } } class Zi extends Fu { public void show2() { System.out.println(\u0026#34;Zi类中的show2方法执行\u0026#34;); } } public class Demo05 { public static void main(String[] args) { Zi z = new Zi(); //子类中没有show方法，但是可以找到父类方法去执行 z.show(); z.show2(); } } 3.6.2 成员方法重名 如果子类父类中出现重名的成员方法，则创建子类对象调用该方法的时候，子类对象会优先调用自己的方法。\n代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Fu { public void show() { System.out.println(\u0026#34;Fu show\u0026#34;); } } class Zi extends Fu { //子类重写了父类的show方法 public void show() { System.out.println(\u0026#34;Zi show\u0026#34;); } } public class ExtendsDemo05{ public static void main(String[] args) { Zi z = new Zi(); // 子类中有show方法，只执行重写后的show方法 z.show(); // Zi show } } 3.7 方法重写 3.7.1 概念 方法重写 ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。声明不变，重新实现。\n3.7.2 使用场景与案例 发生在子父类之间的关系。 子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。\n例如：我们定义了一个动物类代码如下：\n1 2 3 4 5 6 7 8 public class Animal { public void run(){ System.out.println(\u0026#34;动物跑的很快！\u0026#34;); } public void cry(){ System.out.println(\u0026#34;动物都可以叫~~~\u0026#34;); } } 然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求\n代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Cat extends Animal { public void cry(){ System.out.println(\u0026#34;我们一起学猫叫，喵喵喵！喵的非常好听！\u0026#34;); } } public class Test { public static void main(String[] args) { // 创建子类对象 Cat ddm = new Cat()； // 调用父类继承而来的方法 ddm.run(); // 调用子类重写的方法 ddm.cry(); } } 3.7.2 @Override重写注解 @Override:注解，重写注解校验！\n这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。\n建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！\n加上后的子类代码形式如下：\n1 2 3 4 5 6 7 8 public class Cat extends Animal { // 声明不变，重新实现 // 方法名称与父类全部一样，只是方法体中的功能重写写了！ @Override public void cry(){ System.out.println(\u0026#34;我们一起学猫叫，喵喵喵！喵的非常好听！\u0026#34;); } } 3.7.3 注意事项 方法重写是发生在子父类之间的关系。 子类方法覆盖父类方法，必须要保证权限大于等于父类权限。 子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。 3.8 继承后的特点—构造方法 3.8.1 引入 当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？ 首先我们要回忆两个事情，构造方法的定义格式和作用。\n构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。 构造方法的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个super() ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（先有爸爸，才能有儿子） 继承后子类构方法器特点:子类所有构造方法的第一行都会默认先调用父类的无参构造方法\n3.8.2 案例演示 按如下需求定义类:\n人类 成员变量: 姓名,年龄 成员方法: 吃饭 学生类 成员变量: 姓名,年龄,成绩 成员方法: 吃饭 代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Person { private String name; private int age; public Person() { System.out.println(\u0026#34;父类无参\u0026#34;); } // getter/setter省略 } class Student extends Person { private double score; public Student() { //super(); // 调用父类无参,默认就存在，可以不写，必须再第一行 System.out.println(\u0026#34;子类无参\u0026#34;); } public Student(double score) { //super(); // 调用父类无参,默认就存在，可以不写，必须再第一行 this.score = score; System.out.println(\u0026#34;子类有参\u0026#34;); } } public class Demo07 { public static void main(String[] args) { Student s1 = new Student(); System.out.println(\u0026#34;----------\u0026#34;); Student s2 = new Student(99.9); } } 输出结果： 父类无参 子类无参 ---------- 父类无参 子类有参 3.8.3 小结 子类构造方法执行的时候，都会在第一行默认先调用父类无参数构造方法一次。 子类构造方法的第一行都隐含了一个**super()**去调用父类无参数构造方法，**super()**可以省略不写。 3.9 super(\u0026hellip;)和this(\u0026hellip;) 3.9.1 引入 请看上节中的如下案例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Person { private String name; private int age; public Person() { System.out.println(\u0026#34;父类无参\u0026#34;); } // getter/setter省略 } class Student extends Person { private double score; public Student() { //super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行 System.out.println(\u0026#34;子类无参\u0026#34;); } public Student(double score) { //super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行 this.score = score; System.out.println(\u0026#34;子类有参\u0026#34;); } // getter/setter省略 } public class Demo07 { public static void main(String[] args) { // 调用子类有参数构造方法 Student s2 = new Student(99.9); System.out.println(s2.getScore()); // 99.9 System.out.println(s2.getName()); // 输出 null System.out.println(s2.getAge()); // 输出 0 } } 我们发现，子类有参数构造方法只是初始化了自己对象中的成员变量score，而父类中的成员变量name和age依然是没有数据的，怎么解决这个问题呢，我们可以借助与super(\u0026hellip;)去调用父类构造方法，以便初始化继承自父类对象的name和age.\n3.9.2 super和this的用法格式 super和this完整的用法如下，其中this，super访问成员我们已经接触过了。\n1 2 3 4 5 this.成员变量 -- 本类的 super.成员变量 -- 父类的 this.成员方法名() -- 本类的 super.成员方法名() -- 父类的 接下来我们使用调用构造方法格式：\n1 2 super(...) -- 调用父类的构造方法，根据参数匹配确认 this(...) -- 调用本类的其他构造方法，根据参数匹配确认 3.9.3 super(\u0026hellip;.)用法演示 代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Person { private String name =\u0026#34;凤姐\u0026#34;; private int age = 20; public Person() { System.out.println(\u0026#34;父类无参\u0026#34;); } public Person(String name , int age){ this.name = name ; this.age = age ; } // getter/setter省略 } class Student extends Person { private double score = 100; public Student() { //super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行 System.out.println(\u0026#34;子类无参\u0026#34;); } public Student(String name ， int age，double score) { super(name ,age);// 调用父类有参构造方法Person(String name , int age)初始化name和age this.score = score; System.out.println(\u0026#34;子类有参\u0026#34;); } // getter/setter省略 } public class Demo07 { public static void main(String[] args) { // 调用子类有参数构造方法 Student s2 = new Student(\u0026#34;张三\u0026#34;，20，99); System.out.println(s2.getScore()); // 99 System.out.println(s2.getName()); // 输出 张三 System.out.println(s2.getAge()); // 输出 20 } } 注意：\n子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。\nsuper() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。\nsuper(..)是根据参数去确定调用父类哪个构造方法的。\n3.9.4 super(\u0026hellip;)案例图解 父类空间优先于子类对象产生\n在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造七调用时，一定先调用父类的构造方法。理解图解如下：\n3.9.5 this(\u0026hellip;)用法演示 this(\u0026hellip;)\n默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。 为了借用其他构造方法的功能。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 package com.itheima._08this和super调用构造方法; /** * this(...): * 默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。 * 为了借用其他构造方法的功能。 * */ public class ThisDemo01 { public static void main(String[] args) { Student xuGan = new Student(); System.out.println(xuGan.getName()); // 输出:徐干 System.out.println(xuGan.getAge());// 输出:21 System.out.println(xuGan.getSex());// 输出： 男 } } class Student{ private String name ; private int age ; private char sex ; public Student() { // 很弱，我的兄弟很牛逼啊，我可以调用其他构造方法：Student(String name, int age, char sex) this(\u0026#34;徐干\u0026#34;,21,\u0026#39;男\u0026#39;); } public Student(String name, int age, char sex) { this.name = name ; this.age = age ; this.sex = sex ; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public char getSex() { return sex; } public void setSex(char sex) { this.sex = sex; } } 3.9.6 小结 子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。\nsuper() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。\nsuper(..)和this(\u0026hellip;)是根据参数去确定调用父类哪个构造方法的。\nsuper(..)可以调用父类构造方法初始化继承自父类的成员变量的数据。\nthis(..)可以调用本类中的其他构造方法。\n3.10 继承的特点 Java只支持单继承，不支持多继承。 1 2 3 4 5 // 一个类只能有一个父类，不可以有多个父类。 class A {} class B {} class C1 extends A {} // ok // class C2 extends A, B {} // error 一个类可以有多个子类。 1 2 3 4 // A可以有多个子类 class A {} class C1 extends A {} class C2 extends A {} 可以多层继承。 1 2 3 class A {} class C1 extends A {} class D extends C1 {} 顶层父类是Object类。所有的类默认继承Object，作为父类。\n4. 关于今天知识的小结： 会写一个继承结构下的标准Javabean即可\n需求：\n​\t猫：属性，姓名，年龄，颜色\n​\t狗：属性，姓名，年龄，颜色，吼叫\n分享书写技巧：\n​ 1.在大脑中要区分谁是父，谁是子\n​ 2.把共性写到父类中，独有的东西写在子类中\n​ 3.开始编写标准Javabean（从上往下写）\n​ 4.在测试类中，创建对象并赋值调用\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 package com.itheima.test4; public class Animal { //姓名，年龄，颜色 private String name; private int age; private String color; public Animal() { } public Animal(String name, int age, String color) { this.name = name; this.age = age; this.color = color; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } public class Cat extends Animal{ //因为猫类中没有独有的属性。 //所以此时不需要写私有的成员变量 //空参 public Cat() { } //需要带子类和父类中所有的属性 public Cat(String name, int age, String color) { super(name,age,color); } } public class Dog extends Animal{ //Dog ：吼叫 private String wang; //构造 public Dog() { } //带参构造：带子类加父类所有的属性 public Dog(String name, int age, String color,String wang) { //共性的属性交给父类赋值 super(name,age,color); //独有的属性自己赋值 this.wang = wang; } public String getWang() { return wang; } public void setWang(String wang) { this.wang = wang; } } public class Demo { public static void main(String[] args) { //Animal ： 姓名，年龄，颜色 //Cat : //Dog ：吼叫 //创建狗的对象 Dog d = new Dog(\u0026#34;旺财\u0026#34;,2,\u0026#34;黑色\u0026#34;,\u0026#34;嗷呜~~\u0026#34;); System.out.println(d.getName()+\u0026#34;, \u0026#34; + d.getAge() + \u0026#34;, \u0026#34; + d.getColor() + \u0026#34;, \u0026#34; + d.getWang()); //创建猫的对象 Cat c = new Cat(\u0026#34;中华田园猫\u0026#34;,3,\u0026#34;黄色\u0026#34;); System.out.println(c.getName() + \u0026#34;, \u0026#34; + c.getAge() + \u0026#34;, \u0026#34; + c.getColor()); } } ","date":"2024-10-15T03:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6static%E7%BB%A7%E6%89%BF/","title":"day13-面向对象进阶（static\u0026继承）"},{"content":" 1.ArrayList 集合和数组的优势对比： 长度可变 添加数据的时候不需要考虑索引，默认将数据添加到末尾 1.1 ArrayList类概述 什么是集合\n​\t提供一种存储空间可变的存储模型，存储的数据容量可以发生改变\nArrayList集合的特点\n​\t长度可以变化，只能存储引用数据类型。\n泛型的使用\n​\t用于约束集合中存储元素的数据类型\n1.2 ArrayList类常用方法 1.2.1 构造方法 方法名 说明 public ArrayList() 创建一个空的集合对象 1.2.2 成员方法 方法名 说明 public boolean add(要添加的元素) 将指定的元素追加到此集合的末尾 public boolean remove(要删除的元素) 删除指定元素,返回值表示是否删除成功 public E remove(int index) 删除指定索引处的元素，返回被删除的元素 public E set(int index,E element) 修改指定索引处的元素，返回被修改的元素 public E get(int index) 返回指定索引处的元素 public int size() 返回集合中的元素的个数 1.2.3 示例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class ArrayListDemo02 { public static void main(String[] args) { //创建集合 ArrayList\u0026lt;String\u0026gt; array = new ArrayList\u0026lt;String\u0026gt;(); //添加元素 array.add(\u0026#34;hello\u0026#34;); array.add(\u0026#34;world\u0026#34;); array.add(\u0026#34;java\u0026#34;); //public boolean remove(Object o)：删除指定的元素，返回删除是否成功 // System.out.println(array.remove(\u0026#34;world\u0026#34;)); // System.out.println(array.remove(\u0026#34;javaee\u0026#34;)); //public E remove(int index)：删除指定索引处的元素，返回被删除的元素 // System.out.println(array.remove(1)); //IndexOutOfBoundsException // System.out.println(array.remove(3)); //public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素 // System.out.println(array.set(1,\u0026#34;javaee\u0026#34;)); //IndexOutOfBoundsException // System.out.println(array.set(3,\u0026#34;javaee\u0026#34;)); //public E get(int index)：返回指定索引处的元素 // System.out.println(array.get(0)); // System.out.println(array.get(1)); // System.out.println(array.get(2)); //System.out.println(array.get(3)); //？？？？？？ 自己测试 //public int size()：返回集合中的元素的个数 System.out.println(array.size()); //输出集合 System.out.println(\u0026#34;array:\u0026#34; + array); } } 1.3 ArrayList存储字符串并遍历 1.3.1 案例需求 ​\t创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合\n1.3.2 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class ArrayListDemo3 { public static void main(String[] args) { //1.创建集合对象 ArrayList\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); //2.添加元素 list.add(\u0026#34;aaa\u0026#34;); list.add(\u0026#34;bbb\u0026#34;); list.add(\u0026#34;ccc\u0026#34;); list.add(\u0026#34;ddd\u0026#34;); //3.遍历 //快捷键: list.fori 正向遍历 //list.forr 倒着遍历 System.out.print(\u0026#34;[\u0026#34;); for (int i = 0; i \u0026lt; list.size(); i++) { //i 依次表示集合里面的每一个索引 if(i == list.size() - 1){ //最大索引 System.out.print(list.get(i)); }else{ //非最大索引 System.out.print(list.get(i) + \u0026#34;, \u0026#34;); } } System.out.print(\u0026#34;]\u0026#34;); } } 1.4 ArrayList存储学生对象并遍历 1.4.1 案例需求 ​\t创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合\n1.4.2 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class ArrayListDemo4 { public static void main(String[] args) { //1.创建集合对象，用来存储数据 ArrayList\u0026lt;Student\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); //2.创建学生对象 Student s1 = new Student(\u0026#34;zhangsan\u0026#34;,16); Student s2 = new Student(\u0026#34;lisi\u0026#34;,15); Student s3 = new Student(\u0026#34;wangwu\u0026#34;,18); //3.把学生对象添加到集合中 list.add(s1); list.add(s2); list.add(s3); //4.遍历 for (int i = 0; i \u0026lt; list.size(); i++) { //i 依次表示集合中的每一个索引 Student stu = list.get(i); System.out.println(stu.getName() + \u0026#34;, \u0026#34; + stu.getAge()); } } } 1.5 查找用户的索引 需求：\n1，main方法中定义一个集合，存入三个用户对象。\n用户属性为：id，username，password\n2，要求：定义一个方法，根据id查找对应的学生信息。\n如果存在，返回索引\n如果不存在，返回-1\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 public class ArrayListDemo6 { public static void main(String[] args) { /*需求： 1，main方法中定义一个集合，存入三个用户对象。 用户属性为：id，username，password 2，要求：定义一个方法，根据id查找对应的学生信息。 如果存在，返回索引 如果不存在，返回-1*/ //1.创建集合对象 ArrayList\u0026lt;User\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); //2.创建用户对象 User u1 = new User(\u0026#34;heima001\u0026#34;, \u0026#34;zhangsan\u0026#34;, \u0026#34;123456\u0026#34;); User u2 = new User(\u0026#34;heima002\u0026#34;, \u0026#34;lisi\u0026#34;, \u0026#34;1234\u0026#34;); User u3 = new User(\u0026#34;heima003\u0026#34;, \u0026#34;wangwu\u0026#34;, \u0026#34;1234qwer\u0026#34;); //3.把用户对象添加到集合当中 list.add(u1); list.add(u2); list.add(u3); //4.调用方法，通过id获取对应的索引 int index = getIndex(list, \u0026#34;heima001\u0026#34;); System.out.println(index); } //1.我要干嘛？ 根据id查找对应的学生信息 //2.我干这件事情需要什么才能完成？ 集合 id //3.方法的调用处是否需要继续使用方法的结果？ //要用必须返回，不要用可以返回也可以不返回 //明确说明需要有返回值 int public static int getIndex(ArrayList\u0026lt;User\u0026gt; list, String id) { //遍历集合得到每一个元素 for (int i = 0; i \u0026lt; list.size(); i++) { User u = list.get(i); String uid = u.getId(); if(uid.equals(id)){ return i; } } //因为只有当集合里面所有的元素都比较完了，才能断定id是不存在的。 return -1; } } 1.6 判断用户的是否存在 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 public class ArrayListDemo5 { public static void main(String[] args) { /* 需求： 1，main方法中定义一个集合，存入三个用户对象。 用户属性为：id，username，password 2，要求：定义一个方法，根据id查找对应的学生信息。 如果存在，返回true 如果不存在，返回false*/ //1.定义集合 ArrayList\u0026lt;User\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); //2.创建对象 User u1 = new User(\u0026#34;heima001\u0026#34;,\u0026#34;zhangsan\u0026#34;,\u0026#34;123456\u0026#34;); User u2 = new User(\u0026#34;heima002\u0026#34;,\u0026#34;lisi\u0026#34;,\u0026#34;12345678\u0026#34;); User u3 = new User(\u0026#34;heima003\u0026#34;,\u0026#34;wangwu\u0026#34;,\u0026#34;1234qwer\u0026#34;); //3.把用户对象添加到集合当中 list.add(u1); list.add(u2); list.add(u3); //4.调用方法，查询id是否存在 boolean result = contains(list, \u0026#34;heima001\u0026#34;); System.out.println(result); } //定义在测试类中的方法需要加static //1.我要干嘛？ 我要根据id查询学生是否存在 //2.我干这件事情，需要什么才能完成？ 集合 id //3.方法的调用处是否需要使用方法的结果？ //如果要用，必须返回，如果不用，可以返回也可以不返回 //但是本题明确说明需要返回 public static boolean contains(ArrayList\u0026lt;User\u0026gt; list, String id){ //循环遍历集合，得到集合里面的每一个元素 //再进行判断 for (int i = 0; i \u0026lt; list.size(); i++) { //i 索引 list.get(i); 元素 User u = list.get(i); //判断id是否存在，我是拿着谁跟谁比较 //需要把用户对象里面的id拿出来再进行比较。 String uid = u.getId(); if(id.equals(uid)){ return true;//return 关键字：作用就是结束方法。 } } //只有当集合里面所有的元素全部比较完毕才能认为是不存在的。 return false; } } 2.学生管理系统 2.1学生管理系统实现步骤 案例需求\n​\t针对目前我们的所学内容，完成一个综合案例：学生管理系统。该系统主要功能如下：\n​\t添加学生：通过键盘录入学生信息，添加到集合中\n​\t删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除\n​\t修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改\n​\t查看学生：将集合中的学生对象信息进行展示\n​\t退出系统：结束程序\n实现步骤\n定义学生类，包含以下成员变量\n​ private String sid // 学生id\n​ private String name // 学生姓名\n​ private String age // 学生年龄\n​ private String address // 学生所在地\n学生管理系统主界面的搭建步骤\n2.1 用输出语句完成主界面的编写 2.2 用Scanner实现键盘输入 2.3 用switch语句完成选择的功能 2.4 用循环完成功能结束后再次回到主界面\n学生管理系统的添加学生功能实现步骤\n3.1 定义一个方法，接收ArrayList集合 3.2 方法内完成添加学生的功能 ​ ①键盘录入学生信息 ​ ②根据录入的信息创建学生对象 ​ ③将学生对象添加到集合中 ​ ④提示添加成功信息 3.3 在添加学生的选项里调用添加学生的方法\n学生管理系统的查看学生功能实现步骤\n4.1 定义一个方法，接收ArrayList集合 4.2 方法内遍历集合，将学生信息进行输出 4.3 在查看所有学生选项里调用查看学生方法\n学生管理系统的删除学生功能实现步骤\n5.1 定义一个方法，接收ArrayList集合 5.2 方法中接收要删除学生的学号 5.3 遍历集合，获取每个学生对象 5.4 使用学生对象的学号和录入的要删除的学号进行比较,如果相同，则将当前学生对象从集合中删除 5.5 在删除学生选项里调用删除学生的方法\n学生管理系统的修改学生功能实现步骤\n6.1 定义一个方法，接收ArrayList集合 6.2 方法中接收要修改学生的学号 6.3 通过键盘录入学生对象所需的信息，并创建对象 6.4 遍历集合，获取每一个学生对象。并和录入的修改学生学号进行比较.如果相同，则使用新学生对象替换当前学生对象 6.5 在修改学生选项里调用修改学生的方法\n退出系统\n使用System.exit(0);退出JVM\n2.2学生类的定义 1 2 3 4 5 6 7 8 9 10 package com.itheima.studentsystem; public class Student { private String id; private String name; private int age; private String address; //下面是空参，有参，get和set方法 } 2.3测试类的定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 public class StudentSystem { public static void main(String[] args) { ArrayList\u0026lt;Student\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); loop: while (true) { System.out.println(\u0026#34;-----------------欢迎来到黑马学生管理系统-------------------\u0026#34;); System.out.println(\u0026#34;1:添加学生\u0026#34;); System.out.println(\u0026#34;2:删除学生\u0026#34;); System.out.println(\u0026#34;3:修改学生\u0026#34;); System.out.println(\u0026#34;4:查询学生\u0026#34;); System.out.println(\u0026#34;5:退出\u0026#34;); System.out.println(\u0026#34;请输入您的选择：\u0026#34;); Scanner sc = new Scanner(System.in); String choose = sc.next(); switch (choose) { case \u0026#34;1\u0026#34; -\u0026gt; addStudent(list); case \u0026#34;2\u0026#34; -\u0026gt; deleteStudent(list); case \u0026#34;3\u0026#34; -\u0026gt; updateStudent(list); case \u0026#34;4\u0026#34; -\u0026gt; queryStudent(list); case \u0026#34;5\u0026#34; -\u0026gt; { System.out.println(\u0026#34;退出\u0026#34;); //break loop; System.exit(0);//停止虚拟机运行 } default -\u0026gt; System.out.println(\u0026#34;没有这个选项\u0026#34;); } } } //添加学生 public static void addStudent(ArrayList\u0026lt;Student\u0026gt; list) { //利用空参构造先创建学生对象 Student s = new Student(); Scanner sc = new Scanner(System.in); String id = null; while (true) { System.out.println(\u0026#34;请输入学生的id\u0026#34;); id = sc.next(); boolean flag = contains(list, id); if(flag){ //表示id已经存在，需要重新录入 System.out.println(\u0026#34;id已经存在，请重新录入\u0026#34;); }else{ //表示id不存在，表示可以使用 s.setId(id); break; } } System.out.println(\u0026#34;请输入学生的姓名\u0026#34;); String name = sc.next(); s.setName(name); System.out.println(\u0026#34;请输入学生的年龄\u0026#34;); int age = sc.nextInt(); s.setAge(age); System.out.println(\u0026#34;请输入学生的家庭住址\u0026#34;); String address = sc.next(); s.setAddress(address); //把学生对象添加到集合当中 list.add(s); //提示一下用户 System.out.println(\u0026#34;学生信息添加成功\u0026#34;); } //删除学生 public static void deleteStudent(ArrayList\u0026lt;Student\u0026gt; list) { Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入要删除的id\u0026#34;); String id = sc.next(); //查询id在集合中的索引 int index = getIndex(list, id); //对index进行判断 //如果-1，就表示不存在，结束方法，回到初始菜单 if(index \u0026gt;= 0){ //如果大于等于0的，表示存在，直接删除 list.remove(index); System.out.println(\u0026#34;id为：\u0026#34; + id + \u0026#34;的学生删除成功\u0026#34;); }else{ System.out.println(\u0026#34;id不存在，删除失败\u0026#34;); } } //修改学生 public static void updateStudent(ArrayList\u0026lt;Student\u0026gt; list) { Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入要修改学生的id\u0026#34;); String id = sc.next(); int index = getIndex(list, id); if(index == -1){ System.out.println(\u0026#34;要修改的id\u0026#34; + id + \u0026#34;不存在，请重新输入\u0026#34;); return; } //当代码执行到这里，表示什么？表示当前id是存在的。 //获取要修改的学生对象 Student stu = list.get(index); //输入其他的信息并修改 System.out.println(\u0026#34;请输入要修改的学生姓名\u0026#34;); String newName = sc.next(); stu.setName(newName); System.out.println(\u0026#34;请输入要修改的学生年龄\u0026#34;); int newAge = sc.nextInt(); stu.setAge(newAge); System.out.println(\u0026#34;请输入要修改的学生家庭住址\u0026#34;); String newAddress = sc.next(); stu.setAddress(newAddress); System.out.println(\u0026#34;学生信息修改成功\u0026#34;); } //查询学生 public static void queryStudent(ArrayList\u0026lt;Student\u0026gt; list) { if (list.size() == 0) { System.out.println(\u0026#34;当前无学生信息，请添加后再查询\u0026#34;); //结束方法 return; } //打印表头信息 System.out.println(\u0026#34;id\\t\\t姓名\\t年龄\\t家庭住址\u0026#34;); //当代码执行到这里，表示集合中是有数据的 for (int i = 0; i \u0026lt; list.size(); i++) { Student stu = list.get(i); System.out.println(stu.getId() + \u0026#34;\\t\u0026#34; + stu.getName() + \u0026#34;\\t\u0026#34; + stu.getAge() + \u0026#34;\\t\u0026#34; + stu.getAddress()); } } //判断id在集合中是否存在 public static boolean contains(ArrayList\u0026lt;Student\u0026gt; list, String id) { //循环遍历集合得到里面的每一个学生对象 /*for (int i = 0; i \u0026lt; list.size(); i++) { //拿到学生对象后，获取id并进行判断 Student stu = list.get(i); String sid = stu.getId(); if(sid.equals(id)){ //存在，true return true; } } // 不存在false return false;*/ return getIndex(list,id) \u0026gt;= 0; } //通过id获取索引的方法 public static int getIndex(ArrayList\u0026lt;Student\u0026gt; list, String id){ //遍历集合 for (int i = 0; i \u0026lt; list.size(); i++) { //得到每一个学生对象 Student stu = list.get(i); //得到每一个学生对象的id String sid = stu.getId(); //拿着集合中的学生id跟要查询的id进行比较 if(sid.equals(id)){ //如果一样，那么就返回索引 return i; } } //当循环结束之后还没有找到，就表示不存在，返回-1. return -1; } } ","date":"2024-10-14T03:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day11-%E9%9B%86%E5%90%88%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/","title":"day11-集合\u0026学生管理系统"},{"content":" 1.API 1.1API概述 什么是API\n​\tAPI (Application Programming Interface) ：应用程序编程接口\njava中的API\n​\t指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。\n1.2如何使用API帮助文档 打开帮助文档 找到索引选项卡中的输入框 在输入框中输入Random 看类在哪个包下 看类的描述 看构造方法 看成员方法 2.String类 2.1String类概述 ​\tString 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！\n2.2String类的特点 字符串不可变，它们的值在创建后不能被更改 虽然 String 的值是不可变的，但是它们可以被共享 字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] ) 2.3String类的构造方法 常用的构造方法\n方法名 说明 public String() 创建一个空白字符串对象，不含有任何内容 public String(char[] chs) 根据字符数组的内容，来创建字符串对象 public String(byte[] bys) 根据字节数组的内容，来创建字符串对象 String s = “abc”; 直接赋值的方式创建字符串对象，内容就是abc 示例代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class StringDemo01 { public static void main(String[] args) { //public String()：创建一个空白字符串对象，不含有任何内容 String s1 = new String(); System.out.println(\u0026#34;s1:\u0026#34; + s1); //public String(char[] chs)：根据字符数组的内容，来创建字符串对象 char[] chs = {\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;}; String s2 = new String(chs); System.out.println(\u0026#34;s2:\u0026#34; + s2); //public String(byte[] bys)：根据字节数组的内容，来创建字符串对象 byte[] bys = {97, 98, 99}; String s3 = new String(bys); System.out.println(\u0026#34;s3:\u0026#34; + s3); //String s = “abc”;\t直接赋值的方式创建字符串对象，内容就是abc String s4 = \u0026#34;abc\u0026#34;; System.out.println(\u0026#34;s4:\u0026#34; + s4); } } 2.4创建字符串对象两种方式的区别 通过构造方法创建\n​\t通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同\n直接赋值方式创建\n​\t以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护\n2.5字符串的比较 2.5.1==号的作用 比较基本数据类型：比较的是具体的值 比较引用数据类型：比较的是对象地址值 2.5.2equals方法的作用 方法介绍\n1 public boolean equals(String s) 比较两个字符串内容是否相同、区分大小写 示例代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class StringDemo02 { public static void main(String[] args) { //构造方法的方式得到对象 char[] chs = {\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;}; String s1 = new String(chs); String s2 = new String(chs); //直接赋值的方式得到对象 String s3 = \u0026#34;abc\u0026#34;; String s4 = \u0026#34;abc\u0026#34;; //比较字符串对象地址是否相同 System.out.println(s1 == s2); System.out.println(s1 == s3); System.out.println(s3 == s4); System.out.println(\u0026#34;--------\u0026#34;); //比较字符串内容是否相同 System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); System.out.println(s3.equals(s4)); } } 2.6用户登录案例 2.6.1案例需求 ​\t已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示\n2.6.2代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class Test1登录案例 { public static void main(String[] args) { //1.定义两个变量用来记录正确的用户名和密码 String rightUsername = \u0026#34;itheima\u0026#34;; String rightPassword = \u0026#34;1234qwer\u0026#34;; //2.键盘录入用户名和密码 //ctrl + alt + T 选择包裹方式 for (int i = 0; i \u0026lt; 3; i++) {//0 1 2 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入用户名\u0026#34;); String username = sc.next(); System.out.println(\u0026#34;请输入密码\u0026#34;); String password = sc.next(); //3.判断比较 if (username.equals(rightUsername) \u0026amp;\u0026amp; password.equals(rightPassword)) { System.out.println(\u0026#34;登录成功\u0026#34;); //如果正确，循环结束 break; } else { //最后一次机会 if(i == 2){ System.out.println(\u0026#34;账户\u0026#34; + username + \u0026#34;被锁定，请联系黑马程序员官方小姐姐：XXXXXXX\u0026#34;); }else{ //不是最后一次机会 System.out.println(\u0026#34;用户名或密码错误，登录失败,还剩下\u0026#34; + (2 - i) + \u0026#34;次机会\u0026#34;);//2 1 0 } } } } } 2.7遍历字符串案例 2.7.1案例需求 ​\t键盘录入一个字符串，使用程序实现在控制台遍历该字符串\n2.7.2直接遍历字符串 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Test2字符串直接遍历 { public static void main(String[] args) { //两个方法： //charAt()：会根据索引获取对应的字符 //length(): 会返回字符串的长度 //1.键盘录入一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入字符串\u0026#34;); String str = sc.next(); System.out.println(str); //2.遍历 for (int i = 0; i \u0026lt; str.length(); i++) { //i 依次表示字符串的每一个索引 //索引的范围：0 ~ 长度-1 //根据索引获取字符串里面的每一个字符 //ctrl + alt + V 自动生成左边的接受变量 char c = str.charAt(i); System.out.println(c); } } } 2.8统计字符次数案例 2.8.1案例需求 ​\t键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)\n2.8.2代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public class Test4统计个数 { public static void main(String[] args) { //键盘录入一个字符串，统计大写，小写，数字出现的次数 //1.键盘录入一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个字符串\u0026#34;); String str = sc.next(); //2.统计 --- 计数器count //此时我要统计的有3样东西，所以要定义3个计数器分别进行统计 int bigCount = 0; int smallCount = 0; int numberCount = 0; //得到这个字符串里面每一个字符 for (int i = 0; i \u0026lt; str.length(); i++) { //i 表示字符串中的索引 //c 表示字符串中的每一个字符 char c = str.charAt(i); //对c进行判断 if (c \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;z\u0026#39;) { smallCount++; }else if(c \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;Z\u0026#39;){ bigCount++; }else if(c \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;9\u0026#39;){ numberCount++; } } //3.当循环结束之后，三个变量记录的就是对应的个数 System.out.println(\u0026#34;大写字符有:\u0026#34; + bigCount + \u0026#34;个\u0026#34;); System.out.println(\u0026#34;小写字符有:\u0026#34; + smallCount + \u0026#34;个\u0026#34;); System.out.println(\u0026#34;数字字符有:\u0026#34; + numberCount + \u0026#34;个\u0026#34;); } } 2.9字符串拼接案例 2.9.1案例需求 ​\t定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，\n​\t并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]\n2.9.2代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 public class Test5数组拼接成字符串 { public static void main(String[] args) { //定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法， //并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; //执行方法后的输出结果为：[1, 2, 3] int[] arr = {1, 2, 3, 4, 5}; String str = arrToString(arr); System.out.println(str); } //作用：把一个数组变成字符串 public static String arrToString(int[] arr) { String s = \u0026#34;\u0026#34;; //拼接左括号 s = s + \u0026#34;[\u0026#34;; //此时是拿着长度为0的字符串，跟[进行拼接，产生一个新的字符串。 //把新的字符串再赋值给s，此时变量s记录的就是新的字符串\u0026#34;[\u0026#34;的地址值 //下面我想得到数组里面的每一个元素并进行拼接 //那么就需要遍历数组，得到每一个元素才行 for (int i = 0; i \u0026lt; arr.length; i++) { //假设第一次循环:i = 0 获取的就是0索引上的元素 //在拼接的时候：\u0026#34;[\u0026#34; + 1 + \u0026#34;, \u0026#34; 拼接完毕之后产生一个新的字符串 \u0026#34;[1, \u0026#34; //第二次循环：i = 1 获取的就是1索引上的元素 //在拼接的时候： 此时s就是第一次循环结束后拼接完毕的结果：\u0026#34;[1, \u0026#34; //在拼接的时候：\u0026#34;[1, \u0026#34; + 2 + \u0026#34;, \u0026#34; 拼接完毕之后产生一个新的字符串 \u0026#34;[1, 2, \u0026#34; //... if(i == arr.length - 1){ //如果是最后一个元素，那么不需要拼接逗号空格 s = s + arr[i]; }else{ //如果不是最后一个元素，需要拼接元素和逗号空格 s = s + arr[i] + \u0026#34;, \u0026#34;; } } //等循环结束之后，再拼接最后一个右括号 s = s + \u0026#34;]\u0026#34;; return s; } //用来遍历数组 public static void printArr(int[] arr) { System.out.print(\u0026#34;[\u0026#34;); for (int i = 0; i \u0026lt; arr.length; i++) { if (i == arr.length - 1) { System.out.print(arr[i]); } else { System.out.print(arr[i] + \u0026#34;, \u0026#34;); } } System.out.println(\u0026#34;]\u0026#34;); //[1, 2, 3, 4, 5] //我们现在要知道，这个最终结果是怎么来的？ //从到右依次打印得来的。 } } 2.10字符串反转案例 2.10.1案例需求 ​\t定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果\n​\t例如，键盘录入 abc，输出结果 cba\n2.10.2代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class Test6反转字符串 { public static void main(String[] args) { /*定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果 例如，键盘录入 abc，输出结果 cba*/ //1.定义一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个字符串\u0026#34;); String str = sc.next(); //2.定义一个方法，反转字符串 //abc ---\u0026gt; cba //可以把字符串倒着遍历，再拼接 String result = reverse(str); System.out.println(result); } //注释：方法的作用就是反转字符串 //把传递进来的字符串进行反转 public static String reverse(String str){//abc //核心思想：倒着遍历并进行拼接就可以了 //fori :正着遍历 forr：倒着遍历 String s = \u0026#34;\u0026#34;; for (int i = str.length() - 1; i \u0026gt;= 0; i--) { //i 依次表示字符串里面的每一个索引（倒着的） //我们就可以拿到里面的每一个字符并拼接 s = s + str.charAt(i); } //把倒着拼接之后的结果返回即可 return s; } } 2.11 金额转换 2.11.1 案例需求 ​\t把2135变成：零佰零拾零万贰仟壹佰叁拾伍元\n​\t把789变成：零佰零拾零万零仟柒佰捌拾玖元\n2.11.2 代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package com.itheima.stringdemo; import java.util.Scanner; public class StringDemo9 { public static void main(String[] args) { //1.键盘录入一个金额 Scanner sc = new Scanner(System.in); int money; while (true) { System.out.println(\u0026#34;请录入一个金额\u0026#34;); money = sc.nextInt(); if (money \u0026gt;= 0 \u0026amp;\u0026amp; money \u0026lt;= 9999999) { break; } else { System.out.println(\u0026#34;金额无效\u0026#34;); } } //定义一个变量用来表示钱的大写 String moneyStr = \u0026#34;\u0026#34;; //2.得到money里面的每一位数字,再转成中文 while (true) {//2135 //从右往左获取数据，因为右侧是数据的个位 int ge = money % 10; String capitalNumber = getCapitalNumber(ge); //把转换之后的大写拼接到moneyStr当中 moneyStr = capitalNumber + moneyStr; //第一次循环 ： \u0026#34;伍\u0026#34; + \u0026#34;\u0026#34; = \u0026#34;伍\u0026#34; //第二次循环 ： \u0026#34;叁\u0026#34; + \u0026#34;伍\u0026#34; = \u0026#34;叁伍\u0026#34; //去掉刚刚获取的数据 money = money / 10; //如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束 if (money == 0) { break; } } //3.在前面补0，补齐7位 int count = 7 - moneyStr.length(); for (int i = 0; i \u0026lt; count; i++) { moneyStr = \u0026#34;零\u0026#34; + moneyStr; } System.out.println(moneyStr);//零零零贰壹叁伍 //4.插入单位 //定义一个数组表示单位 String[] arr = {\u0026#34;佰\u0026#34;,\u0026#34;拾\u0026#34;,\u0026#34;万\u0026#34;,\u0026#34;仟\u0026#34;,\u0026#34;佰\u0026#34;,\u0026#34;拾\u0026#34;,\u0026#34;元\u0026#34;}; // 零 零 零 贰 壹 叁 伍 //遍历moneyStr，依次得到 零 零 零 贰 壹 叁 伍 //然后把arr的单位插入进去 String result = \u0026#34;\u0026#34;; for (int i = 0; i \u0026lt; moneyStr.length(); i++) { char c = moneyStr.charAt(i); //把大写数字和单位拼接到result当中 result = result + c + arr[i]; } //5.打印最终结果 System.out.println(result); } //定义一个方法把数字变成大写的中文 //1 -- 壹 public static String getCapitalNumber(int number) { //定义数组，让数字跟大写的中文产生一个对应关系 String[] arr = {\u0026#34;零\u0026#34;, \u0026#34;壹\u0026#34;, \u0026#34;贰\u0026#34;, \u0026#34;叁\u0026#34;, \u0026#34;肆\u0026#34;, \u0026#34;伍\u0026#34;, \u0026#34;陆\u0026#34;, \u0026#34;柒\u0026#34;, \u0026#34;捌\u0026#34;, \u0026#34;玖\u0026#34;}; //返回结果 return arr[number]; } } 2.12 手机号屏蔽 需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽\n最终效果为：131****9468\n代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Test8手机号屏蔽 { public static void main(String[] args) { /*以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽 最终效果为：131****9468*/ //1.键盘录入一个手机号码 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入手机号码\u0026#34;); String phoneNumber = sc.next();//13112349408 //2.截取手机号码中的前三位 String star = phoneNumber.substring(0, 3); //3.截取手机号码中的最后四位 //此时我用substring方法，是用1个参数的，还是两个参数的？1个参数的会更好 //因为现在我要截取到最后，所以建议使用1个参数的。 String end = phoneNumber.substring(7); //4.拼接 String result = star + \u0026#34;****\u0026#34; + end; System.out.println(result); } } 2.13 敏感词替换 需求1：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class Test9敏感词替换 { public static void main(String[] args) { //1.定义一个变量表示骂人的话 String talk = \u0026#34;后裔你玩什么啊，TMD\u0026#34;; //2.把这句话中的敏感词进行替换 String result = talk.replace(\u0026#34;TMD\u0026#34;, \u0026#34;***\u0026#34;); //3.打印 System.out.println(talk); System.out.println(result); } } 需求2：如果要替换的敏感词比较多怎么办？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class Test10多个敏感词替换 { public static void main(String[] args) { //实际开发中，敏感词会有很多很多 //1.先键盘录入要说的话 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入要说的话\u0026#34;); String talk = sc.next();//后裔你玩什么啊，TMD,GDX,ctmd,ZZ //2.定义一个数组用来存多个敏感词 String[] arr = {\u0026#34;TMD\u0026#34;,\u0026#34;GDX\u0026#34;,\u0026#34;ctmd\u0026#34;,\u0026#34;ZZ\u0026#34;,\u0026#34;lj\u0026#34;,\u0026#34;FW\u0026#34;,\u0026#34;nt\u0026#34;}; //3.把说的话中所有的敏感词都替换为*** for (int i = 0; i \u0026lt; arr.length; i++) { //i 索引 //arr[i] 元素 --- 敏感词 talk = talk.replace(arr[i],\u0026#34;***\u0026#34;); } //4.打印结果 System.out.println(talk);//后裔你玩什么啊，***,***,***,*** } } 2.14 身份证信息查看 ​\t身份证的每一位都是有固定的含义：\n1、2位：省份 3、4位：城市 5、6位：区县 7-14位：出生年、月、日 15、16位：所在地派出所 17位：性别（奇数男性，偶数女性） 18位：个人信息码（随机产生） 要求打印内容方式如下：\n​\t人物信息为：\n​\t出生年月日：XXXX年X月X日\n​\t性别为：男/女\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package com.itheima.stringdemo; public class StringDemo11 { public static void main(String[] args) { //1.定义一个字符串记录身份证号码 String id = \u0026#34;321281202001011234\u0026#34;; //2.获取出生年月日 String year = id.substring(6, 10); String month = id.substring(10, 12); String day = id.substring(12, 14); System.out.println(\u0026#34;人物信息为：\u0026#34;); System.out.println(\u0026#34;出生年月日:\u0026#34; + year + \u0026#34;年\u0026#34; + month + \u0026#34;月\u0026#34; + day + \u0026#34;日\u0026#34;); //3.获取性别 char gender = id.charAt(16);//\u0026#39;3\u0026#39; ---\u0026gt; 3 //利用ASCII码表进行转换 //\u0026#39;0\u0026#39; ---\u0026gt; 48 //\u0026#39;1\u0026#39; ---\u0026gt; 49 //\u0026#39;2\u0026#39; ---\u0026gt; 50 //\u0026#39;3\u0026#39; ---\u0026gt; 51 //\u0026#39;4\u0026#39; ---\u0026gt; 52 //\u0026#39;5\u0026#39; ---\u0026gt; 53 //\u0026#39;6\u0026#39; ---\u0026gt; 54 //\u0026#39;7\u0026#39; ---\u0026gt; 55 //\u0026#39;8\u0026#39; ---\u0026gt; 56 //\u0026#39;9\u0026#39; ---\u0026gt; 57 int num = gender - 48; if(num % 2 == 0){ System.out.println(\u0026#34;性别为:女\u0026#34;); }else{ System.out.println(\u0026#34;性别为:男\u0026#34;); } } } 3.StringBuilder StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。\n当我们在拼接字符串和反转字符串的时候会使用到\n3.1 基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class StringBuilderDemo3 { public static void main(String[] args) { //1.创建对象 StringBuilder sb = new StringBuilder(\u0026#34;abc\u0026#34;); //2.添加元素 /*sb.append(1); sb.append(2.3); sb.append(true);*/ //反转 sb.reverse(); //获取长度 int len = sb.length(); System.out.println(len); //打印 //普及： //因为StringBuilder是Java已经写好的类 //java在底层对他做了一些特殊处理。 //打印对象不是地址值而是属性值。 System.out.println(sb); } } 3.2 链式编程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class StringBuilderDemo4 { public static void main(String[] args) { //1.创建对象 StringBuilder sb = new StringBuilder(); //2.添加字符串 sb.append(\u0026#34;aaa\u0026#34;).append(\u0026#34;bbb\u0026#34;).append(\u0026#34;ccc\u0026#34;).append(\u0026#34;ddd\u0026#34;); System.out.println(sb);//aaabbbcccddd //3.再把StringBuilder变回字符串 String str = sb.toString(); System.out.println(str);//aaabbbcccddd } } 3.3 练习1：对称字符串 需求：\n​\t键盘接受一个字符串，程序判断出该字符串是否是对称字符串，并在控制台打印是或不是\n对称字符串：123321、111 非对称字符串：123123 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class StringBuilderDemo6 { //使用StringBuilder的场景： //1.字符串的拼接 //2.字符串的反转 public static void main(String[] args) { //1.键盘录入一个字符串 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个字符串\u0026#34;); String str = sc.next(); //2.反转键盘录入的字符串 String result = new StringBuilder().append(str).reverse().toString(); //3.比较 if(str.equals(result)){ System.out.println(\u0026#34;当前字符串是对称字符串\u0026#34;); }else{ System.out.println(\u0026#34;当前字符串不是对称字符串\u0026#34;); } } } 3.4 练习2：拼接字符串 需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回。\n​ 调用该方法，并在控制台输出结果。\n​ 例如：数组为int[] arr = {1,2,3};\n​ 执行方法后的输出结果为：[1, 2, 3]\n代码示例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package com.itheima.stringbuilderdemo; public class StringBuilderDemo7 { public static void main(String[] args) { //1.定义数组 int[] arr = {1,2,3}; //2.调用方法把数组变成字符串 String str = arrToString(arr); System.out.println(str); } public static String arrToString(int[] arr){ StringBuilder sb = new StringBuilder(); sb.append(\u0026#34;[\u0026#34;); for (int i = 0; i \u0026lt; arr.length; i++) { if(i == arr.length - 1){ sb.append(arr[i]); }else{ sb.append(arr[i]).append(\u0026#34;, \u0026#34;); } } sb.append(\u0026#34;]\u0026#34;); return sb.toString(); } } 4. StringJoiner StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。 作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。 JDK8出现的 基本使用：\n1 2 3 4 5 6 //1.创建一个对象，并指定中间的间隔符号 StringJoiner sj = new StringJoiner(\u0026#34;---\u0026#34;); //2.添加元素 sj.add(\u0026#34;aaa\u0026#34;).add(\u0026#34;bbb\u0026#34;).add(\u0026#34;ccc\u0026#34;); //3.打印结果 System.out.println(sj);//aaa---bbb---ccc 1 2 3 4 5 6 7 8 9 10 //1.创建对象 StringJoiner sj = new StringJoiner(\u0026#34;, \u0026#34;,\u0026#34;[\u0026#34;,\u0026#34;]\u0026#34;); //2.添加元素 sj.add(\u0026#34;aaa\u0026#34;).add(\u0026#34;bbb\u0026#34;).add(\u0026#34;ccc\u0026#34;); int len = sj.length(); System.out.println(len);//15 //3.打印 System.out.println(sj);//[aaa, bbb, ccc] String str = sj.toString(); System.out.println(str);//[aaa, bbb, ccc] 关于字符串的小扩展： 字符串存储的内存原理\nString s = “abc”；直接赋值\n特点：\n​\t此时字符串abc是存在字符串常量池中的。\n​\t先检查字符串常量池中有没有字符串abc，如果有，不会创建新的，而是直接复用。如果没有abc，才会创建一个新的。\n所以，直接赋值的方式，代码简单，而且节约内存。\nnew出来的字符串\n看到new关键字，一定是在堆里面开辟了一个小空间。\nString s1 = new String（“abc”）；\nString s2 = “abc”；\ns1记录的是new出来的，在堆里面的地址值。\ns2是直接赋值的，所以记录的是字符串常量池中的地址值。\n==号比较的到底是什么？\n如果比较的是基本数据类型：比的是具体的数值是否相等。\n如果比较的是引用数据类型：比的是地址值是否相等。\n结论：==只能用于比较基本数据类型。不能比较引用数据类型。\n","date":"2024-10-14T02:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day10-%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"day10-字符串"},{"content":" 练习一：文字版格斗游戏 需求:\n​\t格斗游戏，每个游戏角色的姓名，血量，都不相同，在选定人物的时候（new对象的时候），这些信息就应该被确定下来。\n举例：\n​\t程序运行之后结果为：\n​\t姓名为:乔峰\t血量为:100\n​\t姓名为:鸠摩智\t血量为:100\n​\t乔峰举起拳头打了鸠摩智一下，造成了XX点伤害，鸠摩智还剩下XXX点血。\n​\t鸠摩智举起拳头打了鸠摩智一下，造成了XX点伤害，乔峰还剩下XXX点血。\n​\t乔峰举起拳头打了鸠摩智一下，造成了XX点伤害，鸠摩智还剩下XXX点血。\n​\t鸠摩智举起拳头打了鸠摩智一下，造成了XX点伤害，乔峰还剩下XXX点血。\n​\t乔峰K.O.了鸠摩智\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 public class GameTest { public static void main(String[] args) { //1.创建第一个角色 Role r1 = new Role(\u0026#34;乔峰\u0026#34;,100); //2.创建第二个角色 Role r2 = new Role(\u0026#34;鸠摩智\u0026#34;,100); //3.开始格斗 回合制游戏 while(true){ //r1开始攻击r2 r1.attack(r2); //判断r2的剩余血量 if(r2.getBlood() == 0){ System.out.println(r1.getName() + \u0026#34; K.O了\u0026#34; + r2.getName()); break; } //r2开始攻击r1 r2.attack(r1); if(r1.getBlood() == 0){ System.out.println(r2.getName() + \u0026#34; K.O了\u0026#34; + r1.getName()); break; } } } } public class Role { private String name; private int blood; public Role() { } public Role(String name, int blood) { this.name = name; this.blood = blood; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getBlood() { return blood; } public void setBlood(int blood) { this.blood = blood; } //定义一个方法用于攻击别人 //思考：谁攻击谁？ //Role r1 = new Role（）； //Role r2 = new Role（）； //r1.攻击(r2); //方法的调用者去攻击参数 public void attack(Role role) { //计算造成的伤害 1 ~ 20 Random r = new Random(); int hurt = r.nextInt(20) + 1; //剩余血量 int remainBoold = role.getBlood() - hurt; //对剩余血量做一个验证，如果为负数了，就修改为0 remainBoold = remainBoold \u0026lt; 0 ? 0 : remainBoold; //修改一下挨揍的人的血量 role.setBlood(remainBoold); //this表示方法的调用者 System.out.println(this.getName() + \u0026#34;举起拳头，打了\u0026#34; + role.getName() + \u0026#34;一下，\u0026#34; + \u0026#34;造成了\u0026#34; + hurt + \u0026#34;点伤害，\u0026#34; + role.getName() + \u0026#34;还剩下了\u0026#34; + remainBoold + \u0026#34;点血\u0026#34;); } } 练习二：文字版格斗游戏进阶 ​\t在上一个的基础上，我想看到人物的性别和长相，打斗的时候我想看到武功招式。\n举例：\n​\t程序运行之后结果为：\n​\t姓名为:乔峰\t血量为:100\t性别为:男\t长相为:气宇轩昂\n​\t姓名为:鸠摩智\t血量为:100\t性别为:男\t长相为:气宇轩昂\n​\t乔峰使出了一招【背心钉】，转到对方的身后，一掌向鸠摩智背心的灵台穴拍去。给鸠摩智造成一处瘀伤。\n​\t鸠摩智使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向乔峰。结果乔峰退了半步，毫发无损。\n​\t。。。。\n​\t乔峰K.O.了鸠摩智\n分析：\n​\t长相是提前定义好的，提前放在一个数组当中，程序运行之后，从数组中随机获取。\n1 2 3 4 //男生长相数组 String[] boyfaces = {\u0026#34;风流俊雅\u0026#34;, \u0026#34;气宇轩昂\u0026#34;, \u0026#34;相貌英俊\u0026#34;, \u0026#34;五官端正\u0026#34;, \u0026#34;相貌平平\u0026#34;, \u0026#34;一塌糊涂\u0026#34;, \u0026#34;面目狰狞\u0026#34;}; //女生长相数组 String[] girlfaces = {\u0026#34;美奂绝伦\u0026#34;, \u0026#34;沉鱼落雁\u0026#34;, \u0026#34;婷婷玉立\u0026#34;, \u0026#34;身材娇好\u0026#34;, \u0026#34;相貌平平\u0026#34;, \u0026#34;相貌简陋\u0026#34;, \u0026#34;惨不忍睹\u0026#34;}; ​\t武功招式也是提前定义好的，提前放在一个数组当中，程序运行之后，从数组随机获取\n1 2 3 4 5 6 7 8 //attack 攻击描述： String[] attacks_desc = { \u0026#34;%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。\u0026#34;, \u0026#34;%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。\u0026#34;, \u0026#34;%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。\u0026#34;, \u0026#34;%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。\u0026#34;, \u0026#34;%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。\u0026#34;, \u0026#34;%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。\u0026#34; ​\t受伤的提前也是提前定义好的，只不过不是随机了，根据剩余血量获取不同的描述\n1 2 3 4 5 6 7 8 9 10 //injured 受伤描述： String[] injureds_desc = { \u0026#34;结果%s退了半步，毫发无损\u0026#34;, \u0026#34;结果给%s造成一处瘀伤\u0026#34;, \u0026#34;结果一击命中，%s痛得弯下腰\u0026#34;, \u0026#34;结果%s痛苦地闷哼了一声，显然受了点内伤\u0026#34;, \u0026#34;结果%s摇摇晃晃，一跤摔倒在地\u0026#34;, \u0026#34;结果%s脸色一下变得惨白，连退了好几步\u0026#34;, \u0026#34;结果『轰』的一声，%s口中鲜血狂喷而出\u0026#34;, \u0026#34;结果%s一声惨叫，像滩软泥般塌了下去\u0026#34; ​\t其中输出语句跟以前不一样了，用的是System.out.printf（）；该输出语句支持%s占位符\n1 2 3 4 5 6 7 8 9 10 11 public class Test { public static void main(String[] args) { //两部分参数： //第一部分参数：要输出的内容%s（占位） //第二部分参数：填充的数据 System.out.printf(\u0026#34;你好啊%s\u0026#34;,\u0026#34;张三\u0026#34;);//用张三填充第一个%s System.out.println();//换行 System.out.printf(\u0026#34;%s你好啊%s\u0026#34;,\u0026#34;张三\u0026#34;,\u0026#34;李四\u0026#34;);//用张三填充第一个%s，李四填充第二个%s } } 最终代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 package com.itheima.test2; import java.util.Random; public class Role { private String name; private int blood; private char gender; private String face;//长相是随机的 String[] boyfaces = {\u0026#34;风流俊雅\u0026#34;, \u0026#34;气宇轩昂\u0026#34;, \u0026#34;相貌英俊\u0026#34;, \u0026#34;五官端正\u0026#34;, \u0026#34;相貌平平\u0026#34;, \u0026#34;一塌糊涂\u0026#34;, \u0026#34;面目狰狞\u0026#34;}; String[] girlfaces = {\u0026#34;美奂绝伦\u0026#34;, \u0026#34;沉鱼落雁\u0026#34;, \u0026#34;婷婷玉立\u0026#34;, \u0026#34;身材娇好\u0026#34;, \u0026#34;相貌平平\u0026#34;, \u0026#34;相貌简陋\u0026#34;, \u0026#34;惨不忍睹\u0026#34;}; //attack 攻击描述： String[] attacks_desc = { \u0026#34;%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。\u0026#34;, \u0026#34;%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。\u0026#34;, \u0026#34;%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。\u0026#34;, \u0026#34;%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。\u0026#34;, \u0026#34;%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。\u0026#34;, \u0026#34;%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。\u0026#34; }; //injured 受伤描述： String[] injureds_desc = { \u0026#34;结果%s退了半步，毫发无损\u0026#34;, \u0026#34;结果给%s造成一处瘀伤\u0026#34;, \u0026#34;结果一击命中，%s痛得弯下腰\u0026#34;, \u0026#34;结果%s痛苦地闷哼了一声，显然受了点内伤\u0026#34;, \u0026#34;结果%s摇摇晃晃，一跤摔倒在地\u0026#34;, \u0026#34;结果%s脸色一下变得惨白，连退了好几步\u0026#34;, \u0026#34;结果『轰』的一声，%s口中鲜血狂喷而出\u0026#34;, \u0026#34;结果%s一声惨叫，像滩软泥般塌了下去\u0026#34; }; public Role() { } public Role(String name, int blood, char gender) { this.name = name; this.blood = blood; this.gender = gender; //随机长相 setFace(gender); } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public String getFace() { return face; } public void setFace(char gender) { Random r = new Random(); //长相是随机的 if (gender == \u0026#39;男\u0026#39;) { //从boyfaces里面随机长相 int index = r.nextInt(boyfaces.length); this.face = boyfaces[index]; } else if (gender == \u0026#39;女\u0026#39;) { //从girlfaces里面随机长相 int index = r.nextInt(girlfaces.length); this.face = girlfaces[index]; } else { this.face = \u0026#34;面目狰狞\u0026#34;; } } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getBlood() { return blood; } public void setBlood(int blood) { this.blood = blood; } //定义一个方法用于攻击别人 //思考：谁攻击谁？ //Role r1 = new Role（）； //Role r2 = new Role（）； //r1.攻击(r2); //方法的调用者去攻击参数 public void attack(Role role) { Random r = new Random(); int index = r.nextInt(attacks_desc.length); String KungFu = attacks_desc[index]; //输出一个攻击的效果 System.out.printf(KungFu, this.getName(), role.getName()); System.out.println(); //计算造成的伤害 1 ~ 20 int hurt = r.nextInt(20) + 1; //剩余血量 int remainBoold = role.getBlood() - hurt; //对剩余血量做一个验证，如果为负数了，就修改为0 remainBoold = remainBoold \u0026lt; 0 ? 0 : remainBoold; //修改一下挨揍的人的血量 role.setBlood(remainBoold); //受伤的描述 //血量\u0026gt; 90 0索引的描述 //80 ~ 90 1索引的描述 //70 ~ 80 2索引的描述 //60 ~ 70 3索引的描述 //40 ~ 60 4索引的描述 //20 ~ 40 5索引的描述 //10 ~ 20 6索引的描述 //小于10的 7索引的描述 if (remainBoold \u0026gt; 90) { System.out.printf(injureds_desc[0], role.getName()); }else if(remainBoold \u0026gt; 80 \u0026amp;\u0026amp; remainBoold \u0026lt;= 90){ System.out.printf(injureds_desc[1], role.getName()); }else if(remainBoold \u0026gt; 70 \u0026amp;\u0026amp; remainBoold \u0026lt;= 80){ System.out.printf(injureds_desc[2], role.getName()); }else if(remainBoold \u0026gt; 60 \u0026amp;\u0026amp; remainBoold \u0026lt;= 70){ System.out.printf(injureds_desc[3], role.getName()); }else if(remainBoold \u0026gt; 40 \u0026amp;\u0026amp; remainBoold \u0026lt;= 60){ System.out.printf(injureds_desc[4], role.getName()); }else if(remainBoold \u0026gt; 20 \u0026amp;\u0026amp; remainBoold \u0026lt;= 40){ System.out.printf(injureds_desc[5], role.getName()); }else if(remainBoold \u0026gt; 10 \u0026amp;\u0026amp; remainBoold \u0026lt;= 20){ System.out.printf(injureds_desc[6], role.getName()); }else{ System.out.printf(injureds_desc[7], role.getName()); } System.out.println(); } public void showRoleInfo() { System.out.println(\u0026#34;姓名为：\u0026#34; + getName()); System.out.println(\u0026#34;血量为：\u0026#34; + getBlood()); System.out.println(\u0026#34;性别为：\u0026#34; + getGender()); System.out.println(\u0026#34;长相为：\u0026#34; + getFace()); } } package com.itheima.test2; public class GameTest { public static void main(String[] args) { //1.创建第一个角色 Role r1 = new Role(\u0026#34;乔峰\u0026#34;,100,\u0026#39;男\u0026#39;); //2.创建第二个角色 Role r2 = new Role(\u0026#34;鸠摩智\u0026#34;,100,\u0026#39;男\u0026#39;); //展示一下角色的信息 r1.showRoleInfo(); r2.showRoleInfo(); //3.开始格斗 回合制游戏 while(true){ //r1开始攻击r2 r1.attack(r2); //判断r2的剩余血量 if(r2.getBlood() == 0){ System.out.println(r1.getName() + \u0026#34; K.O了\u0026#34; + r2.getName()); break; } //r2开始攻击r1 r2.attack(r1); if(r1.getBlood() == 0){ System.out.println(r2.getName() + \u0026#34; K.O了\u0026#34; + r1.getName()); break; } } } } 练习三：对象数组（商品） 需求：\n​\t定义数组存储3个商品对象。\n​\t商品的属性：商品的id，名字，价格，库存。\n​\t创建三个商品对象，并把商品对象存入到数组当中。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package com.itheima.test3; public class Goods { private String id; private String name; private double price; private int count; public Goods() { } public Goods(String id, String name, double price, int count) { this.id = id; this.name = name; this.price = price; this.count = count; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getPrice() { return price; } public void setPrice(double price) { this.price = price; } public int getCount() { return count; } public void setCount(int count) { this.count = count; } } package com.itheima.test3; public class GoodsTest { public static void main(String[] args) { //1.创建一个数组 Goods[] arr = new Goods[3]; //2.创建三个商品对象 Goods g1 = new Goods(\u0026#34;001\u0026#34;,\u0026#34;华为P40\u0026#34;,5999.0,100); Goods g2 = new Goods(\u0026#34;002\u0026#34;,\u0026#34;保温杯\u0026#34;,227.0,50); Goods g3 = new Goods(\u0026#34;003\u0026#34;,\u0026#34;枸杞\u0026#34;,12.7,70); //3.把商品添加到数组中 arr[0] = g1; arr[1] = g2; arr[2] = g3; //4.遍历 for (int i = 0; i \u0026lt; arr.length; i++) { //i 索引 arr[i] 元素 Goods goods = arr[i]; System.out.println(goods.getId() + \u0026#34;, \u0026#34; + goods.getName() + \u0026#34;, \u0026#34; + goods.getPrice() + \u0026#34;, \u0026#34; + goods.getCount()); } } } 练习四：对象数组（汽车） 需求：\n​\t定义数组存储3部汽车对象。\n​\t汽车的属性：品牌，价格，颜色。\n​\t创建三个汽车对象，数据通过键盘录入而来，并把数据存入到数组当中。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 package com.itheima.test5; public class Car { private String brand;//品牌 private int price;//价格 private String color;//颜色 public Car() { } public Car(String brand, int price, String color) { this.brand = brand; this.price = price; this.color = color; } public String getBrand() { return brand; } public void setBrand(String brand) { this.brand = brand; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } package com.itheima.test5; import java.util.Scanner; public class CarTest { public static void main(String[] args) { //1.创建一个数组用来存3个汽车对象 Car[] arr = new Car[3]; //2.创建汽车对象，数据来自于键盘录入 Scanner sc = new Scanner(System.in); for (int i = 0; i \u0026lt; arr.length; i++) { //创建汽车的对象 Car c = new Car(); //录入品牌 System.out.println(\u0026#34;请输入汽车的品牌\u0026#34;); String brand = sc.next(); c.setBrand(brand); //录入价格 System.out.println(\u0026#34;请输入汽车的价格\u0026#34;); int price = sc.nextInt(); c.setPrice(price); //录入颜色 System.out.println(\u0026#34;请输入汽车的颜色\u0026#34;); String color = sc.next(); c.setColor(color); //把汽车对象添加到数组当中 arr[i] = c; } //3.遍历数组 for (int i = 0; i \u0026lt; arr.length; i++) { Car car = arr[i]; System.out.println(car.getBrand() + \u0026#34;, \u0026#34; + car.getPrice() + \u0026#34;, \u0026#34; + car.getColor()); } } } 练习五：对象数组（手机） 需求 :\n​\t定义数组存储3部手机对象。\n​\t手机的属性：品牌，价格，颜色。\n​\t要求，计算出三部手机的平均价格\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package com.itheima.test6; public class Phone { private String brand;//品牌 private int price;//价格 private String color;//颜色 public Phone() { } public Phone(String brand, int price, String color) { this.brand = brand; this.price = price; this.color = color; } public String getBrand() { return brand; } public void setBrand(String brand) { this.brand = brand; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } package com.itheima.test6; import java.math.BigDecimal; public class PhoneTest { public static void main(String[] args) { //1.创建一个数组 Phone[] arr = new Phone[3]; //2.创建手机的对象 Phone p1 = new Phone(\u0026#34;小米\u0026#34;,1999,\u0026#34;白色\u0026#34;); Phone p2 = new Phone(\u0026#34;华为\u0026#34;,4999,\u0026#34;蓝色\u0026#34;); Phone p3 = new Phone(\u0026#34;魅族\u0026#34;,3999,\u0026#34;红色\u0026#34;); //3.把手机对象添加到数组当中 arr[0] = p1; arr[1] = p2; arr[2] = p3; //4.获取三部手机的平均价格 int sum = 0; for (int i = 0; i \u0026lt; arr.length; i++) { //i 索引 arr[i] 元素（手机对象） Phone phone = arr[i]; sum = sum + phone.getPrice(); } //5.求平均值 //数据能不写死，尽量不写死 //int avg = sum / arr.length; double avg2 = sum * 1.0 / arr.length; System.out.println(avg2);//3665.6666666666665 } } 练习六：对象数组（女朋友） 需求：\n​\t定义数组存储4个女朋友的对象\n​\t女朋友的属性：姓名、年龄、性别、爱好\n​\t要求1：计算出四女朋友的平均年龄\n​\t要求2：统计年龄比平均值低的女朋友有几个？并把她们的所有信息打印出来。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 package com.itheima.test7; public class GirlFriend { private String name;//姓名 private int age;//年龄 private String gender;//性别 private String hobby;//爱好 public GirlFriend() { } public GirlFriend(String name, int age, String gender, String hobby) { this.name = name; this.age = age; this.gender = gender; this.hobby = hobby; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public String getHobby() { return hobby; } public void setHobby(String hobby) { this.hobby = hobby; } } package com.itheima.test7; public class GirlFriendTest { public static void main(String[] args) { //1.定义数组存入女朋友的对象 GirlFriend[] arr = new GirlFriend[4]; //2.创建女朋友对象 GirlFriend gf1 = new GirlFriend(\u0026#34;小诗诗\u0026#34;,18,\u0026#34;萌妹子\u0026#34;,\u0026#34;吃零食\u0026#34;); GirlFriend gf2 = new GirlFriend(\u0026#34;小丹丹\u0026#34;,19,\u0026#34;萌妹子\u0026#34;,\u0026#34;玩游戏\u0026#34;); GirlFriend gf3 = new GirlFriend(\u0026#34;小惠惠\u0026#34;,20,\u0026#34;萌妹子\u0026#34;,\u0026#34;看书，学习\u0026#34;); GirlFriend gf4 = new GirlFriend(\u0026#34;小莉莉\u0026#34;,21,\u0026#34;憨妹子\u0026#34;,\u0026#34;睡觉\u0026#34;); //3.把对象添加到数组当中 arr[0] = gf1; arr[1] = gf2; arr[2] = gf3; arr[3] = gf4; //4.求和 int sum = 0; for (int i = 0; i \u0026lt; arr.length; i++) { //i 索引 arr[i] 元素（女朋友对象） GirlFriend gf = arr[i]; //累加 sum = sum + gf.getAge(); } //5.平均值 int avg = sum / arr.length; //6.统计年龄比平均值低的有几个，打印他们的信息 int count = 0; for (int i = 0; i \u0026lt; arr.length; i++) { GirlFriend gf = arr[i]; if(gf.getAge() \u0026lt; avg){ count++; System.out.println(gf.getName() + \u0026#34;, \u0026#34; + gf.getAge() + \u0026#34;, \u0026#34; + gf.getGender() + \u0026#34;, \u0026#34; + gf.getHobby()); } } System.out.println(count + \u0026#34;个\u0026#34;); } } 练习七：复杂的对象数组操作 定义一个长度为3的数组，数组存储1~3名学生对象作为初始数据，学生对象的学号，姓名各不相同。\n学生的属性：学号，姓名，年龄。\n要求1：再次添加一个学生对象，并在添加的时候进行学号的唯一性判断。\n要求2：添加完毕之后，遍历所有学生信息。\n要求3：通过id删除学生信息\n​ 如果存在，则删除，如果不存在，则提示删除失败。\n要求4：删除完毕之后，遍历所有学生信息。\n要求5：查询数组id为“heima002”的学生，如果存在，则将他的年龄+1岁\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package com.itheima.test8; public class Student { private int id; private String name; private int age; public Student() { } public Student(int id, String name, int age) { this.id = id; this.name = name; this.age = age; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 public class Test { public static void main(String[] args) { /*定义一个长度为3的数组，数组存储1~3名学生对象作为初始数据，学生对象的学号，姓名各不相同。 学生的属性：学号，姓名，年龄。 要求1：再次添加一个学生对象，并在添加的时候进行学号的唯一性判断。 要求2：添加完毕之后，遍历所有学生信息。 */ //1.创建一个数组用来存储学生对象 Student[] arr = new Student[3]; //2.创建学生对象并添加到数组当中 Student stu1 = new Student(1, \u0026#34;zhangsan\u0026#34;, 23); Student stu2 = new Student(2, \u0026#34;lisi\u0026#34;, 24); //3.把学生对象添加到数组当中 arr[0] = stu1; arr[1] = stu2; //要求1：再次添加一个学生对象，并在添加的时候进行学号的唯一性判断。 Student stu4 = new Student(1, \u0026#34;zhaoliu\u0026#34;, 26); //唯一性判断 //已存在 --- 不用添加 //不存在 --- 就可以把学生对象添加进数组 boolean flag = contains(arr, stu4.getId()); if(flag){ //已存在 --- 不用添加 System.out.println(\u0026#34;当前id重复，请修改id后再进行添加\u0026#34;); }else{ //不存在 --- 就可以把学生对象添加进数组 //把stu4添加到数组当中 //1.数组已经存满 --- 只能创建一个新的数组，新数组的长度 = 老数组 + 1 //2.数组没有存满 --- 直接添加 int count = getCount(arr); if(count == arr.length){ //已经存满 //创建一个新的数组，长度 = 老数组的长度 + 1 //然后把老数组的元素，拷贝到新数组当中 Student[] newArr = creatNewArr(arr); //把stu4添加进去 newArr[count] = stu4; //要求2：添加完毕之后，遍历所有学生信息。 printArr(newArr); }else{ //没有存满 //[stu1,stu2,null] //getCount获取到的是2，表示数组当中已经有了2个元素 //还有一层意思：如果下一次要添加数据，就是添加到2索引的位置 arr[count] = stu4; //要求2：添加完毕之后，遍历所有学生信息。 printArr(arr); } } } public static void printArr(Student[] arr){ for (int i = 0; i \u0026lt; arr.length; i++) { Student stu = arr[i]; if(stu != null){ System.out.println(stu.getId() + \u0026#34;, \u0026#34; + stu.getName() + \u0026#34;, \u0026#34; + stu.getAge()); } } } //创建一个新的数组，长度 = 老数组的长度 + 1 //然后把老数组的元素，拷贝到新数组当中 public static Student[] creatNewArr(Student[] arr){ Student[] newArr = new Student[arr.length + 1]; //循环遍历得到老数组中的每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //把老数组中的元素添加到新数组当中 newArr[i] = arr[i]; } //把新数组返回 return newArr; } //定义一个方法判断数组中已经存了几个元素 public static int getCount(Student[] arr){ //定义一个计数器用来统计 int count = 0; for (int i = 0; i \u0026lt; arr.length; i++) { if(arr[i] != null){ count++; } } //当循环结束之后，我就知道了数组中一共有几个元素 return count; } //1.我要干嘛？ 唯一性判断 //2.我干这件事情，需要什么才能完成？ 数组 id //3.调用处是否需要继续使用方法的结果？ 必须返回 public static boolean contains(Student[] arr, int id) { for (int i = 0; i \u0026lt; arr.length; i++) { //依次获取到数组里面的每一个学生对象 Student stu = arr[i]; if(stu != null){ //获取数组中学生对象的id int sid = stu.getId(); //比较 if(sid == id){ return true; } } } //当循环结束之后，还没有找到一样的，那么就表示数组中要查找的id是不存在的。 return false; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 package com.itheima.test8; public class Test3 { public static void main(String[] args) { /*定义一个长度为3的数组，数组存储1~3名学生对象作为初始数据，学生对象的学号，姓名各不相同。 学生的属性：学号，姓名，年龄。 要求3：通过id删除学生信息 如果存在，则删除，如果不存在，则提示删除失败。 要求4：删除完毕之后，遍历所有学生信息。 */ //1.创建一个数组用来存储学生对象 Student[] arr = new Student[3]; //2.创建学生对象并添加到数组当中 Student stu1 = new Student(1, \u0026#34;zhangsan\u0026#34;, 23); Student stu2 = new Student(2, \u0026#34;lisi\u0026#34;, 24); Student stu3 = new Student(3, \u0026#34;wangwu\u0026#34;, 25); //3.把学生对象添加到数组当中 arr[0] = stu1; arr[1] = stu2; arr[2] = stu3; /*要求3：通过id删除学生信息 如果存在，则删除，如果不存在，则提示删除失败。*/ //要找到id在数组中对应的索引 int index = getIndex(arr, 2); if (index \u0026gt;= 0){ //如果存在，则删除 arr[index] = null; //遍历数组 printArr(arr); }else{ //如果不存在，则提示删除失败 System.out.println(\u0026#34;当前id不存在，删除失败\u0026#34;); } } //1.我要干嘛？ 找到id在数组中的索引 //2.我需要什么？ 数组 id //3.调用处是否需要继续使用方法的结果？ 要 public static int getIndex(Student[] arr , int id){ for (int i = 0; i \u0026lt; arr.length; i++) { //依次得到每一个学生对象 Student stu = arr[i]; //对stu进行一个非空判断 if(stu != null){ int sid = stu.getId(); if(sid == id){ return i; } } } //当循环结束之后，还没有找到就表示不存在 return -1; } public static void printArr(Student[] arr){ for (int i = 0; i \u0026lt; arr.length; i++) { Student stu = arr[i]; if(stu != null){ System.out.println(stu.getId() + \u0026#34;, \u0026#34; + stu.getName() + \u0026#34;, \u0026#34; + stu.getAge()); } } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 package com.itheima.test8; public class Test4 { public static void main(String[] args) { /*定义一个长度为3的数组，数组存储1~3名学生对象作为初始数据，学生对象的学号，姓名各不相同。 学生的属性：学号，姓名，年龄。 要求5：查询数组id为“2”的学生，如果存在，则将他的年龄+1岁*/ //1.创建一个数组用来存储学生对象 Student[] arr = new Student[3]; //2.创建学生对象并添加到数组当中 Student stu1 = new Student(1, \u0026#34;zhangsan\u0026#34;, 23); Student stu2 = new Student(2, \u0026#34;lisi\u0026#34;, 24); Student stu3 = new Student(3, \u0026#34;wangwu\u0026#34;, 25); //3.把学生对象添加到数组当中 arr[0] = stu1; arr[1] = stu2; arr[2] = stu3; //4.先要找到id为2的学生对于的索引 int index = getIndex(arr, 2); //5.判断索引 if(index \u0026gt;= 0){ //存在， 则将他的年龄+1岁 Student stu = arr[index]; //把原来的年龄拿出来 int newAge = stu.getAge() + 1; //把+1之后的年龄塞回去 stu.setAge(newAge); //遍历数组 printArr(arr); }else{ //不存在，则直接提示 System.out.println(\u0026#34;当前id不存在，修改失败\u0026#34;); } } //1.我要干嘛？ 找到id在数组中的索引 //2.我需要什么？ 数组 id //3.调用处是否需要继续使用方法的结果？ 要 public static int getIndex(Student[] arr , int id){ for (int i = 0; i \u0026lt; arr.length; i++) { //依次得到每一个学生对象 Student stu = arr[i]; //对stu进行一个非空判断 if(stu != null){ int sid = stu.getId(); if(sid == id){ return i; } } } //当循环结束之后，还没有找到就表示不存在 return -1; } public static void printArr(Student[] arr){ for (int i = 0; i \u0026lt; arr.length; i++) { Student stu = arr[i]; if(stu != null){ System.out.println(stu.getId() + \u0026#34;, \u0026#34; + stu.getName() + \u0026#34;, \u0026#34; + stu.getAge()); } } } } ","date":"2024-10-14T01:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day09-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83/","title":"day09-面向对象综合训练"},{"content":"前言 小米电脑管家配合澎湃系统的小米手机可以实现非常多的功能，其中我最喜欢的还属跨设备通话和跨设备剪切板了。\n但小米电脑管家在安装时会检测电脑是不是小米旗下的，所以在安装时需要跳过这一验证。\n第一步 下载小米电脑管家安装包 在浏览器搜索小米电脑管家；（或者直接点击Xiaomi HyperConnect 跨端智联跳转）\n进入官网，往下拉，找到下载链接\n第二步 下载跳过验证补丁 这里我己经准备好了补丁，点击百度网盘下载即可\n(提取码：5bxk)\n下载得到\n第三步 安装 将下载好的安装包和补丁放在同一个文件夹内；\n双击安装包，进行安装。\n接下来就可以正常使用了。\n感谢 感谢酷安大佬发现的解决方法和补丁\n","date":"2024-10-13T14:38:00+08:00","image":"https://AXiao-HOLO.github.io/p/%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%84%91%E7%AE%A1%E5%AE%B6-%E9%9D%9E%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%84%91%E7%AE%A1%E5%AE%B6%E7%9A%84%E6%95%99%E7%A8%8B/Snipaste_2024-10-13_15-16-43_hu1963376354950976600.png","permalink":"https://AXiao-HOLO.github.io/p/%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%84%91%E7%AE%A1%E5%AE%B6-%E9%9D%9E%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%B0%8F%E7%B1%B3%E7%94%B5%E8%84%91%E7%AE%A1%E5%AE%B6%E7%9A%84%E6%95%99%E7%A8%8B/","title":"小米电脑管家-非小米电脑安装小米电脑管家的教程"},{"content":" 1. 类和对象 1.1 类和对象的理解 客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。\n类 类的理解 类是对现实生活中一类具有共同属性和行为的事物的抽象 类是对象的数据类型，类是具有相同属性和行为的一组对象的集合 简单理解：类就是对现实事物的一种描述 类的组成 属性：指事物的特征，例如：手机事物（品牌，价格，尺寸） 行为：指事物能执行的操作，例如：手机事物（打电话，发短信） 类和对象的关系 类：类是对现实生活中一类具有共同属性和行为的事物的抽象 对象：是能够看得到摸的着的真实存在的实体 简单理解：类是对事物的一种描述，对象则为具体存在的事物 1.2 类的定义 类的组成是由属性和行为两部分组成\n属性：在类中通过成员变量来体现（类中方法外的变量） 行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可） 类的定义步骤：\n①定义类\n②编写类的成员变量\n③编写类的成员方法\n1 2 3 4 5 6 7 8 9 public class 类名 { // 成员变量 变量1的数据类型 变量1； 变量2的数据类型 变量2; … // 成员方法 方法1; 方法2;\t} 示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 /* 手机类： 类名： 手机(Phone) 成员变量： 品牌(brand) 价格(price) 成员方法： 打电话(call) 发短信(sendMessage) */ public class Phone { //成员变量 String brand; int price; //成员方法 public void call() { System.out.println(\u0026#34;打电话\u0026#34;); } public void sendMessage() { System.out.println(\u0026#34;发短信\u0026#34;); } } 1.3 对象的使用 创建对象的格式： 类名 对象名 = new 类名(); 调用成员的格式： 对象名.成员变量 对象名.成员方法(); 示例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /* 创建对象 格式：类名 对象名 = new 类名(); 范例：Phone p = new Phone(); 使用对象 1：使用成员变量 格式：对象名.变量名 范例：p.brand 2：使用成员方法 格式：对象名.方法名() 范例：p.call() */ public class PhoneDemo { public static void main(String[] args) { //创建对象 Phone p = new Phone(); //使用成员变量 System.out.println(p.brand); System.out.println(p.price); p.brand = \u0026#34;小米\u0026#34;; p.price = 2999; System.out.println(p.brand); System.out.println(p.price); //使用成员方法 p.call(); p.sendMessage(); } } 1.4 学生对象-练习 需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用 分析： 成员变量：姓名，年龄… 成员方法：学习，做作业… 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class Student { //成员变量 String name; int age; //成员方法 public void study() { System.out.println(\u0026#34;好好学习，天天向上\u0026#34;); } public void doHomework() { System.out.println(\u0026#34;键盘敲烂，月薪过万\u0026#34;); } } /* 学生测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); //使用对象 System.out.println(s.name + \u0026#34;,\u0026#34; + s.age); s.name = \u0026#34;林青霞\u0026#34;; s.age = 30; System.out.println(s.name + \u0026#34;,\u0026#34; + s.age); s.study(); s.doHomework(); } } 2. 对象内存图 2.1 单个对象内存图 成员变量使用过程 成员方法调用过程 2.2 多个对象内存图 成员变量使用过程 成员方法调用过程 总结：\n多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份\n3. 成员变量和局部变量 3.1 成员变量和局部变量的区别 类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上） 内存中位置不同：成员变量（堆内存）局部变量（栈内存） 生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失） 初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用） 4. 封装 4.1 封装思想 封装概述 是面向对象三大特征之一（封装，继承，多态）\n对象代表什么，就得封装对应的数据，并提供数据对应的行为\n封装代码实现 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()/setXxx()方法\n4.2 private关键字 private是一个修饰符，可以用来修饰成员（成员变量，成员方法）\n被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作\n提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰 提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰 示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 /* 学生类 */ class Student { //成员变量 String name; private int age; //提供get/set方法 public void setAge(int a) { if(a\u0026lt;0 || a\u0026gt;120) { System.out.println(\u0026#34;你给的年龄有误\u0026#34;); } else { age = a; } } public int getAge() { return age; } //成员方法 public void show() { System.out.println(name + \u0026#34;,\u0026#34; + age); } } /* 学生测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); //给成员变量赋值 s.name = \u0026#34;林青霞\u0026#34;; s.setAge(30); //调用show方法 s.show(); } } 4.3 private的使用 需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出 林青霞，30\n示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* 学生类 */ class Student { //成员变量 private String name; private int age; //get/set方法 public void setName(String n) { name = n; } public String getName() { return name; } public void setAge(int a) { age = a; } public int getAge() { return age; } public void show() { System.out.println(name + \u0026#34;,\u0026#34; + age); } } /* 学生测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); //使用set方法给成员变量赋值 s.setName(\u0026#34;林青霞\u0026#34;); s.setAge(30); s.show(); //使用get方法获取成员变量的值 System.out.println(s.getName() + \u0026#34;---\u0026#34; + s.getAge()); System.out.println(s.getName() + \u0026#34;,\u0026#34; + s.getAge()); } } 4.4 this关键字 this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题） 方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量 方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public class Student { private String name; private int age; public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public int getAge() { return age; } public void show() { System.out.println(name + \u0026#34;,\u0026#34; + age); } } 5. 构造方法 5.1 构造方法概述 构造方法是一种特殊的方法\n作用：创建对象 Student stu = new Student();\n格式：\npublic class 类名{\n​ 修饰符 类名( 参数 ) {\n​ }\n}\n功能：主要是完成对象数据的初始化\n示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Student { private String name; private int age; //构造方法 public Student() { System.out.println(\u0026#34;无参构造方法\u0026#34;); } public void show() { System.out.println(name + \u0026#34;,\u0026#34; + age); } } /* 测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s = new Student(); s.show(); } } 5.2 构造方法的注意事项 构造方法的创建 如果没有定义构造方法，系统将给出一个默认的无参数构造方法 如果定义了构造方法，系统将不再提供默认的构造方法\n构造方法的重载 如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法\n推荐的使用方式 无论是否使用，都手工书写无参数构造方法\n重要功能！ 可以使用带参构造，为成员变量进行初始化\n示例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /* 学生类 */ class Student { private String name; private int age; public Student() {} public Student(String name) { this.name = name; } public Student(int age) { this.age = age; } public Student(String name,int age) { this.name = name; this.age = age; } public void show() { System.out.println(name + \u0026#34;,\u0026#34; + age); } } /* 测试类 */ public class StudentDemo { public static void main(String[] args) { //创建对象 Student s1 = new Student(); s1.show(); //public Student(String name) Student s2 = new Student(\u0026#34;林青霞\u0026#34;); s2.show(); //public Student(int age) Student s3 = new Student(30); s3.show(); //public Student(String name,int age) Student s4 = new Student(\u0026#34;林青霞\u0026#34;,30); s4.show(); } } 5.3 标准类制作 ① 类名需要见名知意\n② 成员变量使用private修饰\n③ 提供至少两个构造方法\n无参构造方法 带全部参数的构造方法 ④ get和set方法\n​\t提供每一个成员变量对应的setXxx()/getXxx()\n⑤ 如果还有其他行为，也需要写上\n5.4 练习1 需求：\n​\t定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。\n示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Student { //成员变量 private String name; private int age; //构造方法 public Student() { } public Student(String name, int age) { this.name = name; this.age = age; } //成员方法 public void setName(String name) { this.name = name; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public int getAge() { return age; } public void show() { System.out.println(name + \u0026#34;,\u0026#34; + age); } } /* 创建对象并为其成员变量赋值的两种方式 1:无参构造方法创建对象后使用setXxx()赋值 2:使用带参构造方法直接创建带有属性值的对象 */ public class StudentDemo { public static void main(String[] args) { //无参构造方法创建对象后使用setXxx()赋值 Student s1 = new Student(); s1.setName(\u0026#34;林青霞\u0026#34;); s1.setAge(30); s1.show(); //使用带参构造方法直接创建带有属性值的对象 Student s2 = new Student(\u0026#34;林青霞\u0026#34;,30); s2.show(); } } 5.4 练习2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 public class User { //1.私有化全部的成员变量 //2.空参构造 //3.带全部参数的构造 //4.针对于每一个私有化的成员变量都要提供其对应的get和set方法 //5.如果当前事物还有其他行为，那么也要写出来，比如学生的吃饭，睡觉等行为 private String username;//用户名 private String password;//密码 private String email;//邮箱 private char gender;//性别 private int age;//年龄 //空参构造方法 public User() { } //带全部参数的构造 public User(String username, String password, String email, char gender, int age) { this.username = username; this.password = password; this.email = email; this.gender = gender; this.age = age; } //get和set public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getEmail() { return email; } public void setEmail(String email) { this.email = email; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public void eat(){ System.out.println(username + \u0026#34;在吃饭\u0026#34;); } } public class Test { public static void main(String[] args) { //写一个标准的javabean类 //咱们在课后只要能把这个标准的javabean能自己写出来，那么就表示今天的知识点就ok了 //利用空参构造创建对象 User u1 = new User(); //如果利用空参创建对象，还想赋值只能用set方法赋值 u1.setUsername(\u0026#34;zhangsan\u0026#34;); u1.setPassword(\u0026#34;1234qwer\u0026#34;); u1.setEmail(\u0026#34;itheima@itcast.cn\u0026#34;); u1.setGender(\u0026#39;男\u0026#39;); u1.setAge(23); //获取属性的值并打印 System.out.println(u1.getUsername() + \u0026#34;, \u0026#34; + u1.getPassword() + \u0026#34;, \u0026#34; + u1.getEmail() + \u0026#34;, \u0026#34; + u1.getGender() + \u0026#34;, \u0026#34; + u1.getAge()); u1.eat(); System.out.println(\u0026#34;=============================\u0026#34;); //简单的办法 //利用带全部参数的构造来创建对象 //快捷键:ctrl + p User u2 = new User(\u0026#34;lisi\u0026#34;,\u0026#34;12345678\u0026#34;,\u0026#34;lisi@itcast.cn\u0026#34;,\u0026#39;女\u0026#39;,24); System.out.println(u2.getUsername() + \u0026#34;, \u0026#34; + u2.getPassword() + \u0026#34;, \u0026#34; + u2.getEmail() + \u0026#34;, \u0026#34; + u2.getGender() + \u0026#34;, \u0026#34; + u2.getAge()); u2.eat(); } } ","date":"2024-10-13T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","title":"day08-面向对象"},{"content":" 练习一：飞机票 需求:\n​\t机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。\n​\t按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 package com.itheima.test; import java.util.Scanner; public class Test1 { public static void main(String[] args) { /* 机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。 按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。*/ //分析： //1.键盘录入机票原价、月份、头等舱或经济舱 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入机票的原价\u0026#34;); int ticket = sc.nextInt(); System.out.println(\u0026#34;请输入当前的月份\u0026#34;); int month = sc.nextInt(); System.out.println(\u0026#34;请输入当前购买的舱位 0 头等舱 1 经济舱\u0026#34;); int seat = sc.nextInt(); //2.先判断月份是旺季还是淡季 //ctrl + alt + M 自动抽取方法 if (month \u0026gt;= 5 \u0026amp;\u0026amp; month \u0026lt;= 10) { //旺季 //3.继续判断当前机票是经济舱还是头等舱 //ticket = getPrice(ticket, seat, 0.9, 0.85); ticket = getTicket(ticket, seat, 0.9, 0.85); } else if ((month \u0026gt;= 1 \u0026amp;\u0026amp; month \u0026lt;= 4) || (month \u0026gt;= 11 \u0026amp;\u0026amp; month \u0026lt;= 12)) { //淡季 //ticket = getPrice(ticket, seat, 0.7, 0.65); ticket = getTicket(ticket, seat, 0.7, 0.65); } else { //表示键盘录入的月份是一个非法数据 System.out.println(\u0026#34;键盘录入的月份不合法\u0026#34;); } System.out.println(ticket); } public static int getTicket(int ticket, int seat, double v, double v2) { if (seat == 0) { //头等舱 ticket = (int) (ticket * v); } else if (seat == 1) { //经济舱 ticket = (int) (ticket * v2); } else { System.out.println(\u0026#34;没有这个舱位\u0026#34;); } return ticket; } //1.我要干嘛？根据舱位和折扣来计算最终的票价 //2.我干这件事，需要什么才能完成？原价 舱位 头等舱的折扣 经济舱的折扣 //3.方法的调用处是否需要继续使用这个结果 需要 /* public static int getPrice(int ticket, int seat, double v0, double v1) { if (seat == 0) { //头等舱 ticket = (int) (ticket * v0); } else if (seat == 1) { //经济舱 ticket = (int) (ticket * v1); } else { System.out.println(\u0026#34;没有这个舱位\u0026#34;); } return ticket; }*/ } 练习二：打印素数 ​\t判断101~200之间有多少个素数，并输出所有素数。\n备注：素数就是质数\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package com.itheima.test; public class Test2 { public static void main(String[] args) { //判断 101 ~ 200 之间有多少个素数，并打印所有素数 //思路一： 2 ~ 99 //定义变量i ，赋值100 //判断i是否为质数 //定义一个变量用来统计有多少个质数 int count = 0; //外循环：遍历101~200这个范围，依次得到这个范围之内的每一个数字 for (int i = 101; i \u0026lt;= 200; i++) { //i 依次表示循环中的每一个数字 //继续判断i是否为一个质数 boolean flag = true; //内循环:判断当前数字是否为一个质数。 for (int j = 2; j \u0026lt; i; j++) { //j 表示2~99之间的每一个数字 if(i % j == 0){ flag = false; //跳出单层循环，内循环 break; } } if(flag){ System.out.println(\u0026#34;当前数字\u0026#34;+i+\u0026#34;是质数\u0026#34;); count++; } } System.out.println(\u0026#34;一共有\u0026#34; + count + \u0026#34;个质数\u0026#34;); /* int i = 7; boolean flag = true; for (int j = 2; j \u0026lt; i; j++) { //j 表示2~99之间的每一个数字 if(i % j == 0){ flag = false; break; } } if(flag){ System.out.println(\u0026#34;当前数字是质数\u0026#34;); }else{ System.out.println(\u0026#34;当前数字不是一个质数\u0026#34;); }*/ } } 练习三：验证码 需求：\n​\t定义方法实现随机产生一个5位的验证码\n验证码格式：\n​\t长度为5\n​\t前四位是大写字母或者小写字母\n​\t最后一位是数字\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 package com.itheima.test; import java.util.Random; public class Test3 { public static void main(String[] args) { /* 需求： 定义方法实现随机产生一个5位的验证码 验证码格式： 长度为5 前四位是大写字母或者小写字母 最后一位是数字 */ //方法： //在以后如果我们要在一堆没有什么规律的数据中随机抽取 //可以先把这些数据放到数组当中 //再随机抽取一个索引 //分析： //1.大写字母和小写字母都放到数组当中 char[] chs = new char[52]; for (int i = 0; i \u0026lt; chs.length; i++) { //ASCII码表 if(i \u0026lt;= 25){ //添加小写字母 chs[i] = (char)(97 + i); }else{//27 //添加大写字母 // A --- 65 chs[i] = (char)(65 + i - 26); } } //定义一个字符串类型的变量，用来记录最终的结果 String result = \u0026#34;\u0026#34;; //2.随机抽取4次 //随机抽取数组中的索引 Random r = new Random(); for (int i = 0; i \u0026lt; 4; i++) { int randomIndex = r.nextInt(chs.length); //利用随机索引，获取对应的元素 //System.out.println(chs[randomIndex]); result = result + chs[randomIndex]; } //System.out.println(result); //3.随机抽取一个数字0~9 int number = r.nextInt(10); //生成最终的结果 result = result + number; //打印最终结果 System.out.println(result); } } 练习四：复制数组 需求：\n​\t把一个数组中的元素复制到另一个新数组中去。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.itheima.test; public class Test4 { public static void main(String[] args) { /* 需求： 把一个数组中的元素复制到另一个新数组中去。*/ //分析： //1.定义一个老数组并存储一些元素 int[] arr = {1,2,3,4,5}; //2.定义一个新数组的长度跟老数组一致 int[] newArr = new int[arr.length]; //3.遍历老数组，得到老数组中的每一个元素，依次存入到新数组当中 for (int i = 0; i \u0026lt; arr.length; i++) { //i 表示老数组中的索引。新数组中的每一个索引 //arr[i] 表示老数组中的元素 newArr[i] = arr[i]; } //4.新数组中已经存满元素了 for (int i = 0; i \u0026lt; newArr.length; i++) { System.out.println(newArr[i]); } } } 练习五：评委打分 需求 :\n​\t在唱歌比赛中，有6名评委给选手打分，分数范围是[0 - 100]之间的整数。选手的最后得分为：去掉最高分、最低分后的4个评委的平均分，请完成上述过程并计算出选手的得分。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 package com.itheima.test; import java.util.Scanner; public class Test5 { public static void main(String[] args) { //在唱歌比赛中，有6名评委给选手打分，分数范围是[0 - 100]之间的整数。 // 选手的最后得分为：去掉最高分、最低分后的4个评委的平均分，请完成上述过程并计算出选手的得分。 //分析： //1.定义一个数组，用来存储6名评委的打分（0~100） int[] scoreArr = getScores(); for (int i = 0; i \u0026lt; scoreArr.length; i++) { System.out.println(scoreArr[i]); } //2.求出数组中的最大值 int max = getMax(scoreArr); //3.求出数组中的最小值 int min = getMin(scoreArr); //4.求出数组中6个分数的总和 int sum = getSum(scoreArr); //5.（总和 - 最大值 - 最小值 ）/4 int avg = (sum - max - min)/(scoreArr.length - 2); //6.打印结果 System.out.println(\u0026#34;选手的最终得分为：\u0026#34; + avg); } public static int getSum(int[] scoreArr){ int sum = 0; for (int i = 0; i \u0026lt; scoreArr.length; i++) { sum = sum + scoreArr[i]; } return sum; } //求数组的最大值 public static int getMax(int[] scoreArr){ int max = scoreArr[0]; for (int i = 1; i \u0026lt; scoreArr.length; i++) { if(scoreArr[i] \u0026gt; max){ max = scoreArr[i]; } } return max; } //求数组的最小值 public static int getMin(int[] scoreArr){ int min = scoreArr[0]; for (int i = 1; i \u0026lt; scoreArr.length; i++) { if(scoreArr[i] \u0026lt; min){ min = scoreArr[i]; } } return min; } //1.我要干嘛？定义一个数组，用来存储6名评委的打分（0~100） //2.我需要什么？都不需要 //3.干完了这件事情，是否需要返回？必须返回 public static int[] getScores(){ //定义数组 int[] scores = new int[6]; //使用键盘录入的形式，输入分数：0~100 Scanner sc = new Scanner(System.in); for (int i = 0; i \u0026lt; scores.length; ) { System.out.println(\u0026#34;请输入评委的打分\u0026#34;); int score = sc.nextInt();//100 if(score \u0026gt;=0 \u0026amp;\u0026amp; score\u0026lt;= 100){ scores[i] = score; i++; }else{ System.out.println(\u0026#34;成绩超出了范围,继续录入，当前的i为：\u0026#34; + i); } } return scores; } } 练习六：数字加密 需求：\n​\t某系统的数字密码（大于0），比如1983，采用加密方式进行传输。\n规则如下：\n​\t先得到每位数，然后每位数都加上5 , 再对10求余，最后将所有数字反转，得到一串新数。\n举例：\n1 2 3 4 5 1\t9\t8\t3 +5\t6 14 13 8 %10\t6 4 3 8 反转\t8 3 4 6 加密后的结果就是：8346 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package com.itheima.test; public class Test6 { public static void main(String[] args) { /* 某系统的数字密码（大于0）。比如1983，采用加密方式进行传输， 规则如下： 每位数加上5 再对10求余， 最后将所有数字反转， 得到一串新数。 */ //分析： //1.把整数里面的每一位放到数组当中 int[] arr = {1, 9, 8, 3}; //2.加密 //每位数加上5 for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = arr[i] + 5; } //再对10求余， for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = arr[i] % 10; } //将所有数字反转 for (int i = 0, j = arr.length - 1; i \u0026lt; j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //8 3 4 6 --\u0026gt; 8346 //3.把数组里面的每一个数字进行拼接，变成加密之后的结果 int number = 0; for (int i = 0; i \u0026lt; arr.length; i++) { number = number * 10 + arr[i]; } System.out.println(number); } } 练习六扩展： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package com.itheima.test; public class Test7 { public static void main(String[] args) { //需求： //把整数上的每一位都添加到数组当中 //反向推导 //1.计算出数组的长度 int number = 12345; //定义一个变量临时记录number的值，就是为了第三步的时候再次使用 int temp = number; //定义一个变量进行统计 int count = 0; while(number != 0){ //每一次循环就去掉右边的一个数字 number = number / 10; //去掉一位计数器就自增一次。 count++; } //2.定义数组 //动态初始化 int[] arr = new int[count]; //3.把整数上的每一位都添加到数组当中 int index = arr.length -1; while(temp != 0){//12345 //获取temp里面的每一位数组 int ge = temp % 10; //再去掉右边的那位数字 temp = temp / 10; //把当前获取到的个位添加到数组当中 arr[index] = ge; index--; } //验证结果 1 2 3 4 5 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } } } 练习七：数字解密 把上一题加密之后的数据进行解密\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package com.itheima.test; public class Test8 { public static void main(String[] args) { /*某系统的数字密码（大于0）。比如1983，采用加密方式进行传输， 规则如下： 每位数加上5 再对10求余， 最后将所有数字反转， 得到一串新数。 按照以上规则进行解密： 比如1983加密之后变成8346，解密之后变成1983 */ //1.定义数组记录解密之后的结果 int[] arr = {8, 3, 4, 6}; //2.反转 for (int i = 0, j = arr.length - 1; i \u0026lt; j; i++, j--) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //3.由于加密是通过对10取余的方式进行获取的 //所以在解密的时候就需要判断，0~4之间+10 5~9数字不变 for (int i = 0; i \u0026lt; arr.length; i++) { if (arr[i] \u0026gt;= 0 \u0026amp;\u0026amp; arr[i] \u0026lt;= 4) { arr[i] = arr[i] + 10; } } //4.每一位减5 for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = arr[i] - 5; } //5.获取数组里面的每一位数字拼接成最终的结果 int number = 0; for (int i = 0; i \u0026lt; arr.length; i++) { number = number * 10 + arr[i]; } System.out.println(number); } } 练习八：抽奖 需求：\n​\t一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。打印效果如下：（随机顺序，不一定是下面的顺序）\n1 2 3 4 5 888元的奖金被抽出 588元的奖金被抽出 10000元的奖金被抽出 1000元的奖金被抽出 2元的奖金被抽出 解法一: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 package com.itheima.test; import java.util.Random; public class Test9 { public static void main(String[] args) { /* 需求： 一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。 请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。 打印效果如下：（随机顺序，不一定是下面的顺序） 888元的奖金被抽出 588元的奖金被抽出 10000元的奖金被抽出 1000元的奖金被抽出 2元的奖金被抽出 */ //分析： //1.定义数组表示奖池 int[] arr = {2, 588, 888, 1000, 10000}; //2.定义新数组用于存储抽奖的结果 int[] newArr = new int[arr.length]; //3.抽奖 Random r = new Random(); //因为有5个奖项，所以这里要循环5次 for (int i = 0; i \u0026lt; 5; ) { //获取随机索引 int randomIndex = r.nextInt(arr.length); //获取奖项 int prize = arr[randomIndex]; //判断当前的奖项是否存在，如果存在则重新抽取，如果不存在，就表示是有效奖项 boolean flag = contains(newArr, prize); if(!flag){ //把当前抽取到的奖项添加到newArr当中 newArr[i] = prize; //添加完毕之后，移动索引 i++; } } //4.遍历newArr for (int i = 0; i \u0026lt; newArr.length; i++) { System.out.println(newArr[i]); } } //判断prize在数组当中是否存在 //存在：true //不存在：false public static boolean contains(int[] arr,int prize){ for (int i = 0; i \u0026lt; arr.length; i++) { if(arr[i] == prize){ return true; } } return false; } } 解法二： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package com.itheima.test; import java.util.Random; public class Test10 { public static void main(String[] args) { /* 需求： 一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。 请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。 打印效果如下：（随机顺序，不一定是下面的顺序） 888元的奖金被抽出 588元的奖金被抽出 10000元的奖金被抽出 1000元的奖金被抽出 2元的奖金被抽出 */ //1.把奖池里面的所有奖项打乱顺序 int[] arr = {2, 588, 888, 1000, 10000}; Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { //获取随机索引 int randomIndex = r.nextInt(arr.length); //拿着i跟随机索引randomIndex上的值进行交换 int temp = arr[i]; arr[i] = arr[randomIndex]; arr[randomIndex] = temp; } //2.遍历奖池,从0索引开始获取每一个奖项 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.println(arr[i]); } } } 练习九：双色球 代码示例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 package com.itheima.test; import java.util.Random; import java.util.Scanner; public class Test11 { public static void main(String[] args) { //1.生成中奖号码 int[] arr = createNumber(); // 123456 7 System.out.println(\u0026#34;=======================\u0026#34;); for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } System.out.println(\u0026#34;=======================\u0026#34;); //2.用户输入彩票号码（红球 + 蓝球）//654321 int[] userInputArr = userInputNumber(); //3.判断用户的中奖情况 //红球 蓝球 int redCount = 0; int blueCount = 0; //判断红球 for (int i = 0; i \u0026lt; userInputArr.length - 1; i++) { int redNumber = userInputArr[i]; for (int j = 0; j \u0026lt; arr.length - 1; j++) { if(redNumber == arr[j]){ redCount++; //如果找到了，那么后面的数字就没有必要继续比较了 //跳出内循环，继续判断下一个红球号码是否中奖 break; } } } //判断蓝球 int blueNumber = userInputArr[userInputArr.length-1]; if(blueNumber == arr[arr.length - 1]){ blueCount++; } //根据红球的个数以及蓝球的个数来判断中奖情况 if(redCount == 6 \u0026amp;\u0026amp; blueCount == 1){ System.out.println(\u0026#34;恭喜你，中奖1000万\u0026#34;); }else if(redCount == 6 \u0026amp;\u0026amp; blueCount == 0){ System.out.println(\u0026#34;恭喜你，中奖500万\u0026#34;); }else if(redCount == 5 \u0026amp;\u0026amp; blueCount == 1){ System.out.println(\u0026#34;恭喜你，中奖3000\u0026#34;); }else if((redCount == 5 \u0026amp;\u0026amp; blueCount == 0) || (redCount == 4 \u0026amp;\u0026amp; blueCount == 1)){ System.out.println(\u0026#34;恭喜你，中奖200\u0026#34;); }else if((redCount == 4 \u0026amp;\u0026amp; blueCount == 0) || (redCount == 3 \u0026amp;\u0026amp; blueCount == 1)){ System.out.println(\u0026#34;恭喜你，中奖10\u0026#34;); }else if((redCount == 2 \u0026amp;\u0026amp; blueCount == 1) || (redCount == 1 \u0026amp;\u0026amp; blueCount == 1)|| (redCount == 0 \u0026amp;\u0026amp; blueCount == 1)){ System.out.println(\u0026#34;恭喜你，中奖5\u0026#34;); }else{ System.out.println(\u0026#34;谢谢参与，谢谢惠顾\u0026#34;); } } public static int[] userInputNumber() { //1.创建数组用于添加用户购买的彩票号码 //6个红球 1个蓝球 数组长度：7 int[] arr = new int[7]; //2.利用键盘录入让用输入 Scanner sc = new Scanner(System.in); //让用户输入红球号码 for (int i = 0; i \u0026lt; 6; ) { System.out.println(\u0026#34;请输入第\u0026#34; + (i + 1) + \u0026#34;个红球号码\u0026#34;); int redNumber = sc.nextInt(); //redNumber 在1~33 唯一不重复 if (redNumber \u0026gt;= 1 \u0026amp;\u0026amp; redNumber \u0026lt;= 33) { boolean flag = contains(arr, redNumber); if (!flag) { //不存在 //有效的，可以添加到数组当中 arr[i] = redNumber; i++; } else { //存在 System.out.println(\u0026#34;当前红球号码已经存在，请重新输入\u0026#34;); } } else { System.out.println(\u0026#34;当前红球号码超出范围\u0026#34;); } } //让用户输入篮球号码 System.out.println(\u0026#34;请输入篮球号码\u0026#34;); //1~16 while (true) { int blueNumber = sc.nextInt(); if (blueNumber \u0026gt;= 1 \u0026amp;\u0026amp; blueNumber \u0026lt;= 16) { arr[arr.length - 1] = blueNumber; break; } else { System.out.println(\u0026#34;当前篮球号码超出范围\u0026#34;); } } return arr; } public static int[] createNumber() { //1.创建数组用于添加中奖号码 //6个红球 1个蓝球 数组长度：7 int[] arr = new int[7]; //2.随机生成号码并添加到数组当中 //红球：不能重复的 1 2 3 4 5 6 //蓝球：可以跟红球号码重复 5 //生成红球号码并添加到数组当中 Random r = new Random(); for (int i = 0; i \u0026lt; 6; ) { //获取红球号码 int redNumber = r.nextInt(33) + 1; boolean flag = contains(arr, redNumber); if (!flag) { //把红球号码添加到数组当中 arr[i] = redNumber; i++; } } //生成蓝球号码并添加到数组当中 int blueNumber = r.nextInt(16) + 1; arr[arr.length - 1] = blueNumber; return arr; } //用于判断数组在数组中是否存在 public static boolean contains(int[] arr, int number) { for (int i = 0; i \u0026lt; arr.length; i++) { if (arr[i] == number) { return true; } } return false; } } ","date":"2024-10-12T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day07-%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/","title":"day07-综合练习"},{"content":" 1. 方法概述 1.1 方法的概念 ​\t方法（method）是程序中最小的执行单元\n注意： 方法必须先创建才可以使用，该过程成为方法定义 方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用 2. 方法的定义和调用 2.1 无参数方法定义和调用 定义格式：\n1 2 3 public static void 方法名 ( ) { // 方法体; } 范例：\n1 2 3 public static void method ( ) { // 方法体; } 调用格式：\n1 方法名(); 范例：\n1 method(); 注意：\n​\t方法必须先定义，后调用，否则程序将报错\n2.3 无参数方法的练习 需求：设计一个方法用于打印两个数中的较大数 思路： ①定义一个方法，用于打印两个数字中的较大数，例如getMax() ②方法中定义两个变量，用于保存两个数字 ③使用分支语句分两种情况对两个数字的大小关系进行处理 ④在main()方法中调用定义好的方法 代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法 getMax(); } //定义一个方法，用于打印两个数字中的较大数，例如getMax() public static void getMax() { //方法中定义两个变量，用于保存两个数字 int a = 10; int b = 20; //使用分支语句分两种情况对两个数字的大小关系进行处理 if(a \u0026gt; b) { System.out.println(a); } else { System.out.println(b); } } } 3. 带参数方法定义和调用 3.1 带参数方法定义和调用 定义格式：\n参数：由数据类型和变量名组成 - 数据类型 变量名\n参数范例：int a\n1 2 3 4 5 6 7 public static void 方法名 (参数1) { 方法体; } public static void 方法名 (参数1, 参数2, 参数3...) { 方法体; } 范例：\n1 2 3 4 5 6 public static void isEvenNumber(int number){ ... } public static void getMax(int num1, int num2){ ... } 注意：\n方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错 方法定义时，多个参数之间使用逗号( ，)分隔 调用格式：\n1 2 3 方法名(参数)； 方法名(参数1,参数2); 范例：\n1 2 3 isEvenNumber(10); getMax(10,20); 方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错 3.2 形参和实参 形参：方法定义中的参数 ​ 等同于变量定义格式，例如：int number\n实参：方法调用中的参数 ​ 等同于使用变量或常量，例如： 10 number\n3.3 带参数方法练习 需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数 } 思路： ①定义一个方法，用于打印两个数字中的较大数，例如getMax() ②为方法定义两个参数，用于接收两个数字 ③使用分支语句分两种情况对两个数字的大小关系进行处理 ④在main()方法中调用定义好的方法（使用常量） ⑤在main()方法中调用定义好的方法（使用变量） 代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法（使用常量） getMax(10,20); //调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的 //getMax(30); //getMax(10.0,20.0); //在main()方法中调用定义好的方法（使用变量） int a = 10; int b = 20; getMax(a, b); } //定义一个方法，用于打印两个数字中的较大数，例如getMax() //为方法定义两个参数，用于接收两个数字 public static void getMax(int a, int b) { //使用分支语句分两种情况对两个数字的大小关系进行处理 if(a \u0026gt; b) { System.out.println(a); } else { System.out.println(b); } } } 4. 带返回值方法的定义和调用 4.1 带返回值方法定义和调用 定义格式\n1 2 3 public static 数据类型 方法名 ( 参数 ) { return 数据 ; } 范例\n1 2 3 4 5 6 public static boolean isEvenNumber( int number ) { return true ; } public static int getMax( int a, int b ) { return 100 ; } 注意： 方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错 调用格式\n1 2 方法名 ( 参数 ) ; 数据类型 变量名 = 方法名 ( 参数 ) ; 范例\n1 2 isEvenNumber ( 5 ) ; boolean flag = isEvenNumber ( 5 ); 注意： 方法的返回值通常会使用变量接收，否则该返回值将无意义 4.2 带返回值方法练习1 需求：设计一个方法可以获取两个数的较大值，数据来自于参数\n思路：\n①定义一个方法，用于获取两个数字中的较大数 ②使用分支语句分两种情况对两个数字的大小关系进行处理 ③根据题设分别设置两种情况下对应的返回结果 ④在main()方法中调用定义好的方法并使用变量保存 ⑤在main()方法中调用定义好的方法并直接打印结果 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class MethodTest { public static void main(String[] args) { //在main()方法中调用定义好的方法并使用变量保存 int result = getMax(10,20); System.out.println(result); //在main()方法中调用定义好的方法并直接打印结果 System.out.println(getMax(10,20)); } //定义一个方法，用于获取两个数字中的较大数 public static int getMax(int a, int b) { //使用分支语句分两种情况对两个数字的大小关系进行处理 //根据题设分别设置两种情况下对应的返回结果 if(a \u0026gt; b) { return a; } else { return b; } } } 4.3 带返回值方法练习2 需求：\n​\t定义一个方法，求一家商场每个季度的营业额。根据方法结果再计算出全年营业额。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.itheima.demo; public class MethodDemo9 { public static void main(String[] args) { /*需求：定义一个方法，求一家商场每个季度的营业额。 根据方法结果再计算出全年营业额。*/ int sum1 = getSum(10, 20, 30); int sum2 = getSum(10, 20, 30); int sum3 = getSum(10, 20, 30); int sum4 = getSum(10, 20, 30); int sum = sum1 + sum2 + sum3 + sum4; System.out.println(sum); } //心得： //1.我要干嘛？ 决定了方法体 每个季度的营业额 //2.我干这件事情，需要什么才能完成？ 决定了形参 需要三个月的营业额 a b c //3.我干完这件事情，看调用处是否需要使用方法的结果。 决定了返回值 //如果需要使用，那么必须返回 //如果不需要使用，可以返回也可以不返回 public static int getSum(int month1,int month2,int month3){ int sum = month1 + month2 + month3; //因为方法的调用处，需要继续使用这个结果 //所以我们必须要把sum返回 return sum; } } 4.4 带返回值方法练习3 需求：\n​\t键盘录入两个圆的半径（整数），比较两个圆的面积。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import java.util.Scanner; public class MethodDemo10 { public static void main(String[] args) { //需求：键盘录入两个圆的半径（整数），比较两个圆的面积。 //键盘录入圆的半径 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入圆的半径\u0026#34;); int radii1 = sc.nextInt(); System.out.println(\u0026#34;请输入第二个圆的半径\u0026#34;); int radii2 = sc.nextInt(); double area1 = getArea(radii1); double area2 = getArea(radii2); if(area1 \u0026gt; area2){ System.out.println(\u0026#34;第一个圆更大\u0026#34;); }else{ System.out.println(\u0026#34;第二个圆更大\u0026#34;); } } //心得： //1.我要干嘛？ 求圆的面积 //2.我干这件事情，需要什么才能完成？ 半径 //3.方法的调用处，是否需要继续使用方法的结果 要比较 public static double getArea(int radii) { double area = 3.14 * radii * radii; return area; } } 5. 方法的注意事项 5.1 方法的注意事项 方法不能嵌套定义\n示例代码：\n1 2 3 4 5 6 7 8 9 10 11 public class MethodDemo { public static void main(String[] args) { } public static void methodOne() { public static void methodTwo() { // 这里会引发编译错误!!! } } } void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据\n示例代码：\n1 2 3 4 5 6 7 8 9 10 public class MethodDemo { public static void main(String[] args) { } public static void methodTwo() { //return 100; 编译错误，因为没有具体返回值类型 return;\t//System.out.println(100); return语句后面不能跟数据或代码 } } 5.2 方法的通用格式 格式：\n1 2 3 4 public static 返回值类型 方法名(参数) { 方法体; return 数据 ; } 解释：\npublic static 修饰符，目前先记住这个格式\n返回值类型\t方法操作完毕之后返回的数据的数据类型\n​\t如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return\n方法名\t调用方法时候使用的标识\n参数\t由数据类型和变量名组成，多个参数之间用逗号隔开\n方法体\t完成功能的代码块\nreturn\t如果方法操作完毕，有数据返回，用于把数据返回给调用者\n定义方法时，要做到两个明确\n明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型 明确参数：主要是明确参数的类型和数量 调用方法时的注意：\nvoid类型的方法，直接调用即可 非void类型的方法，推荐用变量接收调用 6. 方法重载 6.1 方法重载 方法重载概念\n方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载\n多个方法在同一个类中 多个方法具有相同的方法名 多个方法的参数不相同，类型不同或者数量不同 注意：\n重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式 重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载 正确范例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class MethodDemo { public static void fn(int a) { //方法体 } public static int fn(double a) { //方法体 } } public class MethodDemo { public static float fn(int a) { //方法体 } public static int fn(int a , int b) { //方法体 } } 错误范例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class MethodDemo { public static void fn(int a) { //方法体 } public static int fn(int a) { /*错误原因：重载与返回值无关*/ //方法体 } } public class MethodDemo01 { public static void fn(int a) { //方法体 } } public class MethodDemo02 { public static int fn(double a) { /*错误原因：这是两个类的两个fn方法*/ //方法体 } } 6.2 方法重载练习 需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long）\n思路：\n①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数 ②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数 ③定义所有的重载方法，两个byte类型与两个short类型参数 ④完成方法的调用，测试运行结果 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class MethodTest { public static void main(String[] args) { //调用方法 System.out.println(compare(10, 20)); System.out.println(compare((byte) 10, (byte) 20)); System.out.println(compare((short) 10, (short) 20)); System.out.println(compare(10L, 20L)); } //int public static boolean compare(int a, int b) { System.out.println(\u0026#34;int\u0026#34;); return a == b; } //byte public static boolean compare(byte a, byte b) { System.out.println(\u0026#34;byte\u0026#34;); return a == b; } //short public static boolean compare(short a, short b) { System.out.println(\u0026#34;short\u0026#34;); return a == b; } //long public static boolean compare(long a, long b) { System.out.println(\u0026#34;long\u0026#34;); return a == b; } } 7.3 数组遍历 需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]\n思路：\n①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);\nSystem.out.println(“内容”); 输出内容并换行\nSystem.out.print(“内容”); 输出内容不换行\nSystem.out.println(); 起到换行的作用\n②定义一个数组，用静态初始化完成数组元素初始化\n③定义一个方法，用数组遍历通用格式对数组进行遍历\n④用新的输出语句修改遍历操作\n⑤调用遍历方法\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Test1 { public static void main(String[] args) { /* //先打印数据，再进行换行 System.out.println(\u0026#34;aaa\u0026#34;); //只打印不换行 System.out.print(\u0026#34;bbb\u0026#34;); System.out.print(\u0026#34;ddd\u0026#34;); //不打印任何内容，只换行 System.out.println(); System.out.print(\u0026#34;cc\u0026#34;);*/ //设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] int[] arr = {1,2,3,4,5}; printArr(arr); } //1.我要遍历数组 //2.需要什么？ 数组 //3.调用处是否需要使用方法的结果。 public static void printArr(int[] arr){ System.out.print(\u0026#34;[\u0026#34;); for (int i = 0; i \u0026lt; arr.length; i++) { if(i == arr.length - 1){ System.out.println(arr[i] + \u0026#34;]\u0026#34;); }else{ System.out.print(arr[i] + \u0026#34;, \u0026#34;); } } } } 7.4 数组最大值 需求：设计一个方法用于获取数组中元素的最大值\n思路：\n①定义一个数组，用静态初始化完成数组元素初始化 ②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了 ③调用获取最大值方法，用变量接收返回结果 ④把结果输出在控制台 代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class MethodTest02 { public static void main(String[] args) { //定义一个数组，用静态初始化完成数组元素初始化 int[] arr = {12, 45, 98, 73, 60}; //调用获取最大值方法，用变量接收返回结果 int number = getMax(arr); //把结果输出在控制台 System.out.println(\u0026#34;number:\u0026#34; + number); } //定义一个方法，用来获取数组中的最大值 /* 两个明确： 返回值类型：int 参数：int[] arr */ public static int getMax(int[] arr) { int max = arr[0]; for(int x=1; x\u0026lt;arr.length; x++) { if(arr[x] \u0026gt; max) { max = arr[x]; } } return max; } } 7.6 获取索引 需求：\n​\t定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处，如果有重复的，只要获取第一个即可。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package com.itheima.demo; public class Test4 { public static void main(String[] args) { //定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处 //如果有重复的，只要获取第一个即可 int[] arr = {1,2,3,4,5}; int index = contains(arr, 3); System.out.println(index); } //1. 我要干嘛？判断数组中的某一个数是否存在 //2. 需要什么？数组 数字 //3. 调用处是否需要继续使用？返回 //获取number在arr中的位置 public static int contains(int[] arr, int number) { //遍历arr得到每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //拿着每一个元素跟number比较 if(arr[i] == number){ //如果相等，表示找到了 return i; } } //当循环结束之后，如果还不能返回索引，表示数组中不存在该数据 //可以返回-1 return -1; } } ","date":"2024-10-11T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day06-%E6%96%B9%E6%B3%95/","title":"day06-方法"},{"content":" 1.数组 概念： ​\t指的是一种容器，可以同来存储同种数据类型的多个值。\n​\t但是数组容器在存储数据的时候，需要结合隐式转换考虑。\n比如：\n​\t定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，\n​\t但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。\n建议：\n​\t容器的类，和存储的数据类型保持一致。\n举例：\n​\t整数1 2 3 4 56 就可以使用int类型的数组来存储。\n​\t小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。\n​\t字符串\u0026quot;aaa\u0026quot; \u0026ldquo;bbb\u0026rdquo; \u0026ldquo;ccc\u0026rdquo; 就可以使用String类型的数组来存储。\n2.数组的定义 格式一： ​\t数据类型 [] 数组名\n比如：int [] array\n格式二： ​\t数据类型 数组名 []\n比如： int array []\n详解： 数据类型：限定了数组以后能存什么类型的数据。\n方括号：表示现在定义的是一个数组。\n数组名：就是一个名字而已，方便以后使用。\n注意点： ​\t方法括号跟数组名，谁写在前面，谁写在后面都是一样的。\n​\t平时习惯性使用第一种方式。\n3.数组的静态初始化 完整格式： ​\t数据类型[] 数组名 = new 数据类型[]{元素1，元素2，元素3，元素4\u0026hellip;};\n比如：\n​\tint[] arr = new int[]{11,22,33};\n​\tdouble[] arr = new double[]{1.1,1.2,1.3};\n格式详解： ​\t数据类型：限定了数组以后能存什么类型的数据。\n​\t方括号：表示现在定义的是一个数组。\n​\t数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。\n​\tarr namesArr\n​\tnew：就是给数组在内存中开辟了一个空间。\n​\t数据类型：限定了数组以后能存什么类型的数据。\n​\t前面和后面的数据类型一定要保持一致。\n​\tint[] arr = new double[]{11,22,33};//错误写法\n​\t方括号：表示现在定义的是一个数组。\n​\t大括号：表示数组里面的元素。元素也就是存入到数组中的数据。\n​\t多个元素之间，一定要用逗号隔开。\n注意点： 等号前后的数据类型必须保持一致。 数组一旦创建之后，长度不能发生变化。 简化格式: ​\t数据类型[] 数组名 = {元素1，元素2，元素3，元素4\u0026hellip;};\n比如：\n​\tint[] array = {1,2,3,4,5};\n​\tdouble[] array = {1.1,1.2,1.3};\n练习1： 定义数组存储5个学生的年龄。\n1 2 3 4 1.给数组限定什么类型？ int 2.利用静态初始化完成创建并添加元素 int[] agesArr = new int[]{18,19,20,21,22}; int[] agesArr = {18,19,20,21,22}; 练习2： 定义数组存储3个学生的姓名。\n1 2 3 4 1.给数组限定什么类型？ String 2.利用静态初始化完成创建并添加元素 String[] namesArr = new String[]{\u0026#34;zhangsan\u0026#34;,\u0026#34;lisi\u0026#34;,\u0026#34;wangwu\u0026#34;}; String[] namesArr = {\u0026#34;zhangsan\u0026#34;,\u0026#34;lisi\u0026#34;,\u0026#34;wangwu\u0026#34;}; 练习3： 定义数组存储4个学生的身高。\n1 2 3 4 1.给数组限定什么类型？ double 2.利用静态初始化完成创建并添加元素 double[] heightsArr = new double[]{1.85,1.82,1.78,1.65}; double[] heightsArr = {1.85,1.82,1.78,1.65}; 4.地址值 1 2 3 4 5 int[] arr = {1,2,3,4,5}; System.out.println(arr);//[I@6d03e736 double[] arr2 = {1.1,2.2,3.3}; System.out.println(arr2);//[D@568db2f2 打印数组的时候，实际出现的是数组的地址值。\n数组的地址值：就表示数组在内存中的位置。\n以[I@6d03e736为例：\n[ ：表示现在打印的是一个数组。\nI：表示现在打印的数组是int类型的。\n@：仅仅是一个间隔符号而已。\n6d03e736：就是数组在内存中真正的地址值。（十六进制的）\n但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。\n地址值对于我们来京，作用不大，简单了解。\n5.数组元素访问 格式： ​\t数组名[索引];\n作用： 获取数组中对应索引上的值\n修改数组中对应索引上的值\n一旦修改之后，原来的值就会被覆盖了。\n代码示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class ArrDemo2 { /* 数组中元素访问的格式： 数组名[索引]; 作用： 1.获取指定索引上对应的元素 2.修改指定索引上对应的元素 */ public static void main(String[] args) { int[] arr = {1,2,3,4,5}; //需求1：获取arr数组中，3索引上的值 int number = arr[3]; System.out.println(number); System.out.println(arr[3]); //需求2：将arr数组中，3索引上的值修改为10 arr[3] = 10; System.out.println(\u0026#34;修改之后为:\u0026#34; + arr[3]); } } 6.索引 ​\t也叫角标、下标\n​\t就是数组容器中每一个小格子对应的编号。\n索引的特点： 索引一定是从0开始的。 连续不间断。 逐个+1增长。 7.数组的遍历 遍历：就是把数组里面所有的内容一个一个全部取出来。\n数组的长度：数组名.length;\n通用代码：\n1 2 3 4 for(int i = 0; i \u0026lt; arr.length; i++){ //在循环的过程中，i依次表示数组中的每一个索引 sout(arr[i]);//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。 } 8.数组的动态初始化 格式： ​\t数据类型[] 数组名 = new 数据类型[数组的长度];\n举例： 1 2 3 4 5 6 //1.定义一个数组，存3个人的年龄，年龄未知 int[] agesArr = new int[3]; //2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。 int[] scoresArr = new int[10]; 数组的默认初始化值： 整数类型：0\n小数类型：0.0\n布尔类型：false\n字符类型：\u0026rsquo;\\u0000'\n引用类型：null\n9.数组两种初始化方式的区别 静态初始化：int[] arr = {1,2,3,4,5};\n动态初始化：int[] arr = new int[3];\n静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。\n动态初始化：手动指定数组长度，由系统给出默认初始化值。\n使用场景： 只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。\n已经明确了要操作的所有数据，推荐使用静态初始化。\n举例： 使用数组来存储键盘录入的5个整数。\nint[] arr = new int[5];\n将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100\nint[] arr = new int[5];\narr[0] = 66;\narr[1] = 77;\n\u0026hellip; 虽然可以实现，但是太麻烦了。\n建议使用静态初始化：int[] arr = {66,77,88,99,100};\n10.数组常见问题 当访问了数组中不存在的索引，就会引发索引越界异常。\n避免：\n​\t针对于任意一个数组，索引的范围： 最小索引：0 最大索引：数组的长度 - 1 ​ 数组名.length - 1\n1 2 3 4 5 6 7 8 9 public class ArrDemo6 { public static void main(String[] args) { int[] arr = {1,2,3,4,5,5,5,5,5}; //用索引来访问数组中的元素 System.out.println(arr[1]); System.out.println(arr[10]);//ArrayIndexOutOfBoundsException } } 11.数组的练习 练习1：求和 需求：定义一个数组，存储1,2,3,4,5\n遍历数组得到每一个元素，求数组里面所有的数据和\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /*定义一个数组，存储1,2,3,4,5 遍历数组得到每一个元素，求数组里面所有的数据和*/ //分析： //1.定义一个数组，并添加数据1,2,3,4,5 int[] arr = {1,2,3,4,5}; //求和变量 int sum = 0; //2.遍历数组得到每一个数据，累加求和 for (int i = 0; i \u0026lt; arr.length; i++) { //i 依次表示数组里面的每一个索引 //arr[i] 依次表示数组里面的每一个元素 sum = sum + arr[i]; } //当循环结束之后，sum的值就是累加之后的结果 System.out.println(sum); 练习2：统计个数 需求：定义一个数组，存储1,2,3,4,5,6,7,8,9,10\n遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //分析： //1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10 int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; //定义一个变量，用来统计次数 int count = 0; //2.遍历数组得到每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //i 表示数组里面的每一个索引 //arr[i] 表示数组里面的每一个元素 //3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。 if(arr[i] % 3 == 0){ // System.out.println(arr[i]); count++; } } //当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可 System.out.println(\u0026#34;数组中能被3整除的数字有\u0026#34; + count + \u0026#34;个\u0026#34;); 练习3：变化数据 需求：\n定义一个数组，存储1,2,3,4,5,6,7,8,9,10\n遍历数组得到每一个元素。\n要求：\n1，如果是奇数，则将当前数字扩大两倍\n2，如果是偶数，则将当前数字变成二分之一\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //分析： //1.定义一个数组，存1,2,3,4,5,6,7,8,9,10 int[] arr = {1,2,3,4,5,6,7,8,9,10}; //2.遍历数组得到每一个元素 for (int i = 0; i \u0026lt; arr.length; i++) { //i 依次表示数组里面的每一个索引 //arr[i] 依次表示数组里面的每一个元素 //3.对每一个元素进行判断 if(arr[i] % 2 == 0){ //偶数 变成二分之一 arr[i] = arr[i] / 2; }else{ //奇数 扩大两倍 arr[i] = arr[i] * 2; } } //遍历数组 //一个循环尽量只做一件事情。 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.println(arr[i]); } 练习4：求最值 需求：求数组中的最大值\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 //定义数组求最大值：33,5,22,44,55 //扩展问题： //1.根据求最大值的思路，自己改写一下求最小智 //2.为什么max要记录为arr[0],默认值不能为0吗？ //不能写0 //max的初始化值一定要是数组中的值。 //3.循环中开始条件一定是0吗？ //循环的开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低 //为了提高效率，减少一次循环的次数，循环开始条件可以写1. //1.定义数组用来存储5个值 int[] arr = {33,5,22,44,55}; //2.定义一个变量max用来存储最大值 //临时认为0索引的数据是最大的 int max = arr[0]; //3.循环获取数组中的每一个元素 //拿着每一个元素跟max进行比较 for (int i = 1; i \u0026lt; arr.length; i++) { //i 索引 arr[i] 元素 if(arr[i] \u0026gt; max){ max = arr[i]; } } //4.当循环结束之后，max记录的就是数组中的最大值 System.out.println(max);//55 练习5：统计个数 需求：生成10个1~100之间的随机数存入数组。\n1）求出所有数据的和\n2）求所有数据的平均数\n3）统计有多少个数据比平均值小\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 //分析： //1.定义数组 int[] arr = new int[10]; //2.把随机数存入到数组当中 Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { //每循环一次，就会生成一个新的随机数 int number = r.nextInt(100) + 1; //把生成的随机数添加的数组当中 //数组名[索引] = 数据; arr[i] = number; } // 1）求出所有数据的和 //定义求和变量 int sum = 0; for (int i = 0; i \u0026lt; arr.length; i++) { //循环得到每一个元素 //并把元素累加到sum当中 sum = sum + arr[i]; } System.out.println(\u0026#34;数组中所有数据的和为：\u0026#34; + sum); //2）求所有数据的平均数 int avg = sum / arr.length; System.out.println(\u0026#34;数组中平均数为：\u0026#34; + avg); //3）统计有多少个数据比平均值小 int count = 0; for (int i = 0; i \u0026lt; arr.length; i++) { if(arr[i] \u0026lt; avg){ count++; } } //当循环结束之后，就表示我已经找到了所有的比平均数小的数据 System.out.println(\u0026#34;在数组中，一共有\u0026#34; + count + \u0026#34;个数据，比平均数小\u0026#34;); //遍历数组，验证答案 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } 练习6：交换数据 需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。\n交换前：1,2,3,4,5\n交换后：5,2,3,4,1\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 //1.定义数组存储数据 int[] arr = {1,2,3,4,5}; //2.利用循环去交换数据 for(int i = 0,j = arr.length - 1; i \u0026lt; j; i++,j--){ //交换变量i和变量j指向的元素 int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } //当循环结束之后，那么数组中的数据就实现了头尾交换 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } 练习7：打乱数据 需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //1.定义数组存储1~5 int[] arr = {1, 2, 3, 4, 5}; //2.循环遍历数组，从0索引开始打乱数据的顺序 Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { //生成一个随机索引 int randomIndex = r.nextInt(arr.length); //拿着随机索引指向的元素 跟 i 指向的元素进行交换 int temp = arr[i]; arr[i] = arr[randomIndex]; arr[randomIndex] = temp; } //当循环结束之后，那么数组中所有的数据已经打乱顺序了 for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(arr[i] + \u0026#34; \u0026#34;); } 循环高级 1.无限循环 概念： ​\t又叫死循环。循环一直停不下来。\nfor格式： 1 2 3 for(;;){ System.out.println(\u0026#34;循环执行一直在打印内容\u0026#34;); } 解释：\n初始化语句可以空着不写，表示循环之前不定义任何的控制变量。\n条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。\n条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。\nwhile格式： 1 2 3 while(true){ System.out.println(\u0026#34;循环执行一直在打印内容\u0026#34;); } 解释：\n​\t小括号里面就不能省略了，true一定要写出来，否则代码会报错。\ndo\u0026hellip;while格式： 1 2 3 do{ System.out.println(\u0026#34;循环执行一直在打印内容\u0026#34;); }while(true); 解释：\n​\t小括号里面就不能省略了，true一定要写出来，否则代码会报错。\n无限循环的注意事项： 最为常用的格式：while 无限循环下面不能再写其他代码了，因为永远执行不到。 2.条件控制语句 break continue break: ​\t不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。\n代码示例：\n1 2 3 4 5 6 7 8 //1.吃1~5号包子 for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(\u0026#34;在吃第\u0026#34; + i + \u0026#34;个包子\u0026#34;); //2.吃完第三个的时候就不吃了 if(i == 3){ break;//结束整个循环。 } } continue: ​\t不能单独存在的。只能存在于循环当中。\n​\t表示：跳过本次循环，继续执行下次循环。\n代码示例：\n1 2 3 4 5 6 7 8 9 //1.吃1~5号包子 for (int i = 1; i \u0026lt;= 5; i++) { //2.第3个包子有虫子就跳过，继续吃下面的包子 if(i == 3){ //跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。 continue; } System.out.println(\u0026#34;在吃第\u0026#34; + i + \u0026#34;个包子\u0026#34;); } 3. Random Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。\n使用步骤： 导包 1 2 import java.util.Random; 导包的动作必须出现在类定义的上边。 创建对象 1 2 Random r = new Random (); 上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。 生成随机数 1 2 3 int number = r.nextInt(随机数的范围); 上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。 随机数范围的特点：从0开始，不包含指定值。比如：参数为10，生成的范围[0,10) 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 //1.导包 import java.util.Random; public class RandomDemo1 { public static void main(String[] args) { //2.创建对象 Random r = new Random(); //3.生成随机数 int number = r.nextInt(100);//包左不包右，包头不包尾 //0 ~ 99 System.out.println(number); } } 4. 逢七过 需求：\n​\t朋友聚会的时候可能会玩一个游戏：逢7过\n​\t游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过\n​\t使用程序在控制台打印出1-100之间的满足逢七必过规则的数据\n举例：\n​\t1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 \u0026hellip;\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /*朋友聚会的时候可能会玩一个游戏：逢7过 游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过 需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/ //分析： //个位7 十位7 7倍数 //1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过.... //69 过 过 过 过 过 过... 80 //1.得到1~100之间的每一个数字 //开始：1 //结束：100 for (int i = 1; i \u0026lt;= 100; i++) { //2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字 if(i % 10 == 7 || i / 10 % 10 == 7 || i % 7 == 0){ System.out.println(\u0026#34;过\u0026#34;); continue; } System.out.println(i); } 5. 平方根 需求：\n​\t键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去 。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /*需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。 结果只保留整数部分 ，小数部分将被舍去 。*/ //分析： //平方根 16的平方根4 // 4的平方根2 // 10 // 1 * 1 = 1 \u0026lt; 10 // 2 * 2 = 4 \u0026lt; 10 // 3 * 3 = 9 \u0026lt; 10 // 4 * 4 = 16 \u0026gt; 10 //推断：10的平方根是在3~4之间。 // 20 // 1 * 1 = 1 \u0026lt; 20 // 2 * 2 = 4 \u0026lt; 20 // 3 * 3 = 9 \u0026lt; 20 // 4 * 4 = 16 \u0026lt; 20 // 5 * 5 = 25 \u0026gt; 20 //推断：20的平方根是在4~5之间。 //在代码当中 //从1开始循环，拿着数字的平方跟原来的数字进行比较 //如果小于的，那么继续往后判断 //如果相等，那么当前数字就是平方根 //如果大于的，那么前一个数字就是平方跟的整数部分 //1.键盘录入一个整数 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个整数\u0026#34;); int number = sc.nextInt(); //2.从1开始循环判断 //开始：1 结束: number for (int i = 1; i \u0026lt;= number; i++) { //用i * i 再跟number进行比较 if(i * i == number){ System.out.println(i + \u0026#34;就是\u0026#34; + number + \u0026#34;的平方根\u0026#34;); //一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。 break; }else if(i * i \u0026gt; number){ System.out.println((i - 1) + \u0026#34;就是\u0026#34; + number + \u0026#34;平方根的整数部分\u0026#34;); break; } } 6.判断是否为质数 需求：\n​\t键盘录入一个正整数 x ，判断该整数是否为一个质数。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 //需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。 //质数： //如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数 //7 = 1 * 7 质数 //8 = 1 * 8 2 * 4 合数 //分析： //1.键盘录入一个正整数 //number Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个正整数\u0026#34;); int number = sc.nextInt();//9 //定义一个变量，表示标记 //标记着number是否为一个质数 //true： 是一个质数 //false : 不是一个质数 //表示最初就认为number是一个质数 boolean flag = true; //2.判断 //写一个循环，从2开始判断，一直判断到number-1为止 //看这个范围之内，有没有数字可以被number整除 for (int i = 2; i \u0026lt; number; i++) { //i 依次表示这个范围之内的每一个数字 //看number是否能被i整除就可以了 if(number % i == 0){// 9 % 2 = 1 flag = false; //System.out.println(number + \u0026#34;不是一个质数\u0026#34;); break; }/*else{ System.out.println(number + \u0026#34;是一个质数\u0026#34;); }*/ } //只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了 //此时才能断定number是一个质数 if(flag){ System.out.println(number + \u0026#34;是一个质数\u0026#34;); }else{ System.out.println(number + \u0026#34;不是一个质数\u0026#34;); } 7. 猜数字小游戏 需求：\n​\t程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？\n要求：\n​\t使用循环猜，一直猜中为止。\n思路分析：\n生成一个1-100之间的随机数 使用键盘录入去猜出这个数字是多少 把反复猜的代码写在循环中 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //1.生成一个1-100之间的随机数 Random r = new Random(); int number = r.nextInt(100) + 1;// 0 ~ 99 + 1 --- 1 ~ 100 System.out.println(number); //2.使用键盘录入去猜出这个数字是多少？ Scanner sc = new Scanner(System.in); while(true){ System.out.println(\u0026#34;请输入一个整数\u0026#34;); int guessNumber = sc.nextInt(); //3.比较 if(guessNumber \u0026gt; number){ System.out.println(\u0026#34;您猜的数字大了\u0026#34;); }else if(guessNumber \u0026lt; number){ System.out.println(\u0026#34;您猜的数字小了\u0026#34;); }else{ System.out.println(\u0026#34;恭喜你，猜中了\u0026#34;); break; } } ","date":"2024-10-10T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/","title":"day05-循环高级和数组"},{"content":" 第一章 流程控制语句 在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。\n1.1 流程控制语句分类 ​\t顺序结构\n​\t判断和选择结构(if, switch)\n​\t循环结构(for, while, do…while)\n1.2 顺序结构 顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。\n顺序结构执行流程图：\n第二章 判断语句：if语句 2.1 if语句格式1 1 2 3 4 格式： if (关系表达式) { 语句体;\t} 执行流程：\n①首先计算关系表达式的值\n②如果关系表达式的值为true就执行语句体\n③如果关系表达式的值为false就不执行语句体\n④继续执行后面的语句内容\n示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class IfDemo { public static void main(String[] args) { System.out.println(\u0026#34;开始\u0026#34;);\t//定义两个变量 int a = 10; int b = 20;\t//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b if(a == b) { System.out.println(\u0026#34;a等于b\u0026#34;); }\t//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c int c = 10; if(a == c) { System.out.println(\u0026#34;a等于c\u0026#34;); }\tSystem.out.println(\u0026#34;结束\u0026#34;); } } 练习1：老丈人选女婿 需求：\n​\t键盘录入女婿的酒量，如果大于2斤，老丈人给出回应，否则没有任何回应\n代码示例：\n1 2 3 4 5 6 7 8 9 //分析： //1.键盘录入女婿的酒量 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入女婿的酒量\u0026#34;); int wine = sc.nextInt();//5 //2.对酒量进行一个判断即可 if(wine \u0026gt; 2) { System.out.println(\u0026#34;不错哟，小伙子！\u0026#34;); } 练习2：考试奖励 需求：\n​\t键盘录入一个整数，表示小明的考试名次，如果名次为1，小红可以当小明的女朋有了。\n代码示例：\n1 2 3 4 5 6 7 8 9 //分析： //1.键盘录入一个整数，表示小明的考试名次 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入小明的名次\u0026#34;); int rank = sc.nextInt(); //2.对小明的考试成绩进行判断即可 if(rank == 1){ System.out.println(\u0026#34;小红成为了小明的女朋友\u0026#34;); } 第一种格式的细节： 如果我们要对一个布尔类型的变量进行判断，不要写==，直接把变量写在小括号中即可。\n如果大括号中的语句体只有一条，那么大括号可以省略不写\n如果大括号省略了，那么if只能控制距离他最近的那一条语句。\n**建议：**自己不要去写，如果别人这么写了，你要能看懂即可。\n2.2 if语句格式2 1 2 3 4 5 6 格式： if (关系表达式) { 语句体1;\t} else { 语句体2;\t} 执行流程：\n①首先计算关系表达式的值\n②如果关系表达式的值为true就执行语句体1\n③如果关系表达式的值为false就执行语句体2\n④继续执行后面的语句内容\n示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class IfDemo02 { public static void main(String[] args) { System.out.println(\u0026#34;开始\u0026#34;);\t//定义两个变量 int a = 10; int b = 20; //需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b if(a \u0026gt; b) { System.out.println(\u0026#34;a的值大于b\u0026#34;); } else { System.out.println(\u0026#34;a的值不大于b\u0026#34;); }\tSystem.out.println(\u0026#34;结束\u0026#34;); } } 练习1：吃饭 需求：\n​\t键盘录入一个整数，表示身上的钱。\n​ 如果大于等于100块，就是网红餐厅。\n​ 否则，就吃经济实惠的沙县小吃。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 //分析： //1.键盘录入一个整数。表示身上的钱。 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个整数表示身上的钱\u0026#34;); int money = sc.nextInt(); //2.对钱进行判断 if(money \u0026gt;= 100){ System.out.println(\u0026#34;吃网红餐厅\u0026#34;); }else{ System.out.println(\u0026#34;福建大酒店\u0026#34;); } 练习2：影院选座 需求：\n​\t在实际开发中，电影院选座也会使用到if判断。\n​\t假设某影院售卖了100张票，票的序号为1~100。\n​\t其中奇数票号坐左侧，偶数票号坐右侧。\n​\t键盘录入一个整数表示电影票的票号。\n​\t根据不同情况，给出不同的提示：\n​\t如果票号为奇数，那么打印坐左边。\n​\t如果票号为偶数，那么打印坐右边。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //分析： //1.键盘录入票号 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入票号\u0026#34;); int ticket = sc.nextInt(); if(ticket \u0026gt;= 1 \u0026amp;\u0026amp; ticket \u0026lt;= 100){ //合法 //2.对票号进行判断 if (ticket % 2 == 0) { //偶数 System.out.println(\u0026#34;坐右边\u0026#34;); } else { //奇数 System.out.println(\u0026#34;坐左边\u0026#34;); } }else{ //票号不合法 System.out.println(\u0026#34;票号不合法\u0026#34;); } 2.3 if语句格式3 1 2 3 4 5 6 7 8 9 10 格式： if (关系表达式1) { 语句体1;\t} else if (关系表达式2) { 语句体2;\t} … else { 语句体n+1; } 执行流程：\n①首先计算关系表达式1的值\n②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值\n③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值\n④…\n⑤如果没有任何关系表达式为true，就执行语句体n+1。\n练习1：考试奖励 需求：\n​\t小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，\n假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。\n分析：\n​\t①小明的考试成绩未知，可以使用键盘录入的方式获取值\n​\t②由于奖励种类较多，属于多种判断，采用if\u0026hellip;else\u0026hellip;if格式实现\n​\t③为每种判断设置对应的条件\n​\t④为每种判断设置对应的奖励\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //95~100 自行车一辆 //90~94 游乐场玩一天 //80 ~ 89 变形金刚一个 //80 以下 胖揍一顿 //1.键盘录入一个值表示小明的分数 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入小明的成绩\u0026#34;); int score = sc.nextInt(); //2.对分数的有效性进行判断 if(score \u0026gt;= 0 \u0026amp;\u0026amp; score \u0026lt;= 100){ //有效的分数 //3.对小明的分数进行判断，不同情况执行不同的代码 if(score \u0026gt;= 95 \u0026amp;\u0026amp; score \u0026lt;= 100){ System.out.println(\u0026#34;送自行车一辆\u0026#34;); }else if(score \u0026gt;= 90 \u0026amp;\u0026amp; score \u0026lt;= 94){ System.out.println(\u0026#34;游乐场玩一天\u0026#34;); }else if(score \u0026gt;= 80 \u0026amp;\u0026amp; score \u0026lt;= 89){ System.out.println(\u0026#34;变形金刚一个\u0026#34;); }else{ System.out.println(\u0026#34;胖揍一顿\u0026#34;); } }else{ //无效的分数 System.out.println(\u0026#34;分数不合法\u0026#34;); } 第三章 switch语句 3.1 格式 1 2 3 4 5 6 7 8 9 10 11 12 switch (表达式) { case 1: 语句体1; break; case 2: 语句体2; break; ... default: 语句体n+1; break; } 3.2 执行流程： 首先计算出表达式的值 其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 练习：运动计划 需求：键盘录入星期数，显示今天的减肥活动。\n周一：跑步\n周二：游泳\n周三：慢走\n周四：动感单车\n周五：拳击\n周六：爬山\n周日：好好吃一顿\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package a01switch选择语句; import java.util.Scanner; public class SwitchDemo2 { public static void main(String[] args) { //1.键盘录入一个整数表示星期 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个整数表示星期\u0026#34;); int week = sc.nextInt(); //2.书写一个switch语句去跟week进行匹配 switch (week){ case 1: System.out.println(\u0026#34;跑步\u0026#34;); break; case 2: System.out.println(\u0026#34;游泳\u0026#34;); break; case 3: System.out.println(\u0026#34;慢走\u0026#34;); break; case 4: System.out.println(\u0026#34;动感单车\u0026#34;); break; case 5: System.out.println(\u0026#34;拳击\u0026#34;); break; case 6: System.out.println(\u0026#34;爬山\u0026#34;); break; case 7: System.out.println(\u0026#34;好好吃一顿\u0026#34;); break; default: System.out.println(\u0026#34;输入错误，没有这个星期\u0026#34;); break; } } } 3.3 switch的扩展知识： default的位置和省略情况\ndefault可以放在任意位置，也可以省略\ncase穿透\n不写break会引发case穿透现象\nswitch在JDK12的新特性\n1 2 3 4 5 6 7 int number = 10; switch (number) { case 1 -\u0026gt; System.out.println(\u0026#34;一\u0026#34;); case 2 -\u0026gt; System.out.println(\u0026#34;二\u0026#34;); case 3 -\u0026gt; System.out.println(\u0026#34;三\u0026#34;); default -\u0026gt; System.out.println(\u0026#34;其他\u0026#34;); } switch和if第三种格式各自的使用场景 当我们需要对一个范围进行判断的时候，用if的第三种格式\n当我们把有限个数据列举出来，选择其中一个执行的时候，用switch语句\n比如：\n​\t小明的考试成绩，如果用switch，那么需要写100个case，太麻烦了，所以用if简单。\n​\t如果是星期，月份，客服电话中0~9的功能选择就可以用switch\n练习：休息日和工作日 需求：键盘录入星期数，输出工作日、休息日。\n(1-5) 工作日，(6-7)休息日。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 //分析： //1.键盘录入星期数 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入星期\u0026#34;); int week = sc.nextInt();//3 //2.利用switch进行匹配 ---------------------------------------------------- 利用case穿透简化代码 switch (week){ case 1: case 2: case 3: case 4: case 5: System.out.println(\u0026#34;工作日\u0026#34;); break; case 6: case 7: System.out.println(\u0026#34;休息日\u0026#34;); break; default: System.out.println(\u0026#34;没有这个星期\u0026#34;); break; } ---------------------------------------------------- 利用JDK12简化代码书写 switch (week) { case 1, 2, 3, 4, 5 -\u0026gt; System.out.println(\u0026#34;工作日\u0026#34;); case 6, 7 -\u0026gt; System.out.println(\u0026#34;休息日\u0026#34;); default -\u0026gt; System.out.println(\u0026#34;没有这个星期\u0026#34;); } 第四章 循环结构 4.1 for循环结构（掌握） ​\t循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形 成死循环。\n4.1.1 for循环格式： 1 2 3 for (初始化语句;条件判断语句;条件控制语句) { 循环体语句; } 格式解释：\n初始化语句： 用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样 条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去 循环体语句： 用于表示循环反复执行的内容，简单说就是循环反复执行的事情 条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去 执行流程：\n①执行初始化语句\n②执行条件判断语句，看其结果是true还是false\n​ 如果是false，循环结束\n​ 如果是true，继续执行\n③执行循环体语句\n④执行条件控制语句\n⑤回到②继续\nfor循环书写技巧：\n确定循环的开始条件 确定循环的结束条件 确定循环要重复执行的代码 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 //1.确定循环的开始条件 //2.确定循环的结束条件 //3.确定要重复执行的代码 //需求：打印5次HelloWorld //开始条件：1 //结束条件：5 //重复代码：打印语句 for (int i = 1; i \u0026lt;= 5; i++) { System.out.println(\u0026#34;HelloWorld\u0026#34;); } for循环练习-输出数据 需求：在控制台输出1-5和5-1的数据 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 public class ForTest01 { public static void main(String[] args) { //需求：输出数据1-5 for(int i=1; i\u0026lt;=5; i++) { System.out.println(i); } System.out.println(\u0026#34;--------\u0026#34;); //需求：输出数据5-1 for(int i=5; i\u0026gt;=1; i--) { System.out.println(i); } } } for循环练习-求和 需求：求1-5之间的数据和，并把求和结果在控制台输出 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class ForTest02 { public static void main(String[] args) { //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //从1开始到5结束的数据，使用循环结构完成 for(int i=1; i\u0026lt;=5; i++) { //将反复进行的事情写入循环结构内部 // 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中 sum = sum + i; /* sum += i;\tsum = sum + i; 第一次：sum = sum + i = 0 + 1 = 1; 第二次：sum = sum + i = 1 + 2 = 3; 第三次：sum = sum + i = 3 + 3 = 6; 第四次：sum = sum + i = 6 + 4 = 10; 第五次：sum = sum + i = 10 + 5 = 15; */ } //当循环执行完毕时，将最终数据打印出来 System.out.println(\u0026#34;1-5之间的数据和是：\u0026#34; + sum); } } 本题要点： 今后遇到的需求中，如果带有求和二字，请立即联想到求和变量 求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 for循环练习-求偶数和 需求：求1-100之间的偶数和，并把求和结果在控制台输出 } 示例代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class ForTest03 { public static void main(String[] args) { //求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0 int sum = 0; //对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同 for(int i=1; i\u0026lt;=100; i++) { //对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数 if(i%2 == 0) { //sum += i； sum = sum + i; } } //当循环执行完毕时，将最终数据打印出来 System.out.println(\u0026#34;1-100之间的偶数和是：\u0026#34; + sum); } } for循环练习-统计次数 需求：\n​\t键盘录入两个数字，表示一个范围。\n​ 统计这个范围中。\n​ 既能被3整除，又能被5整除数字有多少个？\n代码示例：\n4.2 while循环 4.2.1 格式： 1 2 3 4 5 初始化语句; while(条件判断语句){ 循环体; 条件控制语句; } 练习1：打印5次HelloWorld 1 2 3 4 5 6 int i = 1; while(i \u0026lt;= 5){ System.out.println(\u0026#34;HelloWorld\u0026#34;); i++; } System.out.println(i); 练习2：珠穆朗玛峰 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //1.定义一个变量表示珠穆朗玛峰的高度 int height = 8844430; //2.定义一个变量表示纸张的厚度 double paper = 0.1; //定义一个计数器（变量），用来统计折叠的次数 int count = 0; //3.循环折叠纸张 //只有纸张的厚度 \u0026lt; 穆朗玛峰的高度 循环才继续，否则循环就停止 //坑：只有判断为真，循环才会继续 while(paper \u0026lt; height){ //折叠纸张 paper = paper * 2; count++; } //4.打印一下纸张的厚度 System.out.println(count);//27 4.3 do\u0026hellip;while循环 本知识点了解即可\n格式：\n1 2 3 4 5 初始化语句; do{ 循环体; 条件控制语句; }while(条件判断语句); 特点：\n​\t先执行，再判断。\n4.4 三种格式的区别： ​\tfor和while循环，是先判断，再执行。\n​\tdo\u0026hellip;while是先执行，再判断。\n​\t当知道循环次数或者循环范围的时候，用for循环。\n​\t当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。\n","date":"2024-10-09T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day04-%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/","title":"day04-判断和循环"},{"content":" 1.运算符和表达式 运算符： ​\t就是对常量或者变量进行操作的符号。\n​\t比如： + - * /\n表达式： ​\t用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。\n​\t比如：a + b 这个整体就是表达式。\n​\t而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。\n2.算术运算符 分类：\n1 + - * / % 运算特点：\n1 + - * :跟小学数学中一模一样没有任何区别. 1 2 3 4 5 6 /： 1.整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。 2.小数直接参与运算，得到的结果有可能是不精确的。 案例： System.out.println( 10 / 3);//3 System.out.println(10.0 / 3);//3.3333333333333335 1 2 3 4 5 6 7 8 %：取模、取余。 他做的也是除法运算，只不过获取的是余数而已。 案例： System.out.println(10 % 2);//0 System.out.println(10 % 3);//1 应用场景： //可以利用取模来判断一个数是奇数还是偶数 System.out.println(15 % 2);//1 奇数 练习：数值拆分 需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //1.键盘录入一个三位数 //导包 --- 创建对象 --- 接收数据 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个三位数\u0026#34;); int number = sc.nextInt();//123 //2.获取这个三位数的个位、十位、百位并打印出来 //公式： //针对于任意的一个数而言 //个位： 数字 % 10 int ones = number % 10; //十位： 数字 / 10 % 10 int tens = number / 10 % 10; //百位： 数字 / 100 % 10 int hundreds = number / 100 % 10; //输出结果 System.out.println(ones); System.out.println(tens); System.out.println(hundreds); 公式：\n​\t获取任意一个数上每一位数。\n个位：数字 % 10\n十位：数字 / 10 % 10\n百位：数字 / 100 % 10\n千位：数字 / 1000 % 10\n。。。以此类推。。。\n3.隐式转换 概念： ​\t也叫自动类型提升。\n​\t就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的。\n简单记忆： ​\t就是小的给大的，可以直接给。\n两种提升规则： 取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。 byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算。 取值范围从小到大的关系： ​\tbyte short int long float double\n4.隐式转换的练习 请看下面案例是否有误，如果有问题，请说出原因，如果没有问题，请说出运算过程和运算结果\n案例一： 1 2 double d = 10; System.out.println(d);//10.0 解释：\n​\t10是整数，整数默认是int类型的。\n​\t而在取值范围的顺序中：byte short int long float double\n​\t在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。\n案例二： 1 2 byte b = 100; int i = b;//可以成功赋值 解释：\n​\t因为byte的取值范围是小的，int的取值范围是大的，在底层进行了隐式转换，不需要我们额外写代码单独实现，是可以直接赋值。\n案例三： 1 2 3 4 int i = 10; long n = 20L; ??? result = i + n; 问变量result是什么类型的？ 解释：\n​\t变量i是int类型的，变量n是long类型的。\n​\t而在取值范围的顺序中：byte short int long float double\n​\t变量i里面的值会自动提升为long类型的，最终的结果其实就是两个long相加，那么最终的result是long类型的。\n案例四： 1 2 3 4 5 int i = 10; long n = 100L; double d = 20.0; ??? result = i + n + d; 问变量result是什么类型的？ 解释：\n​\t变量i是int类型，变量n是long类型，变量d是double类型。\n​\t而在取值范围的顺序中：byte short int long float double\n​\t所以变量i和变量n里面的值在参与运算的时候，都会进行类型提升，变成double。\n​\t最终其实就是三个double进行相加，那么最终的结果就是double类型的。\n案例五： 1 2 3 4 byte b1 = 10; byte b2 = 20; ??? result = b1 + b2;//int 问变量result是什么类型的？ 解释：\n​\t因为b1和b2都是byte类型的。所以在参与计算的时候，变量b1和变量b2里面的值都会自动提升为int类型的。最终其实就是两个int类型的相加，最终结果也是int类型的。\n案例六： 1 2 3 4 5 byte b = 10; short s = 20; long n = 100L; ??? result = b + s + n; 问变量result是什么类型的？long 解释：\n​\t变量b是byte类型的，变量s是short类型的，变量n是long类型的。\n​\tbyte，short，char类型的变量在参与运算的时候，变量里面的值会直接先提升为int。\n第一步：变量b和变量s里面的值会先提升为int参与运算。\n​\tint + int + long\n第二步：而long类型的取值范围是大于int的取值范围的。\n​\t所以变量b和变量s里面的值会再次提升为long。\n​\tlong + long + long。\n所以最终结果是long类型的。\n5.强制转换 概念： ​\t如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。\n​\t如果一定要这么干，就需要加入强制转换。\n书写格式： ​\t目标数据类型 变量名 = （目标数据类型）被强转的数据；\n简单理解：\n​\t要转成什么类型的，那么就在小括号中写什么类型就可以了。\n案例：\n1 2 3 4 5 6 7 public class OperatorDemo2 { public static void main(String[] args) { double a = 12.3; int b = (int) a; System.out.println(b);//12 } } 注意点：\n​\t强制转换有可能会导致数据发生错误。（数据的精度丢失）\n6.字符串的+操作 核心技巧： 当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。 当连续进行+操作时，从左到右逐个执行的。 7.字符串相加的练习： 案例1：\n1 1 + \u0026#34;abc\u0026#34; + 1 结果：\u0026ldquo;1abc1\u0026rdquo;\n解释：\n​\t第一步： 1 + \u0026ldquo;abc\u0026rdquo;。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\u0026quot;1abc\u0026quot;\n​\t第二步： \u0026ldquo;1abc\u0026rdquo; + 1。这个过程中，有字符串参与的，所以做的也是拼接操作，产生一个新的字符串\u0026quot;1abc1\u0026quot;\n案例2：\n1 1 + 2 + \u0026#34;abc\u0026#34; + 2 + 1 结果：“3abc21”\n解释：\n​\t第一步：1 + 2 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为3。\n​\t第二步：3 + \u0026ldquo;abc\u0026rdquo;。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\u0026quot;3abc\u0026quot;。\n​\t第三步：\u0026ldquo;3abc\u0026rdquo; + 2。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串\u0026quot;3abc2\u0026quot;。\n​\t第四步：\u0026ldquo;3abc2\u0026rdquo; + 1。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”\n案例3：\n1 2 String name = \u0026#34;黑默丁格\u0026#34;; System.out.println(\u0026#34;我的名字是\u0026#34; + name); 结果： 我的名字是黑默丁格\n解释：当字符串跟变量相加的时候，实际上是跟变量里面的值进行拼接。\n8.字符的+操作 规则： ​\t当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。\n案例： 1 2 3 char c = \u0026#39;a\u0026#39;; int result = c + 0; System.out.println(result);//97 ASCII码表中：\n​\t\u0026lsquo;a\u0026rsquo; \u0026mdash;\u0026ndash; 97\n​\t\u0026lsquo;A\u0026rsquo; \u0026mdash;\u0026ndash; 65\n9.算术运算符的总结 分类：\n1 + - * / % 这些操作跟小学数学几乎是一模一样的。 注意点：\n/ 和 % 的区别：他们两个都是做除法运算，/取结果的商。% 取结果的余数。 整数操作只能得到整数，如果想要得到小数，必须有浮点数参与运算。 算术运算符的高级用法：\n是以+为例进行的讲解，其余减法，乘法，除法的运算规则也是一样的。\n特例：字符串只有+操作，没有其他操作。\n10.自增自减运算符 分类： 1 2 ++ 自增运算符 -- 自减运算符 ++：就是把变量里面的值+1\n\u0026ndash;：就是把变量里面的值-1\n使用方式： 放在变量的前面，我们叫做先++。 比如：++a 放在变量的后面，我们叫做后++。 比如：a++ 注意点： ​\t不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。\n案例： 1 2 3 4 5 6 //++ int a = 10; a++;//就是让变量a里面的值 + 1 System.out.println(a);//11 ++a;//就是让变量a里面的值 + 1 System.out.println(a);//12 自增自减运算符的应用场景： 某些情况下，变量需要进行加1或者减1的时候使用。\n比如：过生日多一岁，就用到了自增运算符。\n比如：购物商场中，选择商品数量，也用到了自增或者自减运算符。\n比如：统计很多数据中，有多少个数据满足要求，也用到了自增运算符。\n11.赋值运算符 最为常用的：\t=\n运算过程：就是把等号右边的结果赋值给左边的变量\n案例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class OperatorDemo6 { public static void main(String[] args) { //1.最为简单的赋值运算符用法 int a = 10;//就是把10赋值给变量a System.out.println(a); //2.如果等号右边需要进行计算。 int b = 20; int c = a + b;//先计算等号右边的，把计算的结果赋值给左边的变量 System.out.println(c); //3.特殊的用法 a = a + 10;//先计算等号右边的，把计算的结果赋值给左边的变量 System.out.println(a);//20 } } 12.扩展赋值运算符 分类： ​\t+=、-=、*=、/=、%=\n运算规则： ​\t就是把左边跟右边进行运算，把最终的结果赋值给左边，对右边没有任何影响。\n案例： 1 2 3 4 5 6 7 8 9 10 11 public class OperatorDemo7 { public static void main(String[] args) { //扩展赋值运算符 int a = 10; int b = 20; a += b;//把左边和右边相加，再把最终的结果赋值给左边，对右边没有任何影响 // 相当于 a = a + b; System.out.println(a);//30 System.out.println(b);//20 } } 注意点： ​\t扩展的赋值运算符中隐层还包含了一个强制转换。\n以+=为例。\na += b ;实际上相当于 a = (byte)(a + b);\n1 2 3 4 5 6 7 8 9 public class OperatorDemo8 { public static void main(String[] args) { byte a = 10; byte b = 20; //a += b; a = (byte)(a + b); System.out.println(a);//30 } } 13.关系运算符 又叫比较运算符，其实就是拿着左边跟右边进行了判断而已。\n分类： 符号 解释 == 就是判断左边跟右边是否相等，如果成立就是true，如果不成立就是false != 就是判断左边跟右边是否不相等，如果成立就是true，如果不成立就是false \u0026gt; 就是判断左边是否大于右边，如果成立就是true，如果不成立就是false \u0026gt;= 就是判断左边是否大于等于右边，如果成立就是true，如果不成立就是false \u0026lt; 就是判断左边是否小于右边，如果成立就是true，如果不成立就是false \u0026lt;= 就是判断左边是否小于等于右边，如果成立就是true，如果不成立就是false 注意点： 关系运算符最终的结果一定是布尔类型的。要么是true，要么是false 在写==的时候，千万不要写成= 14.逻辑运算符 \u0026amp; 和 | 的使用： \u0026amp;：逻辑与（而且）\n​\t两边都为真，结果才是真，只要有一个为假，那么结果就是假。\n|：逻辑或（或者）\n​\t两边都为假，结果才是假，只要有一个为真，那么结果就是真。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 // \u0026amp; //两边都是真，结果才是真。 System.out.println(true \u0026amp; true);//true System.out.println(false \u0026amp; false);//false System.out.println(true \u0026amp; false);//false System.out.println(false \u0026amp; true);//false System.out.println(\u0026#34;===================================\u0026#34;); // | 或 //两边都是假，结果才是假，如果有一个为真，那么结果就是真。 System.out.println(true | true);//true System.out.println(false | false);//false System.out.println(true | false);//true System.out.println(false | true);//true 使用场景： ​\t根据固定的场景，来选择使用\u0026amp;还是使用|\n用户登录。\n用户名输入正确 \u0026amp; 密码输入正确\n因为只有用户名和密码同时都正确了，那么才能成功登录，只要有一个失败了都不行。\n使用技巧：\n​\t当我们需要同时满足左边和右边两种情况时，可以使用且\n丈母娘选女婿\n丈母娘：女婿啊，你要么买个房子，要么买辆车。就可以把我的小棉袄穿走了。\n买个房子 | 买辆车\n两个条件中，只要满足其中一个，就可以穿走小棉袄了。\n使用技巧：\n​\t当两种条件只要满足其中一个的时候，可以使用或\n^（异或）的使用： ​\t在以后用的不多，了解一下即可。\n计算规则：如果两边相同，结果为false，如果两边不同，结果为true\n代码示例：\n1 2 3 4 5 //^ //左右不相同，结果才是true，左右相同结果就是false System.out.println(true ^ true);//false System.out.println(false ^ false);//false System.out.println(true ^ false);//true System.out.println(false ^ true);//true !（取反）的使用： ​\t是取反，也叫做非。\n计算规则：false取反就是true，true取反就是false\n温馨提示：取反最多只用一个。\n代码示例：\n1 2 3 4 System.out.println(!false);//true System.out.println(!true);//false System.out.println(!!false);//注意点：取反最多只用一个。 15.短路逻辑运算符 分类： \u0026amp;\u0026amp; ||\n\u0026amp;\u0026amp;： ​\t运算结果跟\u0026amp;是一模一样的，只不过具有短路效果。\n||： ​\t运算结果跟|是一模一样的。只不过具有短路效果。\n逻辑核心： ​\t当左边不能确定整个表达式的结果，右边才会执行。\n​\t当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率。\n举例： 用户登录案例\n用户名正确 \u0026amp; 密码正确\n如果使用一个\u0026amp;，不管用户名是否正确都会去验证密码。\n思考：\n​\t如果用户名输入正确了，那么我们再判断密码是否正确，是符合业务逻辑的。\n​\t但是如果用户名输入错误了，那么现在还有必要去比较密码吗？没有不要了。\n​\t如果使用一个\u0026amp;，那么左边和右边不管什么情况下，都会执行。\n​\t用户名正确 \u0026amp;\u0026amp; 密码正确\n​\t如果用户名输入正确了，那么才会验证密码是否输入正确。\n​\t如果用户名输入错误了，那么就不会再去验证密码是否正确，最终的结果直接为false。从而提高了程序运行的效率。\n丈母娘选女婿\n有房 | 有车\n首先先看看有没有房，发现有，然后再去看看有没有车。\n思考：\n​\t既然都有房子，干嘛还要去看车呢？多此一举。\n​\t有房 || 有车\n​\t首先先看看有没有房，如果有，那么右边就不执行了。最终的结果直接为true。\n​\t如果没有房子，才会去看右边有没有车。\n总结： ​\t\u0026amp;\u0026amp; 和 \u0026amp; 、||和|的运行结果都是一模一样的。\n​\t但是短路逻辑运算符可以提高程序的运行效率。\n建议： ​\t最为常用： \u0026amp;\u0026amp; || ！\n16.三元运算符 又叫做：三元表达式或者问号冒号表达式。\n格式： ​\t关系表达式 ？ 表达式1 ：表达式2 ；\n计算规则： 计算关系表达式的值。 如果关系表达式的值为真，那么执行表达式1。 如果关系表达式的值为假，那么执行表达式2。 注意点： ​\t三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。\n案例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class OperatorDemo12 { public static void main(String[] args) { //需求：求两个数的较大值 int a = 10; int b = 20; //格式：关系表达式 ？ 表达式1 ： 表达式2 ； //注意点： //三元运算符的最终结果一定要被使用。 //要么赋值给一个变量，要么直接输出。 int max = a \u0026gt; b ? a : b ; System.out.println(max); System.out.println(a \u0026gt; b ? a : b); } } 17.练习1-两只老虎 需求：\n​\t动物园里有两只老虎，两只老虎的体重分别为通过键盘录入获得，\n​\t请用程序实现判断两只老虎的体重是否相同。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 //1.获取两只老虎的体重 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入第一只老虎的体重\u0026#34;); int weight1 = sc.nextInt(); System.out.println(\u0026#34;请输入第二只老虎的体重\u0026#34;); int weight2 = sc.nextInt(); //2.利用三元运算符求出最终结果 String result = weight1 == weight2 ? \u0026#34;相同\u0026#34; : \u0026#34;不相同\u0026#34;; System.out.println(result); 18.练习2-求三个数的最大值 需求：\n​\t一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm。\n​\t请用程序实现获取这三个和尚的最高身高。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 //1.定义三个变量记录和尚的身高 int height1 = 150; int height2 = 210; int height3 = 165; //2.利用三元运算符求出两个数中的较大值。 int temp = height1 \u0026gt; height2 ? height1 : height2; //3.求出最终的结果 int max = temp \u0026gt; height3 ? temp : height3; System.out.println(max); 19.运算符的优先级 在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。\n咱们只要知道其中一点：\n​\t小括号优先于所有。\n","date":"2024-10-08T12:00:00+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day03-%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"day03-运算符"},{"content":"day02 - Java基础语法 1. 注释 ​\t注释是对代码的解释和说明文字。\nJava中的注释分为三种：\n单行注释： 1 // 这是单行注释文字 多行注释： 1 2 3 4 5 6 /* 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ 注意：多行注释不能嵌套使用。 文档注释（暂时用不到）： 1 2 3 4 5 /** 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ 使用的技巧 ​\t如果我们要对代码进行解释，那么就可以使用注释。\n​\t当注释的内容比较少，一行就写完了，可以用单行注释。\n​\t如果注释的内容比较多，需要写在多行，那么可以使用多行注释。\n注意点 ​\t注释的内容不会参与编译和运行的，仅仅是对代码的解释说明而已。\n​\t所以，不管在注释当中写什么内容，都不会影响代码运行的结果。\n2. 关键字 2.1 概念 ​\t被Java赋予了特定含义的英文单词。\n​\t当我们在代码中写了关键字之后，程序在运行的时候，就知道要做什么事情了。\n注意：关键字很多，不用刻意去记。\nabstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return strictfp short static super switch synchronized this throw throws transient try void volatile while 2.2 第一个关键字class ​\t表示定义一个类。创建一个类。\n类：Java项目最基本的组成单元，一个完整的Java项目有可能会有成千上万个类来组成的。\nclass后面跟随的就是这个类的名字，简称：类名。\n在类名后面会有一对大括号，表示这个类的内容。\n举例：\n1 2 3 4 public class HelloWorld{ } 解释：class表示定义类。\n​\t类名：HelloWorld\n​\tHelloWorld后面的大括号表示这个类的范围。\n3. 字面量 作用：告诉程序员，数据在程序中的书写格式。\n字面量类型 说明 程序中的写法 整数 不带小数的数字 666，-88 小数 带小数的数字 13.14，-5.21 字符 必须使用单引号，有且仅能一个字符 ‘A’，‘0’， ‘我’ 字符串 必须使用双引号，内容可有可无 “HelloWorld”，“黑马程序员” 布尔值 布尔值，表示真假，只有两个值：true，false true 、false 空值 一个特殊的值，空值 值是：null 1 2 3 4 5 6 7 8 9 public class Demo { public static void main(String[] args) { System.out.println(10); // 输出一个整数 System.out.println(5.5); // 输出一个小数 System.out.println(\u0026#39;a\u0026#39;); // 输出一个字符 System.out.println(true); // 输出boolean值true System.out.println(\u0026#34;欢迎来到黑马程序员\u0026#34;); // 输出字符串 } } 区分技巧 不带小数点的数字都是整数类型的字面量。 只要带了小数点，那么就是小数类型的字面量。 只要用双引号引起来的，不管里面的内容是什么，不管里面有没有内容，都是字符串类型的字面量。 字符类型的字面量必须用单引号引起来，不管内容是什么，但是个数有且只能有一个。 字符类型的字面量只有两个值，true、false。 空类型的字面量只有一个值，null。 4. 变量 4.1 什么是变量？ ​\t变量就在程序中临时存储数据的容器。但是这个容器中只能存一个值。\n4.2 变量的定义格式 ​\t数据类型 变量名 = 数据值；\n4.2.1 格式详解 ​\t数据类型：限定了变量当中能存储什么类型的数据。\n​\t如果要存10，那么数据类型就需要写整数类型。\n​\t如果要存10.0，那么数据类型就需要写小数类型。\n​\t变量名：其实就是这个容器的名字。\n​\t当以后想要使用变量里面的数据时，直接使用变量名就可以了。\n​\t数据值：真正存储在容器中的数据。\n​\t分号：表示语句的结束，就跟以前写作文时候的句号是一样的。\n4.2.2 常用的数据类型 ​\t整数：int\n​\t小数：（浮点数）double\n​\t其他数据类型稍后讲解\n举例：\n1 2 3 4 5 6 7 8 9 10 11 12 public class VariableDemo{ public static void main(String[] args){ //定义一个整数类型的变量 //数据类型 变量名 = 数据值; int a = 16; System.out.println(a);//16 //定义一个小数类型的变量 double b = 10.1; System.out.println(b);//10.1 } } 4.2.3 变量的注意事项 变量名不能重复 在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。 变量在使用之前必须要赋值。 案例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class VariableDemo2{ public static void main(String[] args){ //1.变量名不允许重复 //int a = 10; //int a = 20; //System.out.println(a); //2.一条语句可以定义多个变量 //了解。 //int a = 10, b = 20, c = 20,d = 20; //System.out.println(a);//? //System.out.println(b);//? //3.变量在使用之前必须要赋值 int a = 30; System.out.println(a); } } 4.3 变量的练习 ​\t需求：说出公交车到终点站之后，车上一共有多少乘客？\n​\t一开始没有乘客。\n​\t第一站：上去一位乘客，没有下来乘客。\n​\t第二站：上去两位乘客，下来一位乘客。\n​\t第三站：上去两位乘客，下来一位乘客。\n​\t第四站：没有上去乘客，下来一位乘客。\n​\t第五站：上去一位乘客，没有下来乘客。\n​\t问：到了终点站之后，车上一共多少乘客？\n​\t代码解析：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class VariableTest1{ //主入口 public static void main(String[] args){ //一开始没有乘客。 int count = 0; //第一站：上去一位乘客 //在原有的基础上 + 1 count = count + 1; //System.out.println(count); //第二站：上去两位乘客，下来一位乘客 count = count + 2 - 1; //第三站：上去两位乘客，下来一位乘客 count = count + 2 - 1; //第四站：下来一位乘客 count = count - 1; //第五站：上去一位乘客 count = count + 1; //请问：到了终点站，车上一共几位乘客。 System.out.println(count);//3 } } 5. 数据类型 5.1 Java语言数据类型的分类 基本数据类型 引用数据类型（面向对象的时候再深入学习） 5.2 基本数据类型的四类八种 数据类型 关键字 内存占用 取值范围 整数 byte 1 负的2的7次方 ~ 2的7次方-1(-128~127) short 2 负的2的15次方 ~ 2的15次方-1(-32768~32767) int 4 负的2的31次方 ~ 2的31次方-1 long 8 负的2的63次方 ~ 2的63次方-1 浮点数 float 4 1.401298e-45 ~ 3.402823e+38 double 8 4.9000000e-324 ~ 1.797693e+308 字符 char 2 0-65535 布尔 boolean 1 true，false 说明 ​\te+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。\n​\t在java中整数默认是int类型，浮点数默认是double类型。\n需要记忆以下几点 byte类型的取值范围：\n​\t-128 ~ 127\nint类型的大概取值范围：\n​\t-21亿多 ~ 21亿多\n整数类型和小数类型的取值范围大小关系：\n​\tdouble \u0026gt; float \u0026gt; long \u0026gt; int \u0026gt; short \u0026gt; byte\n最为常用的数据类型选择：\n在定义变量的时候，要根据实际的情况来选择不同类型的变量。\n比如：人的年龄，可以选择byte类型。\n比如：地球的年龄，可以选择long类型。\n如果整数类型中，不太确定范围，那么默认使用int类型。\n如果小数类型中，不太确定范围，那么默认使用double类型。\n如果要定义字符类型的变量，那么使用char\n如果要定义布尔类型的变量，那么使用boolean\n5.3 定义8种基本数据类型变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class VariableDemo3{ public static void main(String[] args){ //1.定义byte类型的变量 //数据类型 变量名 = 数据值; byte a = 10; System.out.println(a); //2.定义short类型的变量 short b = 20; System.out.println(b); //3.定义int类型的变量 int c = 30; System.out.println(c); //4.定义long类型的变量 long d = 123456789123456789L; System.out.println(d); //5.定义float类型的变量 float e = 10.1F; System.out.println(e); //6.定义double类型的变量 double f = 20.3; System.out.println(f); //7.定义char类型的变量 char g = \u0026#39;a\u0026#39;; System.out.println(g); //8.定义boolean类型的变量 boolean h = true; System.out.println(h); } } 注意点 如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。 如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。 如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。） 如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以） 5.4 练习1 需求：定义5个变量记录老师的信息并打印\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class VariableTest1{ public static void main(String[] args){ //1.定义字符串类型的变量记录老师的姓名 String name = \u0026#34;黑马谢广坤\u0026#34;; //2.定义整数类型的变量记录老师的年龄 int age = 18; //3.定义字符类型的变量记录老师的性别 char gender = \u0026#39;男\u0026#39;; //4.定义小数类型的变量记录老师的身高 double height = 180.1; //5.定义布尔类型的变量记录老师的婚姻状况 boolean flag = true; //输出5个变量的值 System.out.println(name); System.out.println(age); System.out.println(gender); System.out.println(height); System.out.println(flag); } } 5.5 练习2 需求：将（电影名称，主演，年份，评分）四个信息选择不同类型的变量，随后打印出来。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public class VariableTest2{ public static void main(String[] args){ //1.定义字符串变量记录电影的名称 String movie = \u0026#34;送初恋回家\u0026#34;; //2.定义三个变量记录主演的名字 String name1 = \u0026#34;刘鑫\u0026#34;; String name2 = \u0026#34;张雨提\u0026#34;; String name3 = \u0026#34;高媛\u0026#34;; //3. 定义整数类型的变量记录年龄的年份 int year = 2020; //4.定义小数类型的变量记录电影的评分 double score = 9.0; //打印变量的信息 System.out.println(movie); System.out.println(name1); System.out.println(name2); System.out.println(name3); System.out.println(year); System.out.println(score); } } 5.6 练习3 需求：选择其中一部手机，将（手机价格，手机品牌）两个信息选择不同类型的变量，随后打印出来。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 public class VariableTest3{ public static void main(String[] args){ //1.定义小数类型的变量记录手机的价格 double price = 5299.0; //2.定义字符串类型的变量记录手机的品牌 String brand = \u0026#34;华为\u0026#34;; //输出变量记录的值 System.out.println(price); System.out.println(brand); } } 6. 标识符 业内大多数程序员都在遵守阿里巴巴的命名规则。\n在day02的资料文件夹中有。\n6.1 硬性要求： ​\t必须要这么做，否则代码会报错。\n必须由数字、字母、下划线_、美元符号$组成。 数字不能开头 不能是关键字 区分大小写的。 6.2 软件建议： ​\t如果不这么做，代码不会报错，但是会让代码显得比较low。\n6.2.1 小驼峰命名法 适用于变量名和方法名\n如果是一个单词，那么全部小写，比如：name\n如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge\n6.2.2 大驼峰命名法 适用于类名\n如果是一个单词，那么首字母大写。比如：Demo、Test。\n如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld\n不管起什么名字，都要做到见名知意。\n阿里巴巴命名规范细节： 尽量不要用拼音。但是一些国际通用的拼音可视为英文单词。\n正确：alibaba、hangzhou、nanjing\n错误：jiage、dazhe\n平时在给变量名、方法名、类名起名字的时候，不要使用下划线或美元符号。\n错误：_name\n正确：name\n7. 键盘录入 ​\t键盘录入的实际功能Java已经帮我们写好了，不需要我们自己再实现了，而Java写好的功能都放在了Scanner这个类中，所以，我们只要直接使用Scanner这个类就可以了。\n使用步骤：\n第一步：\n​\t导包：其实就是表示先找到Scanner这个类在哪。\n第二步：\n​\t创建对象：其实就表示申明一下，我准备开始用Scanner这个类了。\n第三步：\n​\t接收数据：也是真正干活的代码。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 //导包，其实就是先找到Scanner这个类在哪 import java.util.Scanner; public class ScannerDemo1{ public static void main(String[] args){ //2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。 Scanner sc = new Scanner(System.in); //3.接收数据 //当程序运行之后，我们在键盘输入的数据就会被变量i给接收了 System.out.println(\u0026#34;请输入一个数字\u0026#34;); int i = sc.nextInt(); System.out.println(i); } } 8. IDEA 8.1 IDEA概述 ​\tIDEA全称IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。\n集成环境：\n​\t把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。\n8.2 IDEA的下载和安装 8.2.1 下载 ​\t可以到官方网站自行下载，网址为：https://www.jetbrains.com/idea\n​\t今天的资料中，对应的安装包也提高给大家了。\n8.2.2 安装 到资料文件夹中，双击安装包。 点击next，准备安装 点击Browse修改安装路径。\n修改完毕点击next\n勾选64-bit launcher。表示在桌面新建一个64位的快捷方式。\n其他的不要勾选。\n点击next。\n点击Install，准备安装。 等进度条读取完毕之后，会有最终界面提示。\n点击finish即可。\n第一次启动会询问，是否导入一些设置。\n选择第二个不导入，保持默认设置，再点击OK。\n选择背景主题\n左边是黑色背景。右边是白色背景。\n这个可以根据自己的喜好来选择。\n选择完毕点击右下角的next\n在本界面让我们购买idea。\n因为我们是学习阶段，所以可以使用免费使用30天。\n点击第一排第二个。Evaluate for free\n点击蓝色的Evaluate，就可以开始免费试用30天了。 当看到这个界面，就表示idea已经成功安装完毕\n可以点击右上角关闭。\n8.3 IDEA中层级结构介绍 8.3.1 结构分类 project（项目、工程） module（模块） package（包） class（类） 8.3.2 结构介绍 ​\t为了让大家更好的吸收，package这一层级，我们后面再学习，先学习最基础的project、module、class。\nproject（项目、工程） ​\t淘宝、京东、黑马程序员网站都属于一个个项目，IDEA中就是一个个的Project。\nmodule（模块） ​\t在一个项目中，可以存放多个模块，不同的模块可以存放项目中不同的业务功能代码。在黑马程序员的官方网站中，至少包含了以下模块：\n论坛模块 报名、咨询模块 为了更好的管理代码，我们会把代码分别放在两个模块中存放。\npackage（包） ​\t一个模块中又有很多的业务，以黑马程序员官方网站的论坛模块为例，至少包含了以下不同的业务。\n发帖 评论 为了把这些业务区分的更加清楚，就会用包来管理这些不同的业务。\nclass（类） ​\t就是真正写代码的地方。\n8.3.3 小结 层级关系\n​\tproject - module - package - class\n包含数量\n​\tproject中可以创建多个module ​\tmodule中可以创建多个package ​\tpackage中可以创建多个class\n​\t这些结构的划分，是为了方便管理类文件的。\n8.4 IDEA中的第一个代码 8.4.1 操作步骤 创建Project 项目 创建Module 模块 创建class 类 在类中编写代码 完成编译运行 8.4.2 分步图解 双击启动图标\n首先要新建一个项目\n点击creat new project\n我们要从0开始写代码，所以新建一个空的什么都没有的项目。\n点击左下方的Empty Project\n再点击右下角的next\n输入项目的名称\n输入项目的存放路径\n点击ok。idea会帮助我们在本地创建一个项目文件夹 点击Module，准备新建一个模块 点击+\n再点击New Module\n我们要编写Java代码，所以要新建一个Java模块。\n点击Java\n再点击右下角的next\n输入模块的名称\n再点击右下角的Next\n成功新建一个模块之后，中间就会出现刚刚新建的模块\n点击右下角的OK\n回到主界面\n展开刚刚新建的模块\n右键点击src，选择New，选择Java Class\n输入类名\n再按回车\n由于字体比较小\n所以，我们要设置一下字体。\n点击File，选择Setting。\n搜索一下font\n在右边可以输入Size的数值来调节代码字体的大小。\n设置完毕后点击右下角的OK\n编写代码 运行代码\n右键空白处，点击Run\n最下面会弹出控制台。\n所有输出语句中的内容，都会在控制台上展示。\n8.5 IDEA中类的相关操作 8.5.1 类的相关操作 新建类文件 删除类文件 修改类文件 8.5.2 新建类文件 所有的Java代码都会写在src文件夹当中。\n所以，右键点击src，选择new，点击Java Class\n输入类名，再按回车\n新建完毕\n8.5.3 修改类名 右键点击想要修改的文件\n点击Refactor\n再点击Rename\n输入想要修改的名字\n输入完毕点击下面的Refactor\n文件名和类名均已修改成功\n8.5.4 删除类文件 想要删除哪个文件，就右键点击该文件\n选择Delete即可\n在弹出的界面中点击OK，确定删除 小贴士：\n此时删除是不走回收站的，直接从硬盘中删掉了。\n8.6 IDEA中模块的相关操作 8.6.1 模块的相关操作 新建模块 删除模块 修改模块 导入模块 8.6.2 新建模块 点击File，选择Project Structure 选择Module 点击+\n选择New Module\n要创建一个Java模块，所以选择第一个Java\n点击右下角的Next\n输入模块的名称\n点击右下角的Finish\n成功新建完毕之后，在中间空白区域就出现了刚刚新建的模块\n点击右下角的OK\n在主界面中，也会出现刚刚新建的模块 8.6.3 删除模块 右键点击模块\n选择Remove Module\n选择Remove，表示确定删除 此时发现，在IDEA列表页面，删除的模块已经不在了。 小贴士：\n此时删除仅仅是从IDEA列表中的删除，在本地硬盘中还是存在的。\n8.6.4 修改模块 右键点击模块名\n选择Refactor\n再选择Rename\n选择第三个修改模块名和本地文件夹名\n点击OK\n输入要修改的新的模块名\n输入完毕点击Refactor\n回到主界面，就发现模块名和文件夹名都已经修改完毕 8.6.5 导入模块 点击File，选择Project Structure 选择Module\n点击+\n选择Import Module\n从本地硬盘中选择要导入的模块\n再点击OK\n不断点击Next 如果中间出现提示框，则点击Overwrite\n然后继续点击右下角的Next\n一直点到finish为止 成功导入后，在中间位置就会出现导入的模块信息 在主界面中也会出现导入的模块信息 展开模块点击模块中的Java文件，会发现代码报错。\n是因为导入模块跟JDK没有关联导致。\n可以点击右上角的Setup SDK\n再选择已经安装的JDK版本即可\n导入完毕之后，代码就恢复正常不会报错了 8.7 IDEA中项目的相关操作 8.7.1 项目的相关操作 关闭项目 打开项目 修改项目 新建项目 8.7.2 关闭项目 点击File，选择Close Project即可 刚刚操作的项目就已经关闭了\n左侧是项目列表，如果要再次打开该项目，直接点击即可。\n右侧有create new project，可以再建一个新的项目\n鼠标放在项目上，后面会出现一个叉。\n如果点击了这里的叉，会在IDEA的列表中删除。不会删除本地硬盘上的项目。\n8.7.3 打开项目 在本界面还可以打开本地已经存在的项目\n点击Open or Import\n选择要打开的项目\n点击OK\n项目就被打开了。 8.7.4 修改项目 点击File，选择Project Structure 在这个界面，默认是Module\n所以，要先点击Project\n在右侧页面中，输入新的项目名称\n修改JDK版本和编译版本都变成JDK14\n再点击OK\n此时发现，项目名称已经修改完毕 但是本地文件夹的名字还没有修改 需要先关闭当前项目 点击项目后面的叉，从列表中移除项目 到本地硬盘中手动修改文件夹的名称 点击Open or Import重新打开项目 选择修改之后的项目\n点击OK\n此时会发现，项目名称和本地硬盘文件夹的名称都已经修改完毕了 8.7.5 新建项目 点击File\n选择New\n点击Project\n同样还是创建一个什么都没有的空项目 输入项目的名称\n点击右下角的finish\nIDEA循环是否需要帮我们在本地创建一个新的文件夹\n点击OK\n询问是在本窗口打开还是在一个新的窗口打开。\n可以点击New Window，在一个新的窗口打开。\n此时就出现了两个窗口，在一个新的窗口打开了新的项目 ","date":"2024-10-07T14:37:10+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day02-java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/","title":"day02-Java基础概念"},{"content":" 1. 人机交互 1.1 什么是cmd？ 就是在windows操作系统中，利用命令行的方式去操作计算机。\n我们可以利用cmd命令去操作计算机，比如：打开文件，打开文件夹，创建文件夹等。\n1.2 如何打开CMD窗口？ 按下快捷键：win + R。\n此时会出现运行窗口。\n在运行窗口中输出cmd\n输出回车。\n解惑：\n​\tcmd默认操作C盘下的users文件夹下的XXX文件夹。（XXX就是计算机名）\n1.3 常用CMD命令 扩展一个小点：\n​\t在很多资料中都说成是DOS命令，其实是不对的。真正的DOS命令是1981年微软和IBM出品的MS-DOS操作系统中的命令才叫做DOS命令。\n​\t而在Windows中，win98之前的操作系统是以非图形化的DOS为基础的，可以叫做DOS命令。到了2000年以后，windows逐渐的以图形化界面为主了，这个时候就不能叫DOS命令了，他只是模拟了DOS环境而已，很多的原本的DOS命令已经无法使用了，所以这个时候叫做CMD命令会更准确一些。\n常见的CMD命令如下：\n操作 说明 盘符名称: 盘符切换。E:回车，表示切换到E盘。 dir 查看当前路径下的内容。 cd 目录 进入单级目录。cd itheima cd .. 回退到上一级目录。 cd 目录1\\目录2... 进入多级目录。cd itheima\\JavaSE cd \\ 回退到盘符目录。 cls 清屏。 exit 退出命令提示符窗口。 1.4 CMD练习 需求：\n利用cmd命令打开自己电脑上的QQ。\n完成步骤：\n1 2 3 4 1,确定自己电脑上的QQ安装在哪里 2,启动cmd 3,进入到启动程序QQ.exe所在的路径。 4,输出qq.exe加回车表示启动qq。 解惑：\n​\t在windows操作系统当中，文件名或者文件夹名是忽略大小写的。\n1.5 环境变量 作用：\n​\t如果我想要在CMD的任意目录下，都可以启动某一个软件，那么就可以把这个软件的路径配置到环境变量中的PATH里面。\n​\t在启动软件的时候，操作系统会先在当前路径下找，如果在当前录课没有再到环境变量的路径中去找。如果都找不到就提示无法启动。\n步骤：\n右键我的电脑，选择属性。 点击左侧的高级系统设置 选择高级，再点击下面的环境变量。 找系统变量里面的PATH 把软件的完整路径，配置到PATH当中就可以了。 （可做可不做）就是把自己配置的路径，移动到最上面。 图解示例如下：\n第一步：右键点击我的电脑并选择属性。\n（如果无法出现第二步界面，可以打开我的电脑之后右键点击空白处）\n第二步：点击高级系统设置。\n​\t第三步：选择高级，再点击下面的环境变量。\n第四步：找系统变量里面的PATH\n第五步：点击新建，把软件的完整路径，配置到PATH当中，再点击确定即可。\n第六步：（可做可不做）点击上移，把当前配置的路径移动到最上面。\n移动的好处：在CMD中打开软件时，会先找当前路径，再找环境变量，在环境变量中是从上往下依次查找的，如果路径放在最上面查找的速度比较快。\n2. Java概述 1.1 Java是什么？ 语言：人与人交流沟通的表达方式\n计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言\nJava是一门非常火的计算机语言。（也叫做编程语言）\n我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了\n1.2下载和安装 1.2.1 下载 通过官方网站获取JDK\nhttp://www.oracle.com\n注意1：针对不同的操作系统，需要下载对应版本的JDK。\n注意2：\n​\t如果你的电脑是windows32位的，建议重装系统，重装成64位的操作系统。\n​\t因为Java从9版本开始，就已经不提供32位版本的安装包了。\n​\t如果自己不愿意下载，到今天day01资料文件中，也有对应的安装包。\n1.2.2 安装 ​\t傻瓜式安装，下一步即可。默认的安装路径是在C:\\Program Files下。\n建议：\n安装路径不要有中文，不要有空格等一些特殊的符号。 以后跟开发相关的所有软件建议都安装在同一个文件夹中，方便管理。 1.2.3 JDK的安装目录介绍 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 1.3 HelloWorld小案例 ​\tHelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。\n2.3.1 Java程序开发运行流程 开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。\n2.3.2 HelloWorld案例的编写 新建文本文档文件，修改名称为HelloWorld.java。 注意：后缀名为java的才是java文件。\n用记事本打开HelloWorld.java文件，输写程序内容。 注意：代码要跟我编写的完全保持一致。\n1 2 3 4 5 public class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;HelloWorld\u0026#34;); } } 保存 注意：未保存的文件在左上角会有*符号标记\n编译文件。编译后会产生一个class文件。\njava文件：程序员自己编写的代码。\nclass文件：交给计算机执行的文件。\n运行代码\n注意：运行的是编译之后的class文件。\n用到两个命令：\n​\tjavac + 文件名 + 后缀名 （就是编译java文件）\n​\tjava + 文件名（运行编译之后的class文件）\n1.4 HelloWorld案例常见问题 1.4.1 BUG ​\t在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。\n1.4.2 BUG的解决 具备识别BUG的能力：多看 具备分析BUG的能力：多思考，多查资料 具备解决BUG的能力：多尝试，多总结 1.4.3 HelloWorld常见问题 1、非法字符问题。Java中的符号都是英文格式的。\n2、大小写问题。Java语言对大小写敏感（区分大小写）。\n3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。\n4、编译命令后的java文件名需要带文件后缀.java\n5、运行命令后的class文件名（类名）不带文件后缀.class\n\u0026hellip;\n常见错误代码1： 1 2 3 4 5 publicclass HelloWorld{ public static void main(String[] args){ System.out.println(\u0026#34;HelloWorld\u0026#34;); } } 问题：\n​\tpublic和class之间缺少一个空格。\n技巧：一般来讲在单词之间的空格是不能省略的。\n​\t如果是单词和符号之间的空格是可以省略的。\n常见错误代码2： 1 2 3 4 5 public class HelloWorld{ public static void main(String[] args){ system.out.println(\u0026#34;HelloWorld\u0026#34;); } } 问题：\n​\tsystem首字母必须大写。\n技巧：\n​\tJava代码中，是严格区分大小写的。\n​\t所以该大写的地方一定要大写，该小写的地方一定要小写。多多练习。\n常见错误代码3： 1 2 3 4 5 public class HelloWorld{ public static void main(String[] args){ System.out.println(HelloWorld); } } 问题：\n​\t第三行代码中的HelloWorld必须用双引号引起来，否则就会出现问题。\n常见错误代码4： 1 2 3 4 5 public class HelloWorld{ public static void main(String[] args){ System.out.println(\u0026#34;HelloWorld\u0026#34;)； } } 问题：\n​\t在以后代码当中，所有的标点符号必须是英文状态下的。\n技巧：\n​\t可以在输入法中进行对应的设置。\n1.5 环境变量 1.5.1 为什么配置环境变量 ​\t开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在bin目录下使用，而我们想要在任意目录下都能使用，所以就要配置环境变量。\n注意：现在最新从官网上下载的JDK安装时会自动配置javac、java命令的路径到Path环境变量中去 ，所以javac、java可以直接使用。\n1.5.2配置方式 以前下载的老版本的JDK是没有自动配置的，而且自动配置的也只包含了4个工具而已，所以我们需要删掉已经配置完毕的，再次重新配置Path环境变量。\n①JAVA_HOME：告诉操作系统JDK安装在了哪个位置（未来其他技术要通过这个找JDK）\n②Path：告诉操作系统JDK提供的javac(编译)、java(执行)命令安装到了哪个位置\n1.5.3win10的bug 当电脑重启之后，环境变量失效了。表示操作系统不支持自定义的环境变量。\n步骤：\n还是要配置JAVA_HOME给以后的相关软件去使用\n我们可以把java和javac的完整路径配置到PATH当中。\nE:\\develop\\JDK\\bin\n1.6 Notepad++ 1.6.1下载 ​\t打开百度，搜索一下notepad++就可以了。\n​\tday01的资料文件夹里面也有对应的安装包。\n1.6.2 安装 傻瓜式安装，直接点击下一步就可以了。\n​\t对安装路径有两个小建议：\n路径不要有中文，不要有空格，不要有一些特殊符号 建议最好把所有的跟开发相关的软件都放在一起，方便管理。 1.6.3 设置 ​\t右键点击java文件，选择edit with notepad++。\n​\t点击设置，再点击首选项。在弹出的页面当中，左侧选择新建，中间选择Java，右侧选择ANSI。\n1.6.4 练习 ​\t利用notepad++去编写一个HelloWorld并能成功编译和运行。\n1.7 Java语言的发展 三个版本：\nJava5.0：这是Java的第一个大版本更新。 Java8.0：这个是目前绝大数公司正在使用的版本。因为这个版本最为稳定。 Java15.0：这个是我们课程中学习的版本。 解惑：\n​\t我们学的跟工作中使用的版本不太一样啊。会不会影响以后工作呢？\n向下兼容。新的版本只是在原有的基础上添加了一些新的功能而已。\n举例：\n用8版本开发的代码，用11版本能运行吗？必须可以的。\n用11版本开发的代码，用8版本能运行吗？不一定。\n如果11版本开发的代码，没有用到9~11的新特性，那么用8是可以运行的。\n如果11版本开发的代码，用到了9~11的新特性，那么用8就无法运行了。\n1.8 Java的三大平台 ​\tJavaSE、JavaME、JavaEE\n1.8.1 JavaSE ​\t是其他两个版本的基础。\n1.8.2 JavaME ​\tJava语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。\n​\t其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。\n​\t但是，安卓也是可以用Java来开发的。\n1.8.3 JavaEE ​\t用于Web方向的网站开发。（主要从事后台服务器的开发）\n​\t在服务器领域，Java是当之无愧的龙头老大。\n1.9 Java的主要特性 面向对象 安全性 多线程 简单易用 开源 跨平台 1.9.1 Java语言跨平台的原理 操作系统本身其实是不认识Java语言的。 但是针对于不同的操作系统，Java提供了不同的虚拟机。 虚拟机会把Java语言翻译成操作系统能看得懂的语言。\n1.10 JRE和JDK JVM（Java Virtual Machine），Java虚拟机\nJRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）\nJDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具\n总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。\n","date":"2024-10-06T12:54:10+08:00","image":"https://AXiao-HOLO.github.io/post/Image_1724940523674.jpg","permalink":"https://AXiao-HOLO.github.io/p/day01-java%E5%85%A5%E9%97%A8/","title":"day01-Java入门"},{"content":"这个页面记录我的markdown语法学习的记录，来源于这里。学习流程为在这篇文章中写出和目标文章相同的效果。\n一、Markdown基本语法 1.标题语法 1.1写法1： 1 2 3 4 5 6 # 一级标题\t或者用HTML语法：\u0026lt;h1\u0026gt;Heading level 1\u0026lt;/h1\u0026gt; ## 二级标题\t或者用HTML语法：\u0026lt;h2\u0026gt;Heading level 2\u0026lt;/h2\u0026gt; ### 三级标题\t··· #### 四级标题\t··· ##### 五级标题\t··· ###### 六级标题\t··· 需要注意的是，在#的后面要加上一个空格。\n实例效果：\n1.2写法2： 1 在标题的下面卸任一数量的==或者--来表示一级标题或者耳机标题 预览效果：\n2.字体语法： 2.1设计粗体、斜体、和删除线的方法 1 2 3 4 5 *这里是文字*\t//斜体 _这里是文字_\t//斜体 **这里是文字**\t//粗体 ***这里是文字***\t//斜体+粗体 ~~这里是文字~~\t//删除线 这里是文字\t//斜体 这里是文字\t//斜体 这里是文字\t//粗体 这里是文字\t//斜体+粗体 这里是文字\t//删除线\n示例效果：\n2.2设计字体、字号和颜色 这里，就需要用到HTML语法了。\n因为它本身是不支持修改字体、字号与颜色等功能的。\n有些网站，比如像Github、知乎、简书等，它们就无法设置这种功能。不过像有的万盏，比如像CSDN，它的Markdown编辑器做了很好的扩展、支持HTML语法，就有这样的功能\n具体如下：\n1 \u0026lt;font face=\u0026#39;黑体\u0026#39; color=#ff0000 size=10\u0026gt;我是正文\u0026lt;/font\u0026gt; 我是正文\n在Typora编辑器中可以实现\n这里的【黑体】，也可以改成【宋体】、【楷体】、【微软雅黑】等等。\n这里的size，是规定文本尺寸的大小。一般是1-7，浏览器默认为3。\n至于这里的color，建议可以用十六进制来表示，也可以用rgb来表示。如下表：\n我仅截取了部分。如果没有你想要的颜色，可以查看RGB颜色值与十六进制颜色码对照表\n2.3背景色 在markdown语法里，本身也是没有背景色这样一个选项的。\n所以，就需要用内置HTML的形式。\n借助 table, tr, td 等表格标签的 bgcolor 属性来实现背景色的功能。举例如下：\n1 \u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;td bgcolor=orange\u0026gt;背景色是：orange\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026lt;/table\u0026gt; 渲染效果：\n背景色是：orange 3.链接语法 3.1Markdown语法形式 1 [文本替换链接](链接) 比如，我想要访问baidu.com，那么，我就可以：\n1 [百度一下，我就知道](baidu.com) 百度一下，我就知道\n给链接添加一个Title：\n什么叫给链接添加一个标题？ 就是把你的鼠标放到该链接上时，会显示出来的文字。\n直接在圆括号后面添加即可，就像这样：\n1 [百度一下，你就知道](baidu.com \u0026#34;搜索网站\u0026#34;) 百度一下，你就知道\n3.2HTML形式语法 1 \u0026lt;a href=\u0026#34;超链接地址\u0026#34; title=\u0026#34;超链接title\u0026#34;\u0026gt;超链接显示名\u0026lt;/a\u0026gt; 百度一下，你就知道\n出来的效果和上面的是一样的。\n3.3图片链接 ——markdown语法：\n1 ！[图片解释性内容](图片链接) 比如：\n不过，在一般情况下，你直接把你的图片复制进去就可以了。链接会帮你自动生成的。\n但是，如果你的图片仅仅是保存在本地，没有存放到图床等地方，那么当你的文件传输给别人的时候，就会丢失。这个时候，需要把图片存放到云端。具体的方法就是要搭建图床。关于搭建Github图床的方法，可以参见这篇文章：(如何用github搭建图床（亲测有效）_jxwd的博客-CSDN博客\n——HTML形式的语法\n关于图片，也可以用HTML语法来进行实现。\n具体来说，就是：\n1 \u0026lt;img src=\u0026#34;图片链接\u0026#34; alt=\u0026#34;图片alt\u0026#34; title=\u0026#34;图片title\u0026#34;\u0026gt; 渲染的效果是一样的。\n——把图片也变成超链接：\n那么，在图片中，也是可以添加链接的。\n具体操作的方法语法格式为：\n1 [![我的博客主页]([相关图片链接])](跳转链接) 比如，你点击我下面的图片试试，你看你会不会跳到我的博客主页中去【可能需要按住ctrl键，也就是说，我的图片此时就相当于一个超链接】：\n当然，关于图片的操作还有很多，但其他的大多都不太常用了，我们这里就不再介绍。\n3.4自动生成超链接 有一种比较简单的方法，就是直接在链接的两侧加上一个尖括号，这样markdown会自动将其识别为一个链接。\n具体来说，就是：\n1 \u0026lt;\u0026#34;[相关链接]\u0026#34;\u0026gt; 比如，如下图所示，这就是我前面的图片的链接：\n\u0026lt;\u0026quot;[https://c-ssl.dtstatic.com/uploads/item/201503/08/20150308161918_BkZrQ.thumb.1000_0.png]\u0026quot;\u0026gt;\n这个样子的话，对于网址和Email，也可以比较方便地转换为可点击的链接了。读者可自行尝试，直接用尖括号加上邮箱即可。\n如果想要对链接进行渲染，直接在链接上进行其他的渲染操作即可(比如加粗、变换字体、字号等)\n3.5锚点 这是一个很6的语法。\n锚点实际上就是页内连接。\n具体语法是：\n1 2 3 ## 这是我的标题{#index} //在某个标题后面设置锚点 跳转到[目录](#index)\t//回到锚点 可以来举个例子：\n点击目录，可以跳转到 【1.3链接语法】的位置\n注意有些编辑器可能不支持。还有在简书里，它可能会重新跳出来一个页面然后去跳转。所以，这个功能还需要看具体的编辑器是否支持。\n具体写出来，是这个样子\n:\n3.6注脚 语法示例：\n1 2 3 xxxx[^1]xxxx [^1]:xxxx 渲染效果：（注：脚注可能自动被搬运到最后面，请到文章末尾查看）\nxxxx1xxxx\n3.7内容目录 在段落中填写 [TOC] 以显示全文内容的目录结构。\n不过还是需要注意，不是所有的编辑器都支持。比如我记得知乎就不支持（不知道现在支不支持了）。\n4.分割线语法 这个比较简单，如果要创建分隔线，在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。\n效果展示：\n5.代码语法 对于程序员来说，代码是必不可少的。\n插入程序代码的方式主要是利用英文“`”符号（一般在ESC键下方，和~同一个键）包裹代码。\n5.1包裹转义代码 如果你要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(````)中.\n1 2 ``printf(\u0026#34;hello world\u0026#34;);``\t//这是markdown语法 \u0026lt;code\u0026gt;printf(\u0026#34;hello world\u0026#34;);\u0026lt;/code\u0026gt; //这是HTML语法 渲染效果是一样的，如下：\nprintf(\u0026quot;hello world\u0026quot;);\nprintf(\u0026ldquo;hello world\u0026rdquo;);\n5.2代码块 我们刚刚是在所要包裹的代码两侧各加上两个`` `\n那么现在，我直接用三个```来作为开始就好了。\n它的示例效果就是像这样：\n5.3HTML代码块 当然了，也可以用HTML代码块来去写。\n1 2 3 4 5 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;/head\u0026gt; 当然，需要注意的是有些编辑器是不支持HTML语法的。比如简书等。我们在前面提到过。\n6.引用 6.1基本使用方法 在所要加引用的段落前面加上一个\u0026gt;\n比如：\n1 \u0026gt;这是一个引用 渲染效果：\n这是一个引用\n6.2引用嵌套 就是在引用里面再加一层引用。\n语法也很简单：\n1 2 3 \u0026gt;这是一个引用 \u0026gt; \u0026gt;\u0026gt;这是一个嵌套引用 渲染效果：\n这是一个引用\n这是一个嵌套引用\n6.3带有其他元素的块引用 比如，在引用里包含表题 、不同形式的字体等等。类似于不同语法的嵌套使用。\n例如：\n1 2 \u0026gt;**这是一个加粗的引用** \u0026gt;这是一个普通的引用 这是一个加粗的引用 这是一个普通的引用\n7.列表 7.1无序列表 使用*，+，-表示无序列表。\n注意：符号后面一定要有一个空格，起到缩进的作用。\n1 2 3 4 5 6 - 我是无序列表1 - 我是无序列表2 + 我是无序列表3 + 我是无序列表4 * 我是无序列表5 * 我是无序列表6 渲染效果：\n我是无序列表1 我是无序列表2 我是无序列表3 我是无序列表4 我是无序列表5 我是无序列表6 7.2有序列表 使用数字和一个英文句点表示有序列表。\n注意：英文句点后面一定要有一个空格，起到缩进的作用。\n1 2 3 1. 我是有序列表 2. 我是有序列表 3. 我是有序列表 渲染效果：\n我是有序列表 我是有序列表 我是有序列表 另外，列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等。\n【注】在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2017.12.30 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\\就可以了。\n8.表格 语法格式：\n1 2 3 4 姓名|学号|分数 -|-|- 孙悟空|2021|95 猪八戒|20211|96 渲染效果：\n姓名 学号 分数 孙悟空 2021 95 猪八戒 20211 96 二、其他常用 9.换行 方法1：连续两个以上空格+回车。\n方法2：使用html语言换行标签。\n10.特殊符号 (1)对于Markdown中的语法符号，前面加反斜线\\即可显示符号本身。这和高级程序设计语言中的转义用法类似。\n1 2 3 4 \\\\\t表示一个反斜线\\ \\*\t表示一个* \\{\\}\t表示一个{} ··· 大家需要注意这里表示的是什么意思。\n就是说，本来，\\、*等字符可能伴有转义的其他含义。可能是在markdown语法中的一种语法形式。但是，前面加上了\\之后，\\、*这些符号就仅仅是简简单单的斜线和*了。不再具有其他markdown语法的作用。就是纯文本语境下的\\和*。\n(2)其他特殊字符，示例如下(注意在数字的后面的分号不能忘记)：\n1 2 3 4 5 \u0026amp;#10003; 它是一个√ \u0026amp;#10052; 它是一个❄ ... 渲染效果：\n✓\n❄\n这里是通过Unicode码来进行转义的。想知道字符对应的Unicode码，可以看这个网站：\u0026lt;\u0026ldquo;https://unicode-table.com/cn\"\u003e\n不过还是需要注意，不是所有的在线编辑器都支持这样的转换方式。但大多数都支持。\n三、高级用法 11.Latex数学公式 11.1行内公式： 使用两个“$”符号引用公式：\n1 2 $公式$ $n*2$ 渲染效果：\n$n*2$\n**我们可以在$$里写上相应的数学公式。**具体见3.1.2\n11.2具体数学公式 11.2.1指数与下标 1 语法形式：$a^3_{2}$ 渲染效果：\n$a^3_{2}$\n这个^后面，就是跟着一个指数，然后_的后面跟着的就是下标\n11.2.2平方根 1 语法形式：$\\sqrt{x}$ 渲染效果：\n$\\sqrt{x}$\n11.2.3在上方或者下方的下划线(可以表示取反等) 1 2 语法形式：$\\overline{m+n}$ 和 $\\underline{m+n}$ 渲染效果：\n$\\overline{m+n}$\n$\\underline{m+n}$\n11.2.4向量 1 2 3 $\\vec a$\t表示向量a $\\overrightarrow{AB}$ 表示向量AB，箭头指向右(即A-\u0026gt;B)\t$\\overleftarrow{AB}$ 表示向量BA，箭头指向左(即A\u0026lt;-B) 渲染效果：\n$\\vec a$\n$\\overrightarrow{AB}$\n$\\overleftarrow{AB}$\n11.2.5分数 1 语法形式：$\\frac{x^{2}}{k+1}$ 渲染效果：\n$\\frac{x^{2}}{k+1}$\n一般按照：\n1 $\\frac{...}{...}$ 来排版，前面表示分子，后面表示分母 11.2.6积分、求和、求积运算符 1 2 3 求和：$\\sum_{i=1}^{n}$\t//按照$$\\sum_{...}^{...}$$的格式 积分：$\\int_{0}^{\\pi}$\t//按照$$\\int_{...}^{...}$$的格式 求积：$\\prod_{0}^{n}$\t//同上两种类似，按照$$\\prod_{...}^{...}$$的格式 渲染效果：\n$\\sum_{i=1}^{n}$\n$\\int_{0}^{\\pi}$\n$\\prod_{0}^{n}$\n11.2.7其他一些希腊字母的表示 No. Lowercase Uppercase English IPA $1$ $\\alpha$ $A$ $alpha$ /\u0026lsquo;ælfə/ $2$ $\\beta$ $B$ $beta$ /\u0026lsquo;bi:tə/or/\u0026lsquo;beɪtə/ $3$ $\\gamma$ $\\Gamma$ $gamma$ /\u0026lsquo;gæmə/ $4$ $\\delta$ $\\Delta$ $delta$ /\u0026lsquo;deltə/ $5$ $\\epsilon$ $E$ $epsilon$ /\u0026rsquo;epsɪlɒn/ $6$ $\\zeta$ $Z$ $zeta$ /\u0026lsquo;zi:tə/ $7$ $\\eta$ $H$ $eta$ /\u0026lsquo;i:tə/ $8$ $\\theta$ $\\Theta$ $theta$ /\u0026lsquo;θi:tə/ $9$ $\\iota$ $I$ $iota$ /aɪ\u0026rsquo;əʊtə/ $10$ $\\kappa$ $K$ $kappa$ /\u0026lsquo;kæpə/ $11$ $\\lambda$ $\\lambda$ $lambda$ /\u0026rsquo;læmdə/ $12$ $\\mu$ $M$ $mu$ /mju:/ $13$ $\\nu$ $N$ $nu$ /nju:/ $14$ $\\xi$ $\\Xi$ $xi$ /ksi/or/\u0026lsquo;zaɪ/or/\u0026lsquo;ksaɪ/ $15$ $\\omicron$ $O$ $omicron$ /əu\u0026rsquo;maikrən/or/\u0026lsquo;ɑmɪ,krɑn/ $16$ $\\pi$ $\\Pi$ $pi$ /paɪ/ $17$ $\\rho$ $P$ $rho$ /rəʊ/ $18$ $\\sigma$ $\\Sigma$ $sigma$ /\u0026lsquo;sɪɡmə/ $19$ $\\tau$ $T$ $tau$ /tɔ:/or/taʊ/ $20$ $\\upsilon$ $\\Upsilon$ $upsilon$ /\u0026lsquo;ipsilon/or/\u0026lsquo;ʌpsilɒn/ $21$ $\\phi$ $\\Phi$ $phi$ /faɪ/ $22$ $\\chi$ $X$ $chi$ /kaɪ/ $23$ $\\psi$ $\\Psi$ $psi$ /psaɪ/ $24$ $\\omega$ $\\Omega$ $omega$ /\u0026lsquo;əʊmɪɡə/or/oʊ\u0026rsquo;meɡə/ 12.流程图 1 tag=\u0026gt;type: content:\u0026gt;url 源码如下图所示：\n1 2 3 4 5 6 7 8 9 st=\u0026gt;start: 开始 e=\u0026gt;end: 结束 op=\u0026gt;operation: 操作 sub1=\u0026gt;subroutine: 子程序 cond=\u0026gt;condition: Yes or No? io=\u0026gt;inputoutput: 输入/输出 st-\u0026gt;op-\u0026gt;cond cond(yes)-\u0026gt;io-\u0026gt;e cond(no)-\u0026gt;sub1(right)-\u0026gt;op 具体可参考：markdown 流程图语法-CSDN博客\n以上。\n文章参考了许多文章和资源，部分链接如下，在此鸣谢：\n[1]\u0026lt;\u0026ldquo;https://blog.csdn.net/weixin_45494811/article/details/104307670\"\u003e\n[2]\u0026lt;\u0026ldquo;https://markdown.com.cn/basic-syntax/\"\u003e\n[3]\u0026lt;\u0026ldquo;https://blog.csdn.net/qq_21808961/article/details/81052243\"\u003e\n[4]\u0026lt;\u0026ldquo;https://www.mohu.org/info/symbols/symbols.htm\"\u003e\n[5]\u0026lt;\u0026ldquo;https://markdown.com.cn/cheat-sheet.html\"\u003e\n注意： 这个页面记录我的markdown语法学习的记录，来源于这里。学习流程为在这篇文章中写出和目标文章相同的效果。\nxxxx\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-09-15T16:05:56+08:00","image":"https://AXiao-HOLO.github.io/p/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/161229155190231137135-20230610115939_hu1720298229994273052.png","permalink":"https://AXiao-HOLO.github.io/p/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/","title":"Markdown语法学习"}]